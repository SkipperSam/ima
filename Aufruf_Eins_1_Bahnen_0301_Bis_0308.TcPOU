<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308" Id="{b8d257ef-f671-462d-9c6d-78ad3fe4ceba}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Aufruf_Eins_1_Bahnen_0301_Bis_0308
(*
VersionsNr:		1.0
VersionsDatum:	19.09.2013
Autor:		M.Richter

*)


VAR_OUTPUT	(* Signale an Einschaltung *)

	bQ_BereichZyklusBeendet_C1_1:			BOOL:= TRUE;
	bQ_BereichGestoppt_C1_1:				BOOL:= TRUE;
	bQ_BereichJobAktiv_C1_1:				BOOL;

	bQ_BereichZyklusBeendet_C2_1:			BOOL:= TRUE;
	bQ_BereichGestoppt_C2_1:				BOOL:= TRUE;
	bQ_BereichJobAktiv_C2_1:				BOOL;

	bQ_BereichZyklusBeendet_C2_2:			BOOL:= TRUE;
	bQ_BereichGestoppt_C2_2:				BOOL:= TRUE;
	bQ_BereichJobAktiv_C2_2:				BOOL;

END_VAR

VAR_OUTPUT	(* Meldungen *)
	bQ_MStillstand_TrotzBelegung:			BOOL;
	bQ_MFehlerHoehenkontrolle030801:		BOOL;
END_VAR

VAR
	TBisErkennungStillstand:			TON;
	fbStoerungDruckluft:				FB_StoerungDruckluft;

	bFreigabeFuerJob_C1_1:				BOOL;
	bFreigabeFuerBuchen_C1_1:			BOOL;
	bFreigabeFuerJob_C2_1:				BOOL;
	bFreigabeFuerBuchen_C2_1:			BOOL;
	bFreigabeFuerJob_C2_2:				BOOL;
	bFreigabeFuerBuchen_C2_2:			BOOL;

	bEineBahnBelegt:					BOOL;
	i:							INT;
	iEins_Id:						INT;

	
(* Hardware *)

	fbHardwareBahn030101:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn030201:				FB_Bahnhardware_Winkel_2Roll_1Riem;
	fbHardwareBahn030301:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn030401:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn030501:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn031401:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn031501:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn032401:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn032501:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn030601:				FB_Bahnhardware_BahnEinfach;
	fbHardwareBahn030701:				FB_Bahnhardware_Winkel_1Roll_2Riem;
	fbHardwareBahn030801:				FB_Bahnhardware_BahnEinfach;


(* Umrichter *)

	fbG6UmrichterBahn030101:				FB_G6Umrichter;
	fbG6UmrichterBahn030201_Roll1:			FB_G6Umrichter;
	fbG6UmrichterBahn030202_Roll2:			FB_G6Umrichter;
	fbG6UmrichterBahn030203_Roll3:			FB_G6Umrichter;
	fbG6UmrichterBahn030204_Roll4:			FB_G6Umrichter;
	fbG6UmrichterBahn030205_Riem:			FB_G6Umrichter;
	fbG6UmrichterBahn030301:				FB_G6Umrichter;
	fbG6UmrichterBahn030401:				FB_G6Umrichter;
	fbG6UmrichterBahn030501:				FB_G6Umrichter;
	fbG6UmrichterBahn030601:				FB_G6Umrichter;
	fbG6UmrichterBahn030701_Roll:			FB_G6Umrichter;
	fbG6UmrichterBahn030702_Riem1:			FB_G6Umrichter;
	fbG6UmrichterBahn030703_Riem2:			FB_G6Umrichter;
	fbG6UmrichterBahn030801:				FB_G6Umrichter;
	fbG6UmrichterBahn030802:				FB_G6Umrichter;
	fbG6UmrichterBahn031401:				FB_G6Umrichter;
	fbG6UmrichterBahn031501:				FB_G6Umrichter;
	fbG6UmrichterBahn032401:				FB_G6Umrichter;
	fbG6UmrichterBahn032501:				FB_G6Umrichter;

	
(* Jobhandling *)

	fbJobBahn030101:						FB_Bahnjob_BahnBilder;
	fbJobBahn030201:						FB_Bahnjob_Winkel_2Roll_1Riem;
	fbJobBahn030301:						FB_Bahnjob_BahnBilder;
	fbJobBahn030401:						FB_Bahnjob_BahnBilder;
	fbJobBahn030501:						FB_Bahnjob_BahnBilder;
	fbJobBahn030601:						FB_Bahnjob_BahnBilder;
	fbJobBahn031401:						FB_Bahnjob_BahnBilder;
	fbJobBahn031501:						FB_Bahnjob_BahnBilder;
	fbJobBahn032401:						FB_Bahnjob_BahnBilder;
	fbJobBahn032501:						FB_Bahnjob_BahnBilder;
	fbJobBahn030701:						FB_Bahnjob_Winkel_1Roll_2Riem;
	fbJobBahn030801:						FB_Bahnjob_BahnBilder;
//	fbJobBahn030802:						FB_Bahnjob_BahnEinfach;
	fbJobBahn040101:						FB_Bahnjob_BahnEinfach; (* Externes TrE *)
	
(* Anschläge *)

	fbAnschlag_030201:					FB_ZylinderEinfach;
	fbMeldungenAnschlag_030201:			FB_Meldungen_Zylinder;

(* Achse Wippe 03.03.01 *)

	TonBisFreigabeTuerOeffnen_Wippe_030301:	TON;
	TonBisMeldungBremse_Wippe_030301:		TON;
	TonBisAchsenAus_KeinJob_Wippe_030301:	TON;
	TonBisAchsenAus_Disable_Wippe_030301:	TON;
	fbRTBremsentestQuit_Wippe_030301:		R_TRIG;
	bFreigabeStartBremsentestAblauf_Wippe_030301:BOOL;
	bFreigabeFahren_Wippe_030301:		BOOL;
	fbFTBremsentestTueranmeldung_Wippe_030301:F_TRIG;
	bSicherePosAngefahren_Wippe_030301:	BOOL;
	bFreigabeTuerOeffnen_Wippe_030301:		BOOL;
	bFreigabeTuer_Achsen_Wippe_030301:		BOOL;
	bFreigabeTuer_Jobs_Wippe_030301:		BOOL;
	bBremsentestAusgefuehrt_Wippe_030301:	BOOL;
	bBremsentestStarten_Wippe_030301:		BOOL;
	bEnergiesparen_Aktivieren_Wippe_030301:	BOOL;
	rIstwert_AchseAus_Wippe_030301:			REAL;
	rIstwert_AchseEin_Wippe_030301:			REAL;
	bProto_BremsePruefen_Wippe_030301:		BOOL;
	bBremsePruefen_Wippe_030301:			BOOL;
	bAchseBeiStartGeeicht_Wippe_030301:		BOOL;

	bSpaltlichschrankenOK_Wippe_030301:				BOOL;
	bFreigabePositionieren_Wippe_030301:			BOOL;
	bFehlerFahrenMinus_Wippe_030301:				BOOL;
	bFehlerFahrenPlus_Wippe_030301:					BOOL;
	bFehlerFahrenFreigabe_Wippe_030301:				BOOL;
	bFreigabeJob_Wippe_030301:						BOOL;
	iWippe_030301_IstAufPos:						INT;
	iWippe_030301_SollAufPos:						INT:= 1;
	fbEntprellenSpaltlichschranken_Wippe_030301:	FB_Entprellen;

	fbAchse_Wippe_030301:						FB_Achsmodul_MC2;
	fbSERCOS_ResetAntrieb_Wippe_030301:			FB_SERCOS_ResetAntrieb_MC2;
	fbSERCOS_AbsolutwertSetzen_Wippe_030301: 	FB_SERCOS_AbsolutwertSetzen;
	fbPosi_Wippe_030301:						FB_Posi_Achse;
	st_Achse_Wippe_030301:						FromTo_Achse;
	fbMeldungen_Wippe_030301:					FB_Meldungen_Achse;
	fbSERCOS_Bremsentest_Wippe_030301:			SetSercosCSBrakeTest_MC2;
	AusgabeBox_Bremskontrolle_Wippe_030301:		FB_Debug_Text;

	strGHdshk_Zwischen_030301:					Bahnaustausch;
	strTrEDaten_Zwischen_030301:				TrE_Daten_All;

(* Achse Wippe 03.06.01 *)

	TonBisFreigabeTuerOeffnen_Wippe_030601:		TON;
	TonBisMeldungBremse_Wippe_030601:			TON;
	TonBisAchsenAus_KeinJob_Wippe_030601:		TON;
	TonBisAchsenAus_Disable_Wippe_030601:		TON;
	fbRTBremsentestQuit_Wippe_030601:			R_TRIG;
	bFreigabeStartBremsentestAblauf_Wippe_030601:	BOOL;
	bFreigabeFahren_Wippe_030601:				BOOL;
	fbFTBremsentestTueranmeldung_Wippe_030601:	F_TRIG;
	bSicherePosAngefahren_Wippe_030601:			BOOL;
	bFreigabeTuerOeffnen_Wippe_030601:			BOOL;
	bFreigabeTuer_Achsen_Wippe_030601:			BOOL;
	bFreigabeTuer_Jobs_Wippe_030601:			BOOL;
	bBremsentestAusgefuehrt_Wippe_030601:		BOOL;
	bBremsentestStarten_Wippe_030601:			BOOL;
	bEnergiesparen_Aktivieren_Wippe_030601:		BOOL;
	rIstwert_AchseAus_Wippe_030601:				REAL;
	rIstwert_AchseEin_Wippe_030601:				REAL;
	bProto_BremsePruefen_Wippe_030601:			BOOL;
	bBremsePruefen_Wippe_030601:				BOOL;
	bAchseBeiStartGeeicht_Wippe_030601:			BOOL;

	bSpaltlichschrankenOK_Wippe_030601:			BOOL;
	bFreigabePositionieren_Wippe_030601:		BOOL;
	bFehlerFahrenMinus_Wippe_030601:			BOOL;
	bFehlerFahrenPlus_Wippe_030601:				BOOL;
	bFehlerFahrenFreigabe_Wippe_030601:			BOOL;
	bFreigabeJob_Wippe_030601:					BOOL;
	iWippe_030601_IstAufPos:					INT;
	iWippe_030601_SollAufPos:					INT:= 1;
	fbEntprellenSpaltlichschranken_Wippe_030601:	FB_Entprellen;

	fbAchse_Wippe_030601:						FB_Achsmodul_MC2;
	fbSERCOS_ResetAntrieb_Wippe_030601:			FB_SERCOS_ResetAntrieb_MC2;
	fbSERCOS_AbsolutwertSetzen_Wippe_030601: 	FB_SERCOS_AbsolutwertSetzen;
	fbPosi_Wippe_030601:						FB_Posi_Achse;
	st_Achse_Wippe_030601:						FromTo_Achse;
	fbMeldungen_Wippe_030601:					FB_Meldungen_Achse;
	fbSERCOS_Bremsentest_Wippe_030601:			SetSercosCSBrakeTest_MC2;
	AusgabeBox_Bremskontrolle_Wippe_030601:		FB_Debug_Text;

	strGHdshk_Zwischen_030601:					Bahnaustausch;
	strTrEDaten_Zwischen_030601:				TrE_Daten_All;

(* Achse Buerste 03.08.01 *)

	TonBisFreigabeTuerOeffnen_Buerste_030801:	TON;
	bFreigabeFahren_Buerste_030801:				BOOL;
	bSicherePosAngefahren_Buerste_030801:		BOOL;
	bFreigabeTuerOeffnen_Buerste_030801:		BOOL;
	bFreigabeTuer_Achsen_Buerste_030801:		BOOL;
	bFreigabeTuer_Jobs_Buerste_030801:			BOOL;
	bAchseBeiStartGeeicht_Buerste_030801:		BOOL;
	bFreigabePositionieren_Buerste_030801:		BOOL;
	bFehlerFahrenMinus_Buerste_030801:			BOOL;
	bFehlerFahrenPlus_Buerste_030801:			BOOL;
	bFehlerFahrenFreigabe_Buerste_030801:		BOOL;
	bFreigabeJob_Buerste_030801:				BOOL;
	rDickeBuerste:						REAL:=10;
	rBreiteBuerste:						REAL;
	bBuersteInPostion_030801:				BOOL;

	fbAchse_Buerste_030801:					FB_Achsmodul_MC2;
	st_Achse_Buerste_030801:				FromTo_Achse;

	fbBuerste_030801: 					FB_Buerste;
	bKleinteilBuerste_030801:				BOOL;
	fbTOF_BuersteAntriebEin_030801:			TOF;
	fbEntprellenHoehenkontrolle_030801:			FB_Entprellen;
	
	
	
	diJobIdAltExternW2:							DINT;
	TrE_DatenJobExternW2:						TrE_Daten_All;

	
	fbQuellTrE_In_JobDaten:				FB_QTrEDaten_In_Jobzeile;
	fbJobDaten_In_ZielTrE:				FB_JobDaten_In_ZielTrE;
	fbTrE_Daten_Leer:					FB_TrE_Daten_Leer;
	fbDatenVerschieben_In_TrEDaten:		FB_DatenVerschieben_In_TrEDaten;

	(* Geschwindigkeitsanpassung kleine Lücken *)
	iSpeedVereinzeln: INT;
	bSpeedErmittelt: BOOL;
	
	(* Teile in Y Position prüfen *)
	
	bPosY1Y2Belegt: BOOL;
	

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[iEins_Id:= giEins_1;

(*--Aufrufe--*)
Up_01_Meldungen();
Up_02_Reset_Grund_Freigabe();

Up_10_AbsAchse_Wippe_030301();
Up_11_AbsAchse_Posi_Wippe_030301();
Up_12_AbsAchse_Wippe_030601();
Up_13_AbsAchse_Posi_Wippe_030601();

Up_14_EilSchl_Buerste_030801();
Up_15_EilSchl_PosiBuerste_030801();

Up_16_Anschlag_030201();
Up_19_Bahn_040101_Extern();

Up_21_Bahn_030801();

Up_22_Bahn_030701();	(* Winkelübergabe *)	
Up_23_Bahn_030601();	(* Wippe *)

Up_24_Bahn_032501();
Up_25_Bahn_032401();

Up_26_Bahn_031501();
Up_27_Bahn_031401();
	
Up_28_Bahn_030501();
Up_29_Bahn_030401();

Up_30_Bahn_030301(); 	(* Wippe *)

Up_31_Bahn_030201();	(* Winkelübergabe *)
Up_32_Bahn_030101();

Up_90_Ausgaben();


]]></ST>
    </Implementation>
    <Action Name="Up_01_Meldungen" Id="{44a06d00-3c2e-429b-a950-8e5aa5bb773f}">
      <Implementation>
        <ST><![CDATA[(*------------------------------------------------------*)
(*------------------------------------------------------*)
(* Druckluftüberwachung                                 *)
(*------------------------------------------------------*)
(*------------------------------------------------------*)

fbStoerungDruckluft.bI_StoerungDruckluft:=
	NOT bIB2Luftd6BarVorhC1
	AND NOT gxTestbetriebOhneMaschineAktiv
	AND NOT bIEDMErrT_AirPressureC1;

fbStoerungDruckluft.bI_FreigabeDruckluft:=
	fbEins[iEins_Id].OsSteuerspannungIstEin
	AND	fbEins[iEins_Id].OsNotHaltIstOK
	AND	gxSicherheitsBereichQuittiertC[giSicher_C1_1];

fbStoerungDruckluft.bI_QuittierenFunktionsStoerung:=
	strGLmHand.bI_QuittStoerung;

fbStoerungDruckluft.tI_BisDruckluftVorhanden:= t#5s;

fbStoerungDruckluft.tI_BisStoerungDruckluft:= t#500ms;

fbStoerungDruckluft();

strGStoerungen[iEins_Id].bStoerungDruckluft:=
	strGStoerungen[iEins_Id].bStoerungDruckluft
	OR	fbStoerungDruckluft.bQ_StoerungDruckluft;

(* Meldungen Wippe 030301 *)

fbMeldungen_Wippe_030301(
	uiI_AxId:= AxId_Wippe_030301,
	uiI_FehlerId:= 3100,
	bI_Aktiv:= NOT GKoAnWippe_030301.xAchse_Inaktiv,
	bI_NotHaltIstOk:= fbEins[iEins_Id].OsNotHaltIstOK,
	bI_Zusatzmeldung2:= FALSE,
	bI_Zusatzmeldung3:= FALSE,
	bI_Zusatzmeldung4:= FALSE,
	bI_Zusatzmeldung10:= bFehlerFahrenFreigabe_Wippe_030301,
	bI_Zusatzmeldung11:= bFehlerFahrenPlus_Wippe_030301,
	bI_Zusatzmeldung12:= bFehlerFahrenMinus_Wippe_030301,
	bI_Zusatzmeldung13:= FALSE,
	bI_Zusatzmeldung14:= FALSE,
	bI_Zusatzmeldung15:= FALSE,
	bI_Zusatzmeldung16:= TonBisMeldungBremse_Wippe_030301.Q,
	bI_Zusatzmeldung17:= fbSERCOS_Bremsentest_Wippe_030301.bQ_Error
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung18:= fbSERCOS_Bremsentest_Wippe_030301.bQ_TestMussErfolgen
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung19:= fbSERCOS_Bremsentest_Wippe_030301.bQ_VorwarnungBremsentest
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung20:= fbSERCOS_Bremsentest_Wippe_030301.bQ_StopBremsentest
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung21:= NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_BremsenTestOK
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung22:= fbSERCOS_Bremsentest_Wippe_030301.bQ_Busy
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung23:= fbSERCOS_Bremsentest_Wippe_030301.bQ_KeineFreigabeZumStart
					AND NOT gxTestbetriebOhneMaschineAktiv,
	fbIO_Achsmodul:= fbAchse_Wippe_030301,
	strIO_Stoerungen:= strGStoerungen[iEins_Id]);

(* Meldungen Wippe 030601 *)

fbMeldungen_Wippe_030601(
	uiI_AxId:= AxId_Wippe_030601,
	uiI_FehlerId:= 3150,
	bI_Aktiv:= NOT GKoAnWippe_030601.xAchse_Inaktiv,
	bI_NotHaltIstOk:= fbEins[iEins_Id].OsNotHaltIstOK,
	bI_Zusatzmeldung2:= FALSE,
	bI_Zusatzmeldung3:= FALSE,
	bI_Zusatzmeldung4:= FALSE,
	bI_Zusatzmeldung10:= bFehlerFahrenFreigabe_Wippe_030601,
	bI_Zusatzmeldung11:= bFehlerFahrenPlus_Wippe_030601,
	bI_Zusatzmeldung12:= bFehlerFahrenMinus_Wippe_030601,
	bI_Zusatzmeldung13:= FALSE,
	bI_Zusatzmeldung14:= FALSE,
	bI_Zusatzmeldung15:= FALSE,
	bI_Zusatzmeldung16:= TonBisMeldungBremse_Wippe_030601.Q,
	bI_Zusatzmeldung17:= fbSERCOS_Bremsentest_Wippe_030601.bQ_Error
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung18:= fbSERCOS_Bremsentest_Wippe_030601.bQ_TestMussErfolgen
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung19:= fbSERCOS_Bremsentest_Wippe_030601.bQ_VorwarnungBremsentest
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung20:= fbSERCOS_Bremsentest_Wippe_030601.bQ_StopBremsentest
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung21:= NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_BremsenTestOK
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung22:= fbSERCOS_Bremsentest_Wippe_030601.bQ_Busy
					AND NOT gxTestbetriebOhneMaschineAktiv,
	bI_Zusatzmeldung23:= fbSERCOS_Bremsentest_Wippe_030601.bQ_KeineFreigabeZumStart
					AND NOT gxTestbetriebOhneMaschineAktiv,
	fbIO_Achsmodul:= fbAchse_Wippe_030601,
	strIO_Stoerungen:= strGStoerungen[iEins_Id]);]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_02_Reset_Grund_Freigabe" Id="{a382013e-23ed-4c47-8640-78bf913e99d0}">
      <Implementation>
        <ST><![CDATA[		(*---------------------------------------------------------------------*)
		(*---------------------------------------------------------------------*)
		(*      Abfrage Reset der Bahnen eines Sicherheitsbereiches            *)
		(*---------------------------------------------------------------------*)
		(*---------------------------------------------------------------------*)


gxBereichResetAktiv[iEins_Id]:=
	fbJobBahn030101.bQ_ResetAktiv
	OR fbJobBahn030201.bQ_ResetAktiv_Sek_1
	OR fbJobBahn030201.bQ_ResetAktiv_Sek_2
	OR fbJobBahn030301.bQ_ResetAktiv
	OR fbJobBahn030401.bQ_ResetAktiv
	OR fbJobBahn030501.bQ_ResetAktiv
	OR fbJobBahn030601.bQ_ResetAktiv
	OR fbJobBahn030701.bQ_ResetAktiv
	OR fbJobBahn030801.bQ_ResetAktiv
	OR fbJobBahn031401.bQ_ResetAktiv
	OR fbJobBahn031501.bQ_ResetAktiv
	OR fbJobBahn032401.bQ_ResetAktiv
	OR fbJobBahn032501.bQ_ResetAktiv
	OR ( NOT  fbPosi_Wippe_030301.OSGRUNDSTELLUNGACHSE
		AND NOT GKoAnWippe_030301.xAchse_Inaktiv )
	OR ( NOT  fbPosi_Wippe_030601.OSGRUNDSTELLUNGACHSE
		AND NOT GKoAnWippe_030601.xAchse_Inaktiv );


		(*---------------------------------------------------------------------*)
		(*---------------------------------------------------------------------*)
		(*  Abfrage Grundstellung der Bahnen eines Sicherheitsbereiches        *)
		(*---------------------------------------------------------------------*)
		(*---------------------------------------------------------------------*)


gxBereichGrundOk[iEins_Id]:=
	fbJobBahn030101.bQ_GrundOK
	AND fbJobBahn030201.bQ_GrundOK_Sek_1
	AND fbJobBahn030201.bQ_GrundOK_Sek_2
	AND fbJobBahn030301.bQ_GrundOK
	AND fbJobBahn030401.bQ_GrundOK
	AND fbJobBahn030501.bQ_GrundOK
	AND fbJobBahn030601.bQ_GrundOK
	AND fbJobBahn030701.bQ_GrundOK
	AND fbJobBahn030801.bQ_GrundOK
	AND fbJobBahn031401.bQ_GrundOK
	AND fbJobBahn031501.bQ_GrundOK
	AND fbJobBahn032401.bQ_GrundOK
	AND fbJobBahn032501.bQ_GrundOK
	AND ( fbPosi_Wippe_030301.OSGRUNDSTELLUNGACHSE
		OR	GKoAnWippe_030301.xAchse_Inaktiv )
	AND ( fbPosi_Wippe_030601.OSGRUNDSTELLUNGACHSE
		OR	GKoAnWippe_030601.xAchse_Inaktiv );


		(*---------------------------------------------------------------------*)
		(*---------------------------------------------------------------------*)
		(*                    Allgemeine Freigabe für Job's                    *)
		(*---------------------------------------------------------------------*)
		(*---------------------------------------------------------------------*)

bFreigabeFuerJob_C1_1:=
	fbEins[iEins_Id].OsAutomatikEin
	AND	fbEins[iEins_Id].OsAutomatikStart
	AND NOT fbEins[iEins_Id].OsZyklusBeenden
	AND NOT gxAnTuerAngemeldetC[giSicher_C1_1]
	AND NOT gxEineTuerOffenC[giSicher_C1_1]
	AND fbJobBahn030101.bQ_GrundOK
	AND NOT fbJobBahn030101.bQ_ResetAktiv;


bFreigabeFuerJob_C2_1:=
 	fbEins[iEins_Id].OsAutomatikEin
	AND	fbEins[iEins_Id].OsAutomatikStart
	AND NOT fbEins[iEins_Id].OsZyklusBeenden
	AND NOT gxAnTuerAngemeldetC[giSicher_C2_1]
	AND NOT gxEineTuerOffenC[giSicher_C2_1]
	AND fbJobBahn030201.bQ_GrundOK_Sek_1
	AND fbJobBahn030201.bQ_GrundOK_Sek_2
	AND fbJobBahn030301.bQ_GrundOK
	AND fbJobBahn030401.bQ_GrundOK
	AND fbJobBahn030501.bQ_GrundOK
	AND fbJobBahn030601.bQ_GrundOK
	AND fbJobBahn030701.bQ_GrundOK
	AND fbJobBahn031401.bQ_GrundOK
	AND fbJobBahn031501.bQ_GrundOK
	AND fbJobBahn032401.bQ_GrundOK
	AND fbJobBahn032501.bQ_GrundOK
	AND ( fbPosi_Wippe_030301.OSGRUNDSTELLUNGACHSE
		OR	GKoAnWippe_030301.xAchse_Inaktiv )
	AND ( fbPosi_Wippe_030601.OSGRUNDSTELLUNGACHSE
		OR	GKoAnWippe_030601.xAchse_Inaktiv )
	AND NOT fbJobBahn030201.bQ_ResetAktiv_Sek_1
	AND NOT fbJobBahn030201.bQ_ResetAktiv_Sek_2
	AND NOT fbJobBahn030301.bQ_ResetAktiv
	AND NOT fbJobBahn030401.bQ_ResetAktiv
	AND NOT fbJobBahn030501.bQ_ResetAktiv
	AND NOT fbJobBahn030601.bQ_ResetAktiv
	AND NOT fbJobBahn030701.bQ_ResetAktiv
	AND NOT fbJobBahn031401.bQ_ResetAktiv
	AND NOT fbJobBahn031501.bQ_ResetAktiv
	AND NOT fbJobBahn032401.bQ_ResetAktiv
	AND NOT fbJobBahn032501.bQ_ResetAktiv
	AND NOT ( NOT  fbPosi_Wippe_030301.OSGRUNDSTELLUNGACHSE
		OR  GKoAnWippe_030301.xAchse_Inaktiv )
	AND NOT ( NOT  fbPosi_Wippe_030601.OSGRUNDSTELLUNGACHSE
		AND NOT GKoAnWippe_030601.xAchse_Inaktiv );

bFreigabeFuerJob_C2_2:=
	fbEins[iEins_Id].OsAutomatikEin
	AND	fbEins[iEins_Id].OsAutomatikStart
	AND NOT fbEins[iEins_Id].OsZyklusBeenden
	AND NOT gxAnTuerAngemeldetC[giSicher_C2_2]
	AND NOT gxEineTuerOffenC[giSicher_C2_2]
	AND fbJobBahn030801.bQ_GrundOK
	AND NOT fbJobBahn030801.bQ_ResetAktiv;

bFreigabeFuerBuchen_C1_1:=
	fbEins[iEins_Id].OsAutomatikEin
	AND NOT fbJobBahn030101.bQ_ResetAktiv;

bFreigabeFuerBuchen_C2_1:=
	fbEins[iEins_Id].OsAutomatikEin
	AND NOT fbJobBahn030201.bQ_ResetAktiv_Sek_1
	AND NOT  fbJobBahn030201.bQ_ResetAktiv_Sek_2
	AND NOT  fbJobBahn030301.bQ_ResetAktiv
	AND NOT  fbJobBahn030401.bQ_ResetAktiv
	AND NOT  fbJobBahn030501.bQ_ResetAktiv
	AND NOT  fbJobBahn030601.bQ_ResetAktiv
	AND NOT  fbJobBahn030701.bQ_ResetAktiv
	AND NOT  fbJobBahn031401.bQ_ResetAktiv
	AND NOT  fbJobBahn031501.bQ_ResetAktiv
	AND NOT  fbJobBahn032401.bQ_ResetAktiv
	AND NOT  fbJobBahn032501.bQ_ResetAktiv;

bFreigabeFuerBuchen_C2_2:=
	fbEins[iEins_Id].OsAutomatikEin
	AND NOT fbJobBahn030801.bQ_ResetAktiv;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_10_AbsAchse_Wippe_030301" Id="{d9c7d313-24d6-41c1-ae0b-bc89100aaab9}">
      <Implementation>
        <ST><![CDATA[(*
------------------------------------------------------
------------------------------------------------------
   Meldung: Zusatzbremse löst nicht
------------------------------------------------------
------------------------------------------------------
*)

TonBisMeldungBremse_Wippe_030301.IN:=
	( NOT bIW303BremseGeloest
		AND	abGReglerfreigabe[AxId_Wippe_030301] )
	AND NOT gxTestbetriebOhneMaschineAktiv;

TonBisMeldungBremse_Wippe_030301( PT:= T#3S );

(*
------------------------------------------------------
------------------------------------------------------
   Achsen nach Zeit ausschalten, wenn kein Job
------------------------------------------------------
------------------------------------------------------
*)
bEnergiesparen_Aktivieren_Wippe_030301:=
	GKoAnWippe_030301.xAchsenNachZeitAusschalten
	AND	GKoAnWippe_030301.tAchsenNachZeitAusschalten > T#0S
	AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossenUndVerriegeltC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossen_FreigabeAchseC[giSicher_C2_1]
	AND NOT gxAnTuerAngemeldetC[giSicher_C2_1]
	AND NOT gxEineTuerOffenC[giSicher_C2_1]
	AND	fbPosi_Wippe_030301.ISAUTOMATIK
	AND	fbPosi_Wippe_030301.OSGRUNDSTELLUNGACHSE
	AND	fbPosi_Wippe_030301.IWDOJOB = eJob_KeinJob
	AND	fbPosi_Wippe_030301.OWJOBAKTIV = eJob_KeinJob
	AND	fbPosi_Wippe_030301.OwJobStatus = iAutomatikBereitJob
	AND	iWippe_030301_IstAufPos = iWippe_030301_SollAufPos
	AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_TestMussErfolgen
	AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_Busy;

TonBisAchsenAus_KeinJob_Wippe_030301.IN:=
	bEnergiesparen_Aktivieren_Wippe_030301;

TonBisAchsenAus_KeinJob_Wippe_030301( PT:= GKoAnWippe_030301.tAchsenNachZeitAusschalten );

TonBisAchsenAus_Disable_Wippe_030301.IN:=
	TonBisAchsenAus_KeinJob_Wippe_030301.Q;

TonBisAchsenAus_Disable_Wippe_030301( PT:= T#5S );

abGAchseDisable[AxId_Wippe_030301]:=
	TonBisAchsenAus_Disable_Wippe_030301.Q
	OR	GKoAnWippe_030301.xAchse_Inaktiv;


(*
------------------------------------------------------
------------------------------------------------------
   Bremse Achse prüfen, ob die Achse gerutscht ist
   wenn Reglerfreigabe aus und wieder an. 
------------------------------------------------------
------------------------------------------------------
*)
(*
---------------------------------------------------
   Istwert beim ausschalten speichern
---------------------------------------------------
*)

IF NOT AxToNcRfg[AxId_Wippe_030301]
	AND NOT AxFrNcFehler[AxId_Wippe_030301]
	AND	AxFrNcSteht[AxId_Wippe_030301]
	AND	rIstwert_AchseAus_Wippe_030301=0
THEN
	rIstwert_AchseAus_Wippe_030301:= AxFrNc_fPosIst[AxId_Wippe_030301];
	rIstwert_AchseEin_Wippe_030301:= 0;
END_IF;

(*
---------------------------------------------------
   Istwert beim einschalten speichern
---------------------------------------------------
*)
IF	AxToNcRfg[AxId_Wippe_030301]
	AND	rIstwert_AchseAus_Wippe_030301 <> 0
THEN
	rIstwert_AchseEin_Wippe_030301:= AxFrNc_fPosIst[AxId_Wippe_030301];
END_IF;

(*
---------------------------------------------------
   Prüfen, ob die Achse gerutscht ist
---------------------------------------------------
*)
IF	rIstwert_AchseAus_Wippe_030301 <> 0
	AND	rIstwert_AchseEin_Wippe_030301 <> 0
THEN
	IF ABS( rIstwert_AchseAus_Wippe_030301 - rIstwert_AchseEin_Wippe_030301 ) > GKoAnWippe_030301.rToleranz_Bremskontrolle
		AND	GKoAnWippe_030301.xMitKontrolleBremse
	THEN
		bBremsePruefen_Wippe_030301:= TRUE;
	ELSE
		rIstwert_AchseAus_Wippe_030301:= 0;
		rIstwert_AchseEin_Wippe_030301:= 0;
	END_IF;
END_IF;

IF	( strGLmHand.bI_QuittStoerung
		AND	bBremsePruefen_Wippe_030301 )
	OR NOT GKoAnWippe_030301.xMitKontrolleBremse
THEN
	bProto_BremsePruefen_Wippe_030301:= FALSE;
	bBremsePruefen_Wippe_030301:= FALSE;
	rIstwert_AchseAus_Wippe_030301:= 0;
	rIstwert_AchseEin_Wippe_030301:= 0;
END_IF;

(*
-----------------
  Fehler-Box
-----------------
*)

IF	bBremsePruefen_Wippe_030301
	AND NOT bProto_BremsePruefen_Wippe_030301	(* damit nur 1 mal gemeldet wird *)
THEN
	AusgabeBox_Bremskontrolle_Wippe_030301.Text1:= CONCAT('!!! Check brake axis !!! - ' , fbSERCOS_ResetAntrieb_Wippe_030301.Name );
	AusgabeBox_Bremskontrolle_Wippe_030301.Text2:= '$N';
	AusgabeBox_Bremskontrolle_Wippe_030301.Text3:= '!!!Difference of the values too high!!!';
	AusgabeBox_Bremskontrolle_Wippe_030301.Text4:= CONCAT( '$N Value closing brake: ', F_RealToString_0Nach( rIstwert_AchseAus_Wippe_030301 ));
	AusgabeBox_Bremskontrolle_Wippe_030301.Text5:= CONCAT( '$N Value opening brake: ', F_RealToString_0Nach( rIstwert_AchseEin_Wippe_030301 ));
	AusgabeBox_Bremskontrolle_Wippe_030301.Text6:= CONCAT( '$N Tolerance brake: ', F_RealToString_0Nach( GKoAnWippe_030301.rToleranz_Bremskontrolle ));

	AusgabeBox_Bremskontrolle_Wippe_030301.BoxArt:= 2;	(* Warnung *)

	IF	AusgabeBox_Bremskontrolle_Wippe_030301.Wert=0
		AND NOT bProto_BremsePruefen_Wippe_030301
	THEN
		F_ProtoText4 ( P_All,
					CONCAT( '!!! Bremse Achse prüfen !!! - ', fbSERCOS_ResetAntrieb_Wippe_030301.Name ),
					CONCAT( ' / Achswert Bremse Schließen: ', F_RealToString_0Nach( rIstwert_AchseAus_Wippe_030301 )),
					CONCAT( ' / Achswert Bremse Öffnen: ', F_RealToString_0Nach( rIstwert_AchseEin_Wippe_030301 )),
					CONCAT( ' / Toleranz Bremse: ', F_RealToString_0Nach( GKoAnWippe_030301.rToleranz_Bremskontrolle )));

		bProto_BremsePruefen_Wippe_030301:= TRUE;
	END_IF;

	AusgabeBox_Bremskontrolle_Wippe_030301( Wert:= 1 );
ELSE
	AusgabeBox_Bremskontrolle_Wippe_030301( Wert:= 0 );
END_IF;



				(*---------------------------------------------------*)
				(*---------------------------------------------------*)
				(*       Zuordnungen: Achsmodul	          	     *)
				(*---------------------------------------------------*)
				(*---------------------------------------------------*)

bFreigabeFahren_Wippe_030301:=						(* vorbereitet ist Einzelachssteller, wenn mit ER-Modul, dann alle Signale vom ER-Modul einfügen *)
	( bIW303ServoBtb
	OR	gxTestbetriebOhneMaschineAktiv
		AND NOT gxTestbetrieb_NotHalt )
	AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
	AND	gxSicherheitsBereichQuittiertC[giSicher_C2_1]
	AND	fbEins[iEins_Id].OsNotHaltIstOK
	AND NOT gxTestEinfahrenKante;

bFreigabeStartBremsentestAblauf_Wippe_030301:=
	fbEins[iEins_Id].OsAutomatikEin
	AND	fbEins[iEins_Id].OsAutomatikStart
	AND	fbPosi_Wippe_030301.OSGRUNDSTELLUNGACHSE;

(*---------------------------------------------------*)
(* Freigabe Tueren Oeffnen		                 *)
(*---------------------------------------------------*)

bFreigabeTuer_Achsen_Wippe_030301:=
	fbAchse_Wippe_030301.OwOut.xAchseBereit
		OR	fbAchse_Wippe_030301.OwOut.xAchseEnabled
		OR	fbAchse_Wippe_030301.OwOut.xAchseDisabled
		OR	fbAchse_Wippe_030301.OwOut.xAchseFehler;

bFreigabeTuer_Jobs_Wippe_030301:=
		fbPosi_Wippe_030301.ISSICHEREPOSANFAHREN
		AND	fbPosi_Wippe_030301.OSSICHEREPOSANGEFAHREN
		AND	fbAchse_Wippe_030301.xAchseSteht;

bSicherePosAngefahren_Wippe_030301:=
	bFreigabeTuer_Jobs_Wippe_030301
	AND	bFreigabeTuer_Achsen_Wippe_030301;

TonBisFreigabeTuerOeffnen_Wippe_030301(
	IN:= ( bSicherePosAngefahren_Wippe_030301
			OR	GKoAnWippe_030301.xSicherheitstuerenOeffnen_WennAchseSteht
				AND	fbAchse_Wippe_030301.xAchseSteht
			OR ( NOT fbEins[iEins_Id].OsNotHaltIstOK
					OR	GKoAnWippe_030301.xAchse_Inaktiv )
				AND	fbAchse_Wippe_030301.xAchseSteht )
		AND ( gxAnTuerAngemeldetC[giSicher_C2_1]
			OR	gxEineTuerOffenC[giSicher_C2_1] )
		AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_Busy
		AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_StopBremsentest,			(* Steller gibt die Tür eh nicht frei, Test muss erst erfolgen *)
	PT:= t#1s,
	Q=> bFreigabeTuerOeffnen_Wippe_030301,
	ET=> );

	
strIOSafetyModulW303KF42.bQSwitchMode:=
bQW303Betriebsartumsch:=											(* Betriebsartenschalter, TRUE = Normalbetrieb *)
	NOT bFreigabeTuerOeffnen_Wippe_030301								(* sichere Pos angefordert und angefahren *)
	AND NOT Aufruf_Wartungstueren.bFreigabeTuerOeffnenC[giSicher_C2_1]				(* Tür wird nicht freigegeben *)
	OR NOT gxAnTuerAngemeldetC[giSicher_C2_1]								(* Keine Tür offen oder Anmeldung aktiv *)
		AND NOT gxEineTuerOffenC[giSicher_C2_1];

(*------------------------------------------------------*)
(* Quittierung fehlender Bremsentest nach Neustart      *)
(*------------------------------------------------------*)

fbRTBremsentestQuit_Wippe_030301(
	CLK:= gxSicherheitsBereichQuittiertC[giSicher_C2_1]
		AND	fbSERCOS_Bremsentest_Wippe_030301.bQ_TestMussErfolgen
		AND	fbSERCOS_Bremsentest_Wippe_030301.bQ_StopBremsentest
		AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_BremsentestNachStartOK
		AND	fbSERCOS_Bremsentest_Wippe_030301.fbGetSercosError.udiSercosErrID = 3123,		(* Fehler in Bin: fehlender Bremsentest *)
	Q=> );

(*------------------------------------------------------*)
(*  Achse	                                            *)
(*------------------------------------------------------*)

fbAchse_Wippe_030301.AxId:= AxId_Wippe_030301;
fbAchse_Wippe_030301.IwResetMode:= 1;

fbAchse_Wippe_030301.IsHand:=
	fbEins[iEins_Id].OsHandEin
		AND NOT P_ServiceAchsen.xAktiv[AxId_Wippe_030301]
	OR	P_ServiceAchsen.xAktiv[AxId_Wippe_030301]
		AND	P_ServiceAchsen.xStopAktiv_Reset[AxId_Wippe_030301]
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	GDat.TrE_Daten[TrEId_030301].iReset <> 0;

fbAchse_Wippe_030301.IsAutomatik:=
	fbEins[iEins_Id].OsAutomatikEin
	OR		fbPosi_Wippe_030301.OwJobStatus = iFaehrtAufSicherePos
		AND NOT  fbPosi_Wippe_030301.ISHAND
	OR	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt
	OR	P_ServiceAchsen.xAktiv[AxId_Wippe_030301];

fbAchse_Wippe_030301.IsResetNachNotHalt:=
	( fbEins[iEins_Id].IsTQuittierenNotHalt
		AND NOT fbEins[iEins_Id].OsNotHaltIstOk )
	OR	fbRTBremsentestQuit_Wippe_030301.Q;

fbAchse_Wippe_030301.IsQuittStoerung:=
	strGLmHand.bI_QuittStoerung
	OR	fbEins[iEins_Id].OsImpulsSteuerspannungEin;

fbAchse_Wippe_030301.IsStoerungAntrieb:=
	NOT bIW303ServoBtb
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030301.IsTPlus:=
	astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
	AND	strGLmHand.bI_Senken;//AND	strGLmHand.bI_Heben;

fbAchse_Wippe_030301.IsTMinus:=
	astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
	AND	strGLmHand.bI_Heben;//AND	strGLmHand.bI_Senken;

fbAchse_Wippe_030301.IsTSchnell:=
	astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
	AND	strGLmHand.bQ_Schnell;

fbAchse_Wippe_030301.IsEsEndlageMinus:=
	NOT abGSignalstatuswordT1_Endschalter_Minus[AxId_Wippe_030301]
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030301.IsEsEndlagePlus:=
	NOT abGSignalstatuswordT1_Endschalter_Plus[AxId_Wippe_030301]
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030301.IsEsStopMinus:= FALSE;
fbAchse_Wippe_030301.IsEsStopPlus:= FALSE;

fbAchse_Wippe_030301.IsEilSchleichAchse:= FALSE;
fbAchse_Wippe_030301.IsGefrierStop:= gxGefrierstopAktiv;
fbAchse_Wippe_030301.IsIstwertSetzen:= FALSE;
fbAchse_Wippe_030301.IwWertIstwertSetzen:= 0;

fbAchse_Wippe_030301.IsSchleichenPlus:=
	P_ServiceAchsen.xSchleichen_Aktiv[AxId_Wippe_030301]
	AND	strGLmHand.bI_Vor;

fbAchse_Wippe_030301.IsSchleichenMinus:=
	P_ServiceAchsen.xSchleichen_Aktiv[AxId_Wippe_030301]
	AND	strGLmHand.bI_Zurueck;

fbAchse_Wippe_030301.IsServoInReferenz:=
	abGSignalstatuswordT1_Referenziert_ReferenzGeber[AxId_Wippe_030301]
	AND	abGSignalstatuswordT1_Referenziert_Geber[AxId_Wippe_030301]
	OR 	gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030301.IsSichereGeschwindigkeit:=
	abGSMOSteuersignal_SMM1[AxId_Wippe_030301]
	OR	abGSMOBetriebszustand_SMM1[AxId_Wippe_030301];

fbAchse_Wippe_030301.IsModuloAchse:= FALSE;
AxToNcEiS[AxId_Wippe_030301]:= TRUE;

fbAchse_Wippe_030301.IwParameter:= AchsHandlingOberflaeche.AchsDaten[AxId_Wippe_030301].AchsParameter;

IF	P_ServiceAchsen.xAktiv[AxId_Wippe_030301]
THEN
	IF	fbEins[iEins_Id].OsNotHaltIstOk
	THEN
		fbAchse_Wippe_030301.IsStartEichen:= P_ServiceAchsen.xStart_Eichen[AxId_Wippe_030301];
		fbAchse_Wippe_030301.IsStartAufPosition:= P_ServiceAchsen.xStart_AufPosition[AxId_Wippe_030301];
	ELSE
		fbAchse_Wippe_030301.IsStartEichen:= FALSE;
		fbAchse_Wippe_030301.IsStartAufPosition:= FALSE;
	END_IF;

	fbAchse_Wippe_030301.IsReset:= P_ServiceAchsen.xStopAktiv_Reset[AxId_Wippe_030301];
	fbAchse_Wippe_030301.IsFreigabe:= P_ServiceAchsen.xFreigabe_Aktiv[AxId_Wippe_030301];
	fbAchse_Wippe_030301.IwZielSollwert:= P_ServiceAchsen.rZielSollwert[AxId_Wippe_030301];
	fbAchse_Wippe_030301.IwSpeed:= P_ServiceAchsen.uiSpeed[AxId_Wippe_030301];
ELSE
	IF	fbEins[iEins_Id].OsAutomatikEin
		OR		fbPosi_Wippe_030301.OwJobStatus = iFaehrtAufSicherePos
			AND NOT  fbPosi_Wippe_030301.ISHAND
		OR	fbEins[iEins_Id].OsHandEin
			AND	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt
	THEN
		arGZielAchse[AxId_Wippe_030301]:= st_Achse_Wippe_030301.rZiel;
		arGSpeedAchse[AxId_Wippe_030301]:= st_Achse_Wippe_030301.rSpeed;
		abGStartAchse[AxId_Wippe_030301]:= st_Achse_Wippe_030301.xStartPosi;
		abGEichenAchse[AxId_Wippe_030301]:= st_Achse_Wippe_030301.xStartEichen;
		abGFreigabeAchse[AxId_Wippe_030301]:= st_Achse_Wippe_030301.xFreigabe;
	ELSE
		abGStartAchse[AxId_Wippe_030301]:= FALSE;
		abGEichenAchse[AxId_Wippe_030301]:= FALSE;
		abGFreigabeAchse[AxId_Wippe_030301]:= FALSE;
	END_IF;

	fbAchse_Wippe_030301.IsReset:=
		( astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
			OR	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt )
		AND 	strGLmHand.bI_Reset
		OR NOT fbEins[iEins_Id].OsAutomatikEin
			AND	GDat.TrE_Daten[TrEId_030301].iReset <> 0;

	fbAchse_Wippe_030301.IsFreigabe:=
		( abGFreigabeAchse[AxId_Wippe_030301]
			OR	fbEins[iEins_Id].OsHandEin )
		AND	fbEins[iEins_Id].OsNotHaltIstOk
		AND NOT fbAchse_Wippe_030301.OwOut.xAchseFehler
		AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
		AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
		AND	gxAlleTuerenGeschlossen_FreigabeAchseC[giSicher_C2_1];

	IF	fbEins[iEins_Id].OsAutomatikEin
		AND	arGSpeedAchse[AxId_Wippe_030301] > 0
	THEN
		fbAchse_Wippe_030301.IwSpeed:=
			LIMIT ( 0.1,arGSpeedAchse[AxId_Wippe_030301],100 );
	ELSE
		fbAchse_Wippe_030301.IwSpeed:= 100;
	END_IF;

	IF	fbAchse_Wippe_030301.IsSichereGeschwindigkeit
	THEN
		fbAchse_Wippe_030301.IwSpeed_HandSlow:= 50;
		fbAchse_Wippe_030301.IwSpeed_HandFast:= 100;
	ELSE
		fbAchse_Wippe_030301.IwSpeed_HandSlow:=
				LIMIT ( 0.1, USINT_TO_REAL(GKoAnWippe_030301.usSpeed_HandFahrenSlow), 100 );

		fbAchse_Wippe_030301.IwSpeed_HandFast:=
				LIMIT ( 0.1, USINT_TO_REAL(GKoAnWippe_030301.usSpeed_HandFahrenFast), 100 );
	END_IF;

	fbAchse_Wippe_030301.IwBeschleunigung:= st_Achse_Wippe_030301.rBeschleunigung;
	fbAchse_Wippe_030301.IwVerzoegerung:= st_Achse_Wippe_030301.rVerzoegerung;
	fbAchse_Wippe_030301.IwRuck:= st_Achse_Wippe_030301.rRuck;

	fbAchse_Wippe_030301.IsStartEichen:=
		abGEichenAchse[AxId_Wippe_030301]
		AND NOT gxTestbetriebOhneMaschineAktiv;

	fbAchse_Wippe_030301.IwZielSollwert:=
		arGZielAchse[AxId_Wippe_030301];

	fbAchse_Wippe_030301.IsStartAufPosition:=
		abGStartAchse[AxId_Wippe_030301]
		AND 	fbAchse_Wippe_030301.IsFreigabe
		AND	fbAchse_Wippe_030301.OwOut.xAchseGeeicht;

	fbAchse_Wippe_030301.IsNeueGeschwindigkeit:= st_Achse_Wippe_030301.xStartNeueGeschwindigkeit;

	fbAchse_Wippe_030301.IsSonderGeschwindigkeit:= st_Achse_Wippe_030301.xSonderGeschwindigkeit;
	fbAchse_Wippe_030301.IwSonderGeschwindigkeit:= LREAL_TO_REAL ( st_Achse_Wippe_030301.lrSonderGeschwindigkeit );

	fbAchse_Wippe_030301.IsStartNeuesZielWaehrendPosi:= st_Achse_Wippe_030301.xStartNeuesZielWaehrendPosi;
	fbAchse_Wippe_030301.IwNeuesZielWaehrendPosi:= st_Achse_Wippe_030301.rNeuesZielWaehrendPosi;

	(* wenn von Achse uebernommen = loeschen, da sonst kein Start nach NotHalt/Stop *)
	IF	fbAchse_Wippe_030301.xZielUmschiessen
	THEN
		st_Achse_Wippe_030301.xStartNeuesZielWaehrendPosi:= FALSE;
	END_IF;

	IF	fbAchse_Wippe_030301.xGeschwindigkeitUmschiessen
	THEN
		st_Achse_Wippe_030301.xStartNeueGeschwindigkeit:= FALSE;
	END_IF;
END_IF;

fbAchse_Wippe_030301();

IF	fbAchse_Wippe_030301.IsHand
	AND	fbAchse_Wippe_030301.IsReset
THEN
	abGAchseNeuEichen[AxId_Wippe_030301]:= FALSE;
END_IF;


(*------------------------------------------------------*)
(*  Handling: -> Jobverteiler                  		  *)
(*------------------------------------------------------*)

st_Achse_Wippe_030301.iID:= AxId_Wippe_030301;
st_Achse_Wippe_030301.xNichtEichen:= TRUE;
st_Achse_Wippe_030301.stVonAchse:= fbAchse_Wippe_030301.OwOut;
st_Achse_Wippe_030301.stVonAchse.xAchseGeeicht:=
	fbAchse_Wippe_030301.OwOut.xAchseGeeicht;

st_Achse_Wippe_030301.xBereit_FuerFahrjob:=
	fbAchse_Wippe_030301.OwOut.xAchseBereit
	AND NOT fbAchse_Wippe_030301.OwOut.xAchseFehler;



(*-----------------------------------------------------------------*)
(* Die globale Struktur für die Leuchtmelde Handtasten beschreiben *)
(*-----------------------------------------------------------------*)
IF	fbAchse_Wippe_030301.IsHand
	AND	astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
THEN
	IF NOT fbAchse_Wippe_030301.IsEsEndlagePlus
	THEN
		strGLmHand.bQ_Heben:= TRUE;
	END_IF;

	IF NOT fbAchse_Wippe_030301.IsEsEndlageMinus
	THEN
		strGLmHand.bQ_Senken:= TRUE;
	END_IF;

	IF		fbPosi_Wippe_030301.SKET <> 0
		AND		fbPosi_Wippe_030301.SKET <> 1
	THEN
		strGLmHand.bQ_Reset:= TRUE;
	END_IF;
END_IF;



				(*---------------------------------------------------*)
				(*---------------------------------------------------*)
				(*           Freigabe Hardwaren / Software           *)
				(*---------------------------------------------------*)
				(*---------------------------------------------------*)

IF ( fbAchse_Wippe_030301.IsEsEndlageMinus
		OR  	fbAchse_Wippe_030301.IsEsEndlagePlus )
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	abGEndlageAngefahren[AxId_Wippe_030301]:= TRUE;
END_IF;

IF	strGLmHand.bI_QuittStoerung
		AND NOT fbAchse_Wippe_030301.IsEsEndlageMinus
		AND NOT fbAchse_Wippe_030301.IsEsEndlagePlus
	OR NOT fbEins[iEins_Id].OsSteuerspannungIstEin
THEN
	abGEndlageFreifahren[AxId_Wippe_030301]:= FALSE;
	abGEndlageAngefahren[AxId_Wippe_030301]:= FALSE;
END_IF;

abGEndlageFreifahren[AxId_Wippe_030301]:=
	fbEins[iEins_Id].OsHandEin
	AND	abGEndlageAngefahren[AxId_Wippe_030301];

aTonGReglerfreigabe[AxId_Wippe_030301].IN:=
	( NOT abGEndlageAngefahren[AxId_Wippe_030301]
		OR	abGEndlageFreifahren[AxId_Wippe_030301] )
	AND	bFreigabeFahren_Wippe_030301
	AND   gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
      AND   gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
      AND   gxSicherheitsBereichQuittiertC[giSicher_C2_1]
      AND NOT bFreigabeTuerOeffnen_Wippe_030301
	AND NOT abGSignalstatuswordT1_FehlerZustand[AxId_Wippe_030301]
	AND NOT abGAchseDisable[AxId_Wippe_030301]
	AND NOT AxFrNcFehler[AxId_Wippe_030301]
	AND NOT fbAchse_Wippe_030301.OsMFehlerMcBausteine
	AND NOT GKoAnWippe_030301.xAchse_Inaktiv;

aTonGReglerfreigabe[AxId_Wippe_030301](PT:= T#500MS);

bQW303ServoEstop:=
	NOT abGSignalstatuswordT1_FehlerZustand[AxId_Wippe_030301]
	AND NOT AxFrNcFehler[AxId_Wippe_030301]
	OR 	abGSMOBetriebszustand_Applikation[AxId_Wippe_030301];

abGReglerfreigabe[AxId_Wippe_030301]:=
	aTonGReglerfreigabe[AxId_Wippe_030301].Q
	OR	aTofGReglerfreigabe_Aus[AxId_Wippe_030301].Q
		AND	AxFrNcFahrePlus[AxId_Wippe_030301]
		AND NOT abGEndlageAngefahren[AxId_Wippe_030301]
	OR	aTofGReglerfreigabe_Aus[AxId_Wippe_030301].Q
		AND	AxFrNcFahreMinus[AxId_Wippe_030301]
		AND NOT abGEndlageAngefahren[AxId_Wippe_030301];

(* Ausschaltverzoegerung Reglerfreigabe *)
aTofGReglerfreigabe_Aus[AxId_Wippe_030301].IN:=
	aTonGReglerfreigabe[AxId_Wippe_030301].IN
		AND  	aTonGReglerfreigabe[AxId_Wippe_030301].Q;
aTofGReglerfreigabe_Aus[AxId_Wippe_030301](PT:= GKoAnWippe_030301.tBisReglerfreigabeAus_BeiNotHalt);

aTonGVorschubfreigabe[AxId_Wippe_030301](PT:= T#500MS);

aTonGVorschubfreigabe[AxId_Wippe_030301].IN:=
	abGReglerfreigabe[AxId_Wippe_030301];

abGVorschubfreigabe[AxId_Wippe_030301]:= aTonGVorschubfreigabe[AxId_Wippe_030301].Q;

abGVorschubfreigabePlus[AxId_Wippe_030301]:=
	NOT fbAchse_Wippe_030301.IsEsEndlagePlus
		AND	bIW303BremseGeloest
	OR	gxTestbetriebOhneMaschineAktiv;

abGVorschubfreigabeMinus[AxId_Wippe_030301]:=
	NOT fbAchse_Wippe_030301.IsEsEndlageMinus
		AND	bIW303BremseGeloest
	OR	gxTestbetriebOhneMaschineAktiv;

(*---------------------------------------------------*)
(* Achse: Freigabe Software              		     *)
(*---------------------------------------------------*)

AxToNcRfg[AxId_Wippe_030301]:=
	abGReglerfreigabe[AxId_Wippe_030301]
		AND NOT abGAchseDisable[AxId_Wippe_030301];

AxToNcVfp[AxId_Wippe_030301]:=
	abGVorschubfreigabe[AxId_Wippe_030301]
		AND	abGVorschubfreigabePlus[AxId_Wippe_030301]
		AND NOT bFehlerFahrenPlus_Wippe_030301
		AND	aTonGReglerfreigabe[AxId_Wippe_030301].Q
		AND NOT abGAchseDisable[AxId_Wippe_030301];

AxToNcVfm[AxId_Wippe_030301]:=
	abGVorschubfreigabe[AxId_Wippe_030301]
		AND	abGVorschubfreigabeMinus[AxId_Wippe_030301]
		AND NOT bFehlerFahrenMinus_Wippe_030301
		AND	aTonGReglerfreigabe[AxId_Wippe_030301].Q
		AND NOT abGAchseDisable[AxId_Wippe_030301];

(*----------------------------------------------*)
(*----------------------------------------------*)
(* Achse: Reset SERCOS-Antrieb       		*)
(*----------------------------------------------*)
(*----------------------------------------------*)
fbSERCOS_ResetAntrieb_Wippe_030301 (
	NetID				:= P_Ueberwachung_EtherCat.sNetId,
	Name				:= '=W303.EC1+S1-TA1S',
	DevID				:= uiIDevID,
	AchsID			:= AxId_Wippe_030301,
	IsFehlerQuitt		:= strGLmHand.bI_QuittStoerung,
	IsTestbetrieb		:= gxTestbetriebOhneMaschineAktiv,
	IsDoReset			:= fbAchse_Wippe_030301.OsDoReset_VorModul,
	IsNotHaltOK			:= gxSicherheitsBereichQuittiertC[giSicher_NotHalt],
	OsResetOK			=> ,
	OsFehlerAdresseLesen	=> ,
	OsNotHaltAktivieren	=> ,
	uiQ_EtherCATAdresse	=> );

uiGPortNr_SERCOS_Antrieb[AxId_Wippe_030301]	:= fbSERCOS_ResetAntrieb_Wippe_030301.uiQ_EtherCATAdresse;
fbAchse_Wippe_030301.IsResetOK_VorModul		:= fbSERCOS_ResetAntrieb_Wippe_030301.OsResetOK;


(*------------------------------------------*)
(*------------------------------------------*)
(* Achse: Absolutwertsetzen im Steller      *)
(*------------------------------------------*)
(*------------------------------------------*)
fbSERCOS_AbsolutwertSetzen_Wippe_030301 (
	NetID				:= P_Ueberwachung_EtherCat.sNetId,
	PortNr			:= uiGPortNr_SERCOS_Antrieb[AxId_Wippe_030301],
	AchsID			:= AxId_Wippe_030301,
	IwIstwert			:= AxFrNc_fPosIst[AxId_Wippe_030301],
	IsSetAbsolutwert		:=
					NOT fbEins[iEins_Id].OsNotHaltIstOK
					AND	astrGButtonManTransporte[ID_Wippe_030301_IstwertSetzen].bSchalt,
	IsReglerfreigabe		:= AxToNcRfg[AxId_Wippe_030301],
	IsAufEichposition		:= AxToNcEiS[AxId_Wippe_030301],
	IsTestbetrieb		:= gxTestbetriebOhneMaschineAktiv,
	IsFehlerQuitt		:= strGLmHand.bI_QuittStoerung,
	ProtoNr			:= P_BahnJob,
	iStatus			=> ,
	OsMReglerfreigabeAktiv	=> ,
	OsMKeineEichPosition	=> ,
	OsAbsolutwertGesetzt	=> ,
	OsFertig			=> );


(*----------------------------------------*)
(*----------------------------------------*)
(* Achse: Drehmoment begrenzen im Steller *)
(*----------------------------------------*)
(*----------------------------------------*)

aiQAntriebGrenzDrehmoment[AxId_Wippe_030301]:=
	LIMIT(1, UINT_TO_INT ( GKoAnWippe_030301.uMaxDrehmoment ) * 10, 4000);

(*------------------------------------------*)
(*------------------------------------------*)
(*  Hub: Bremsentest              		  *)
(*------------------------------------------*)
(*------------------------------------------*)
fbSERCOS_Bremsentest_Wippe_030301(
	sI_NetIDMaster		:= P_Ueberwachung_EtherCat.sNetId,
	uiI_EtherCATAdresse	:= uiGPortNr_SERCOS_Antrieb[AxId_Wippe_030301],
	uiI_AxId			:= AxId_Wippe_030301,
	bI_BausteinAktiv		:= TRUE,
	bI_NotHaltOK		:= fbEins[iEins_Id].OsNotHaltIstOk,
	bI_FreigabeStartTest:=
					bFreigabeStartBremsentestAblauf_Wippe_030301
					AND	bSicherePosAngefahren_Wippe_030301
					AND	bFreigabeFahren_Wippe_030301
					AND NOT gxAnTuerAngemeldetC[giSicher_C2_1]
					AND NOT gxEineTuerOffenC[giSicher_C2_1],
	bI_Reset			:=
					( astrGButtonManTransporte[ID_Wippe_030301_Bremsentest].bSchalt
						OR	astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
						OR	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt )
					AND	strGLmHand.bI_Reset
					AND	fbEins[iEins_Id].OsHandEin
					OR NOT fbEins[iEins_Id].OsAutomatikEin
						AND	GDat.TrE_Daten[TrEId_030301].iReset <> 0,
	bI_Reglerfreigabe		:= AxToNcRfg[AxId_Wippe_030301],
	bI_StartTestManuell	:= bBremsentestStarten_Wippe_030301,
	bI_Testbetrieb		:= gxTestbetriebOhneMaschineAktiv,
	bQ_Busy			=> ,
	bQ_Error			=> ,
	bQ_TestMussErfolgen	=> ,
	bQ_VorwarnungBremsentest=> ,
	bQ_StopBremsentest	=> ,
	bQ_BremsenTestOK		=> ,
	uiQ_ErrID			=> );

GDat.TrE_Daten[TrEId_030301].iBelegtStatus:= F_SetClearBelegtStatus( TrEId_030301, iBremsentestStehtAn, fbSERCOS_Bremsentest_Wippe_030301.bQ_TestMussErfolgen );

fbFTBremsentestTueranmeldung_Wippe_030301(
	CLK:= bSicherePosAngefahren_Wippe_030301
		AND	bFreigabeStartBremsentestAblauf_Wippe_030301
		AND ( gxAnTuerAngemeldetC[giSicher_C2_1]
			OR	gxEineTuerOffenC[giSicher_C2_1] ),
	Q=> );

IF	( astrGButtonManTransporte[ID_Wippe_030301_Bremsentest].bSchalt
		OR	astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
		OR	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt )
	AND	fbEins[iEins_Id].OsHandEin
	AND	fbSERCOS_Bremsentest_Wippe_030301.bQ_Error
THEN
	strGLmHand.bQ_Reset:= TRUE;
END_IF;

IF	fbSERCOS_Bremsentest_Wippe_030301.bQ_Busy
THEN
	bBremsentestAusgefuehrt_Wippe_030301:= TRUE;
	bBremsentestStarten_Wippe_030301:= FALSE;

ELSIF fbFTBremsentestTueranmeldung_Wippe_030301.Q
	AND	fbSERCOS_Bremsentest_Wippe_030301.enmFB_STATUS = BEARBEITEN
	AND NOT bBremsentestAusgefuehrt_Wippe_030301
	AND NOT bBremsentestStarten_Wippe_030301
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	bBremsentestStarten_Wippe_030301:= TRUE;

ELSIF	NOT bSicherePosAngefahren_Wippe_030301
	AND	bBremsentestAusgefuehrt_Wippe_030301
THEN
	bBremsentestAusgefuehrt_Wippe_030301:= FALSE;

ELSIF	fbEins[iEins_Id].OsHandEin
	AND	astrGButtonManTransporte[ID_Wippe_030301_Bremsentest].bSchalt
	AND	fbSERCOS_Bremsentest_Wippe_030301.enmFB_STATUS = BEARBEITEN
	AND NOT bBremsentestAusgefuehrt_Wippe_030301
	AND NOT bBremsentestStarten_Wippe_030301
	AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_Busy
	AND NOT fbSERCOS_Bremsentest_Wippe_030301.bQ_Error
	AND NOT fbSERCOS_Bremsentest_Wippe_030301.bTestManuell
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	strGLmHand.bQ_Vor:= TRUE;

	IF	strGLmHand.bI_Vor
	THEN
		bBremsentestStarten_Wippe_030301:= TRUE;
	END_IF;
END_IF;


]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_11_AbsAchse_Posi_Wippe_030301" Id="{e314877c-2bf8-4b29-96cf-4a3fb462cfc4}">
      <Implementation>
        <ST><![CDATA[(*
-----------------------------------------------
-----------------------------------------------
 Inhalt:                            

      - Posi.Modul
      - Ueberwachung Heben / Senken
      - Job Hub heben / senken 
-----------------------------------------------
-----------------------------------------------
*)

(*------------------------------------------------*)
(*------------------------------------------------*)
(* Achse: Jobhandling Positionierung		  *)
(*------------------------------------------------*)
(*------------------------------------------------*)

fbPosi_Wippe_030301.IWACHSID:= AxId_Wippe_030301;
fbPosi_Wippe_030301.IWPARA:= GKoAnWippe_030301;

fbPosi_Wippe_030301.ISHAND:=
	fbEins[iEins_Id].OsHandEin
		AND NOT astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	strGLmHand.bI_Reset
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND GDat.TrE_Daten[TrEId_030301].iReset <> 0;

fbPosi_Wippe_030301.ISAUTOMATIK:=
	fbEins[iEins_Id].OsAutomatikEin
	OR	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt;

fbPosi_Wippe_030301.ISRESET:=
	fbEins[iEins_Id].OsHandEin
		AND ( astrGButtonManTransporte[ID_Wippe_030301_Tippen].bSchalt
			OR	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt )
		AND 	strGLmHand.bI_Reset
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	GDat.TrE_Daten[TrEId_030301].iReset <> 0;

fbPosi_Wippe_030301.ISQUITTSTOERUNG:=
	strGLmHand.bI_QuittStoerung
	OR 	fbEins[iEins_Id].OsImpulsSteuerspannungEin;

fbPosi_Wippe_030301.ISZYKLUSBEENDEN:=
	fbEins[iEins_Id].OsZyklusBeenden;

fbPosi_Wippe_030301.ISSTOERUNGANTRIEB:=
	fbAchse_Wippe_030301.OsMStoerungAntrieb
	OR	fbAchse_Wippe_030301.OsMFehlerAchsmodul;

fbPosi_Wippe_030301.ISFREIGABE_FAHRTINGRUND:= FALSE;
fbPosi_Wippe_030301.ISMITSTARTNEUESZIELWAEHRENDPOSI:= FALSE;
fbPosi_Wippe_030301.ISISTWERTSETZENMANUELL:= FALSE;
fbPosi_Wippe_030301.ISSPEED2:= FALSE;
fbPosi_Wippe_030301.ISKEINEGRUNDPOSITION:= TRUE;

fbPosi_Wippe_030301.ISSICHEREPOSANFAHREN:=
	(( gxAnTuerAngemeldetC[giSicher_C2_1]
		OR	gxEineTuerOffenC[giSicher_C2_1] )
		AND NOT GKoAnWippe_030301.xSicherheitstuerenOeffnen_WennAchseSteht
		OR	fbSERCOS_Bremsentest_Wippe_030301.bQ_TestMussErfolgen
			AND	bFreigabeStartBremsentestAblauf_Wippe_030301 )
	AND	fbEins[iEins_Id].OsNotHaltIstOK;

fbPosi_Wippe_030301( IO_Achse:= st_Achse_Wippe_030301 );

IF		fbPosi_Wippe_030301.IWDOJOB > eJob_KeinJob
	AND		fbPosi_Wippe_030301.OWJOBAKTIV =  fbPosi_Wippe_030301.IWDOJOB
THEN
		fbPosi_Wippe_030301.IWDOJOB:= eJob_KeinJob;
END_IF;

(*
===============================================
   Ueberwachung Heben / Senken

   Heben  = Spaltkontrolle muss frei sein
   Senken = Spaltkontrolle muss frei sein
===============================================
*)

fbEntprellenSpaltlichschranken_Wippe_030301(
	IsSensor:= bIW303Transp1SichSpur1
			AND bIW303Transp1SichSpur2
			AND bIW304Transp1AnfSpur1
			AND bIW304Transp1AnfSpur2
			AND bIW314Transp1AnfSpur1
			AND bIW314Transp1AnfSpur2
			AND bIW324Transp1AnfSpur1
			AND bIW324Transp1AnfSpur2,			(* alle Spaltlichtschranken einfügen, die OK für die Bewegung sein müssen *)
	tEntprell_Belegt:= GkoAll.tEntprellSchalter,
	tEntprell_Frei:= GkoAll.tEntprellSchalter,
	OsSensor=> bSpaltlichschrankenOK_Wippe_030301 );

IF	gxTestbetriebOhneMaschineAktiv
THEN
	bSpaltlichschrankenOK_Wippe_030301:= TRUE;
END_IF;

IF NOT bSpaltlichschrankenOK_Wippe_030301
	AND (  fbPosi_Wippe_030301.OwJobStatus = iAutomatikAktivJob
		OR		fbPosi_Wippe_030301.OwJobStatus = iFahrtGrund )
	AND		fbPosi_Wippe_030301.ISAUTOMATIK
	AND NOT gxTestbetriebOhneMaschineAktiv
	AND NOT GKoAnWippe_030301.xAchse_Inaktiv
THEN
	IF	AxFrNcFahrePlus[AxId_Wippe_030301]
	THEN
		bFehlerFahrenPlus_Wippe_030301:= TRUE;
	END_IF;

	IF	AxFrNcFahreMinus[AxId_Wippe_030301]
	THEN
		bFehlerFahrenMinus_Wippe_030301:= TRUE;
	END_IF;

ELSIF NOT bSpaltlichschrankenOK_Wippe_030301
	AND	iWippe_030301_IstAufPos = 0
	AND (  fbPosi_Wippe_030301.OwJobStatus = iAutomatikBereitJob
		OR		fbPosi_Wippe_030301.OwJobStatus = iHand )
	AND NOT gxTestbetriebOhneMaschineAktiv
	AND NOT GKoAnWippe_030301.xAchse_Inaktiv
THEN
	bFehlerFahrenPlus_Wippe_030301:= TRUE;
	bFehlerFahrenMinus_Wippe_030301:= TRUE;

ELSIF	(  fbPosi_Wippe_030301.ISQUITTSTOERUNG
		OR NOT  fbPosi_Wippe_030301.ISAUTOMATIK )
	AND 	bSpaltlichschrankenOK_Wippe_030301
	OR 	GKoAnWippe_030301.xAchse_Inaktiv
THEN
	bFehlerFahrenPlus_Wippe_030301:= FALSE;
	bFehlerFahrenMinus_Wippe_030301:= FALSE;
END_IF;

bFreigabePositionieren_Wippe_030301:=						(* Wann darf positioniert werden? -> projektabhängig anpassen *)
  	strGHdshk_Bahn030301.str_DoJob_AufBahn = eRolljobKeinJob
	AND ( strGHdshk_Bahn030301.str_JobAktiv_AufBahn = eRolljobKeinJob
		OR strGHdshk_Bahn030301.str_JobAktiv_AufBahn = eRolljobAufBahnVorlauf
		OR strGHdshk_Bahn030301.str_JobAktiv_AufBahn = eRolljobAufBahnPosiVorlauf )
	AND	strGHdshk_Bahn030301.str_DoJob_VonBahn = eRolljobKeinJob
	AND ( strGHdshk_Bahn030301.str_JobAktiv_VonBahn = eRolljobKeinJob
		OR	strGHdshk_Bahn030301.str_JobAktiv_VonBahn = eRolljobAnsBahnEndeVorlauf )
	AND NOT ( strGHdshk_Bahn030301.str_BahnStatus = iStoerung )
	AND bSpaltlichschrankenOK_Wippe_030301;

IF NOT bFreigabePositionieren_Wippe_030301
	AND NOT bSpaltlichschrankenOK_Wippe_030301
	AND	strGHdshk_Bahn030301.b_BahnSteht
	AND	iWippe_030301_IstAufPos <> iWippe_030301_SollAufPos
	AND	fbPosi_Wippe_030301.IWDOJOB = eJob_KeinJob
	AND	fbPosi_Wippe_030301.OWJOBAKTIV = eJob_KeinJob
	AND	fbPosi_Wippe_030301.OwJobStatus = iAutomatikBereitJob
	AND	st_Achse_Wippe_030301.xBereit_FuerFahrjob
	AND NOT GKoAnWippe_030301.xAchse_Inaktiv
THEN
	bFehlerFahrenFreigabe_Wippe_030301:= TRUE;

ELSIF	(  fbPosi_Wippe_030301.ISQUITTSTOERUNG
		OR NOT  fbPosi_Wippe_030301.ISAUTOMATIK )
	AND 	bSpaltlichschrankenOK_Wippe_030301
	OR 	GKoAnWippe_030301.xAchse_Inaktiv
THEN
	bFehlerFahrenFreigabe_Wippe_030301:= FALSE;
END_IF;

IF		fbPosi_Wippe_030301.ISRESET
	AND		fbPosi_Wippe_030301.ISHAND
THEN
	iWippe_030301_SollAufPos:= 0;
END_IF;

(*
-----------------------------------------------------
 Achse: Job Hub heben / senken 
-----------------------------------------------------
*)
iWippe_030301_IstAufPos:= 0;

FOR i:= 1 TO giMaxAnzahlStoppositionen
DO
	IF ABS( GKoAnWippe_030301.arStoppPositionen[i] - AxFrNc_fPosIst[AxId_Wippe_030301] ) <= GKoAnWippe_030301.rToleranz_StoppPositionen
		AND	GKoAnWippe_030301.arStoppPositionen[i] <> 0
	THEN
		iWippe_030301_IstAufPos:= i;
		EXIT;
	END_IF;
END_FOR;

IF	bFreigabePositionieren_Wippe_030301
	AND	bSpaltlichschrankenOK_Wippe_030301
	AND		fbPosi_Wippe_030301.IWDOJOB = eJob_KeinJob
	AND		fbPosi_Wippe_030301.OWJOBAKTIV = eJob_KeinJob
	AND		fbPosi_Wippe_030301.OwJobStatus = iAutomatikBereitJob
	AND	st_Achse_Wippe_030301.xBereit_FuerFahrjob
	AND NOT GKoAnWippe_030301.xAchse_Inaktiv
THEN
	IF	fbEins[iEins_Id].OsAutomatikEin
		AND	iWippe_030301_SollAufPos >= 1
		AND	iWippe_030301_SollAufPos <= giMaxAnzahlStoppositionen
		AND	iWippe_030301_IstAufPos <> iWippe_030301_SollAufPos
		AND	bFreigabeFuerJob_C2_1
	THEN
		IF 	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_SollAufPos] <> 0
		THEN
						fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[iWippe_030301_SollAufPos];
						fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;

			F_ProtoText4( P_BahnJob,
						'Achse Wippe 06.02.01 gestartet. ',
						CONCAT( ' / Ziel: ', F_RealToString_0Nach(  fbPosi_Wippe_030301.IWZIEL )),
						'',
						'' );
		END_IF;

	ELSIF	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Wippe_030301_Positionieren].bSchalt
	THEN
		IF NOT bFehlerFahrenPlus_Wippe_030301					(* Spaltüberwachungen *)
			AND NOT bFehlerFahrenMinus_Wippe_030301
		THEN
			IF	iWippe_030301_IstAufPos = 0
			THEN
				strGLmHand.bQ_Senken:= TRUE;
				strGLmHand.bQ_Heben:= TRUE;

				IF	strGLmHand.bI_Senken
				THEN
										fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[1];
										fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;
					iWippe_030301_SollAufPos:= 1;

				ELSIF	strGLmHand.bI_Heben
				THEN
					FOR	i:= giMaxAnzahlStoppositionen TO 1 BY -1
					DO
						IF	GKoAnWippe_030301.arStoppPositionen[i] <> 0
						THEN
														fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[i];
														fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;
							iWippe_030301_SollAufPos:= i;
							EXIT;
						END_IF;
					END_FOR;
				END_IF;
			ELSE
				IF	iWippe_030301_IstAufPos = 1
					AND	giMaxAnzahlStoppositionen > 1
				THEN
					IF	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos+1] <> 0
					THEN
						strGLmHand.bQ_Heben:= TRUE;

						IF	strGLmHand.bI_Heben
						THEN
														fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos+1];
														fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;
							iWippe_030301_SollAufPos:= iWippe_030301_IstAufPos+1;
						END_IF;
					END_IF;

				ELSIF iWippe_030301_IstAufPos = giMaxAnzahlStoppositionen
					AND	giMaxAnzahlStoppositionen > 1
				THEN
					IF	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos-1] <> 0
					THEN
						strGLmHand.bQ_Senken:= TRUE;
	
						IF	strGLmHand.bI_Senken
						THEN
														fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos-1];
														fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;
							iWippe_030301_SollAufPos:= iWippe_030301_IstAufPos-1;
						END_IF;
					END_IF;

				ELSIF iWippe_030301_IstAufPos > 1
					AND	iWippe_030301_IstAufPos < giMaxAnzahlStoppositionen
				THEN
					IF	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos-1] <> 0
					THEN
						strGLmHand.bQ_Senken:= TRUE;
					END_IF;

					IF	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos+1] <> 0
					THEN
						strGLmHand.bQ_Heben:= TRUE;
					END_IF;
	
					IF	strGLmHand.bI_Senken
						AND	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos-1] <> 0
					THEN
												fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos-1];
												fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;
						iWippe_030301_SollAufPos:= iWippe_030301_IstAufPos-1;

					ELSIF	strGLmHand.bI_Heben
						AND	GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos+1] <> 0
					THEN
												fbPosi_Wippe_030301.IWZIEL:= GKoAnWippe_030301.arStoppPositionen[iWippe_030301_IstAufPos+1];
												fbPosi_Wippe_030301.IWDOJOB:= eJob_Positionieren;
						iWippe_030301_SollAufPos:= iWippe_030301_IstAufPos+1;
					END_IF;
				END_IF;
			END_IF;
		END_IF;
	END_IF;
END_IF;

bFreigabeJob_Wippe_030301:=
		fbPosi_Wippe_030301.IWDOJOB = eJob_KeinJob
	AND		fbPosi_Wippe_030301.OWJOBAKTIV = eJob_KeinJob
	AND		fbPosi_Wippe_030301.OwJobStatus = iAutomatikBereitJob
	AND	iWippe_030301_IstAufPos = iWippe_030301_SollAufPos
	OR 	GKoAnWippe_030301.xAchse_Inaktiv;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_12_AbsAchse_Wippe_030601" Id="{53c27a87-0bbe-4421-ac06-31f6069540f0}">
      <Implementation>
        <ST><![CDATA[(*
------------------------------------------------------
------------------------------------------------------
   Meldung: Zusatzbremse löst nicht
------------------------------------------------------
------------------------------------------------------
*)

TonBisMeldungBremse_Wippe_030601.IN:=
	( NOT bIW306BremseGeloest
		AND	abGReglerfreigabe[AxId_Wippe_030601] )
	AND NOT gxTestbetriebOhneMaschineAktiv;

TonBisMeldungBremse_Wippe_030601( PT:= T#3S );

(*
------------------------------------------------------
------------------------------------------------------
   Achsen nach Zeit ausschalten, wenn kein Job
------------------------------------------------------
------------------------------------------------------
*)
bEnergiesparen_Aktivieren_Wippe_030601:=
	GKoAnWippe_030601.xAchsenNachZeitAusschalten
	AND	GKoAnWippe_030601.tAchsenNachZeitAusschalten > T#0S
	AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossenUndVerriegeltC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossen_FreigabeAchseC[giSicher_C2_1]
	AND NOT gxAnTuerAngemeldetC[giSicher_C2_1]
	AND NOT gxEineTuerOffenC[giSicher_C2_1]
	AND	fbPosi_Wippe_030601.ISAUTOMATIK
	AND	fbPosi_Wippe_030601.OSGRUNDSTELLUNGACHSE
	AND	fbPosi_Wippe_030601.IWDOJOB = eJob_KeinJob
	AND	fbPosi_Wippe_030601.OWJOBAKTIV = eJob_KeinJob
	AND	fbPosi_Wippe_030601.OwJobStatus = iAutomatikBereitJob
	AND	iWippe_030601_IstAufPos = iWippe_030601_SollAufPos
	AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_TestMussErfolgen
	AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_Busy;

TonBisAchsenAus_KeinJob_Wippe_030601.IN:=
	bEnergiesparen_Aktivieren_Wippe_030601;

TonBisAchsenAus_KeinJob_Wippe_030601( PT:= GKoAnWippe_030601.tAchsenNachZeitAusschalten );

TonBisAchsenAus_Disable_Wippe_030601.IN:=
	TonBisAchsenAus_KeinJob_Wippe_030601.Q;

TonBisAchsenAus_Disable_Wippe_030601( PT:= T#5S );

abGAchseDisable[AxId_Wippe_030601]:=
	TonBisAchsenAus_Disable_Wippe_030601.Q
	OR	GKoAnWippe_030601.xAchse_Inaktiv;


(*
------------------------------------------------------
------------------------------------------------------
   Bremse Achse prüfen, ob die Achse gerutscht ist
   wenn Reglerfreigabe aus und wieder an. 
------------------------------------------------------
------------------------------------------------------
*)
(*
---------------------------------------------------
   Istwert beim ausschalten speichern
---------------------------------------------------
*)

IF NOT AxToNcRfg[AxId_Wippe_030601]
	AND NOT AxFrNcFehler[AxId_Wippe_030601]
	AND	AxFrNcSteht[AxId_Wippe_030601]
	AND	rIstwert_AchseAus_Wippe_030601=0
THEN
	rIstwert_AchseAus_Wippe_030601:= AxFrNc_fPosIst[AxId_Wippe_030601];
	rIstwert_AchseEin_Wippe_030601:= 0;
END_IF;

(*
---------------------------------------------------
   Istwert beim einschalten speichern
---------------------------------------------------
*)
IF	AxToNcRfg[AxId_Wippe_030601]
	AND	rIstwert_AchseAus_Wippe_030601 <> 0
THEN
	rIstwert_AchseEin_Wippe_030601:= AxFrNc_fPosIst[AxId_Wippe_030601];
END_IF;

(*
---------------------------------------------------
   Prüfen, ob die Achse gerutscht ist
---------------------------------------------------
*)
IF	rIstwert_AchseAus_Wippe_030601 <> 0
	AND	rIstwert_AchseEin_Wippe_030601 <> 0
THEN
	IF ABS( rIstwert_AchseAus_Wippe_030601 - rIstwert_AchseEin_Wippe_030601 ) > GKoAnWippe_030601.rToleranz_Bremskontrolle
		AND	GKoAnWippe_030601.xMitKontrolleBremse
	THEN
		bBremsePruefen_Wippe_030601:= TRUE;
	ELSE
		rIstwert_AchseAus_Wippe_030601:= 0;
		rIstwert_AchseEin_Wippe_030601:= 0;
	END_IF;
END_IF;

IF	( strGLmHand.bI_QuittStoerung
		AND	bBremsePruefen_Wippe_030601 )
	OR NOT GKoAnWippe_030601.xMitKontrolleBremse
THEN
	bProto_BremsePruefen_Wippe_030601:= FALSE;
	bBremsePruefen_Wippe_030601:= FALSE;
	rIstwert_AchseAus_Wippe_030601:= 0;
	rIstwert_AchseEin_Wippe_030601:= 0;
END_IF;

(*
-----------------
  Fehler-Box
-----------------
*)

IF	bBremsePruefen_Wippe_030601
	AND NOT bProto_BremsePruefen_Wippe_030601	(* damit nur 1 mal gemeldet wird *)
THEN
	AusgabeBox_Bremskontrolle_Wippe_030601.Text1:= CONCAT('!!! Check brake axis !!! - ' , fbSERCOS_ResetAntrieb_Wippe_030601.Name );
	AusgabeBox_Bremskontrolle_Wippe_030601.Text2:= '$N';
	AusgabeBox_Bremskontrolle_Wippe_030601.Text3:= '!!!Difference of the values too high!!!';
	AusgabeBox_Bremskontrolle_Wippe_030601.Text4:= CONCAT( '$N Value closing brake: ', F_RealToString_0Nach( rIstwert_AchseAus_Wippe_030601 ));
	AusgabeBox_Bremskontrolle_Wippe_030601.Text5:= CONCAT( '$N Value opening brake: ', F_RealToString_0Nach( rIstwert_AchseEin_Wippe_030601 ));
	AusgabeBox_Bremskontrolle_Wippe_030601.Text6:= CONCAT( '$N Tolerance brake: ', F_RealToString_0Nach( GKoAnWippe_030601.rToleranz_Bremskontrolle ));

	AusgabeBox_Bremskontrolle_Wippe_030601.BoxArt:= 2;	(* Warnung *)

	IF	AusgabeBox_Bremskontrolle_Wippe_030601.Wert=0
		AND NOT bProto_BremsePruefen_Wippe_030601
	THEN
		F_ProtoText4 ( P_All,
					CONCAT( '!!! Bremse Achse prüfen !!! - ', fbSERCOS_ResetAntrieb_Wippe_030601.Name ),
					CONCAT( ' / Achswert Bremse Schließen: ', F_RealToString_0Nach( rIstwert_AchseAus_Wippe_030601 )),
					CONCAT( ' / Achswert Bremse Öffnen: ', F_RealToString_0Nach( rIstwert_AchseEin_Wippe_030601 )),
					CONCAT( ' / Toleranz Bremse: ', F_RealToString_0Nach( GKoAnWippe_030601.rToleranz_Bremskontrolle )));

		bProto_BremsePruefen_Wippe_030601:= TRUE;
	END_IF;

	AusgabeBox_Bremskontrolle_Wippe_030601( Wert:= 1 );
ELSE
	AusgabeBox_Bremskontrolle_Wippe_030601( Wert:= 0 );
END_IF;



				(*---------------------------------------------------*)
				(*---------------------------------------------------*)
				(*       Zuordnungen: Achsmodul	          	     *)
				(*---------------------------------------------------*)
				(*---------------------------------------------------*)

bFreigabeFahren_Wippe_030601:=						(* vorbereitet ist Einzelachssteller, wenn mit ER-Modul, dann alle Signale vom ER-Modul einfügen *)
	( bIW306ServoBtb
	OR	gxTestbetriebOhneMaschineAktiv
		AND NOT gxTestbetrieb_NotHalt )
	AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
	AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
	AND	gxSicherheitsBereichQuittiertC[giSicher_C2_1]
	AND	fbEins[iEins_Id].OsNotHaltIstOK
	AND NOT gxTestEinfahrenKante;

bFreigabeStartBremsentestAblauf_Wippe_030601:=
	fbEins[iEins_Id].OsAutomatikEin
	AND	fbEins[iEins_Id].OsAutomatikStart
	AND	fbPosi_Wippe_030601.OSGRUNDSTELLUNGACHSE;

(*---------------------------------------------------*)
(* Freigabe Tueren Oeffnen		                 *)
(*---------------------------------------------------*)

bFreigabeTuer_Achsen_Wippe_030601:=
	fbAchse_Wippe_030601.OwOut.xAchseBereit
		OR	fbAchse_Wippe_030601.OwOut.xAchseEnabled
		OR	fbAchse_Wippe_030601.OwOut.xAchseDisabled
		OR	fbAchse_Wippe_030601.OwOut.xAchseFehler;

bFreigabeTuer_Jobs_Wippe_030601:=
		fbPosi_Wippe_030601.ISSICHEREPOSANFAHREN
		AND		fbPosi_Wippe_030601.OSSICHEREPOSANGEFAHREN
		AND	fbAchse_Wippe_030601.xAchseSteht;

bSicherePosAngefahren_Wippe_030601:=
	bFreigabeTuer_Jobs_Wippe_030601
	AND	bFreigabeTuer_Achsen_Wippe_030601;

TonBisFreigabeTuerOeffnen_Wippe_030601(
	IN:= ( bSicherePosAngefahren_Wippe_030601
			OR	GKoAnWippe_030601.xSicherheitstuerenOeffnen_WennAchseSteht
				AND	fbAchse_Wippe_030601.xAchseSteht
			OR ( NOT fbEins[iEins_Id].OsNotHaltIstOK
					OR	GKoAnWippe_030601.xAchse_Inaktiv )
				AND	fbAchse_Wippe_030601.xAchseSteht )
		AND ( gxAnTuerAngemeldetC[giSicher_C2_1]
			OR	gxEineTuerOffenC[giSicher_C2_1] )
		AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_Busy
		AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_StopBremsentest,			(* Steller gibt die Tür eh nicht frei, Test muss erst erfolgen *)
	PT:= t#1s,
	Q=> bFreigabeTuerOeffnen_Wippe_030601,
	ET=> );

strIOSafetyModulW306KF42.bQSwitchMode:=
strIOSafetyModulW303KF42.bQSwitchMode:=			(* ein Modul fürn beide *)
//bQW306BetriebsartUmsch:= 											(* Betriebsartenschalter, TRUE = Normalbetrieb *)
	NOT bFreigabeTuerOeffnen_Wippe_030601								(* sichere Pos angefordert und angefahren *)
	AND NOT Aufruf_Wartungstueren.bFreigabeTuerOeffnenC[giSicher_C2_1]				(* Tür wird nicht freigegeben *)
	OR NOT gxAnTuerAngemeldetC[giSicher_C2_1]								(* Keine Tür offen oder Anmeldung aktiv *)
		AND NOT gxEineTuerOffenC[giSicher_C2_1];

(*------------------------------------------------------*)
(* Quittierung fehlender Bremsentest nach Neustart      *)
(*------------------------------------------------------*)

fbRTBremsentestQuit_Wippe_030601(
	CLK:= gxSicherheitsBereichQuittiertC[giSicher_C2_1]
		AND	fbSERCOS_Bremsentest_Wippe_030601.bQ_TestMussErfolgen
		AND	fbSERCOS_Bremsentest_Wippe_030601.bQ_StopBremsentest
		AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_BremsentestNachStartOK
		AND	fbSERCOS_Bremsentest_Wippe_030601.fbGetSercosError.udiSercosErrID = 3123,		(* Fehler in Bin: fehlender Bremsentest *)
	Q=> );

(*------------------------------------------------------*)
(*  Achse	                                            *)
(*------------------------------------------------------*)

fbAchse_Wippe_030601.AxId:= AxId_Wippe_030601;
fbAchse_Wippe_030601.IwResetMode:= 1;

fbAchse_Wippe_030601.IsHand:=
	fbEins[iEins_Id].OsHandEin
		AND NOT P_ServiceAchsen.xAktiv[AxId_Wippe_030601]
	OR	P_ServiceAchsen.xAktiv[AxId_Wippe_030601]
		AND	P_ServiceAchsen.xStopAktiv_Reset[AxId_Wippe_030601]
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	GDat.TrE_Daten[TrEId_030601].iReset <> 0;

fbAchse_Wippe_030601.IsAutomatik:=
	fbEins[iEins_Id].OsAutomatikEin
	OR		fbPosi_Wippe_030601.OwJobStatus = iFaehrtAufSicherePos
		AND NOT  fbPosi_Wippe_030601.ISHAND
	OR	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt
	OR	P_ServiceAchsen.xAktiv[AxId_Wippe_030601];

fbAchse_Wippe_030601.IsResetNachNotHalt:=
	( fbEins[iEins_Id].IsTQuittierenNotHalt
		AND NOT fbEins[iEins_Id].OsNotHaltIstOk )
	OR	fbRTBremsentestQuit_Wippe_030601.Q;

fbAchse_Wippe_030601.IsQuittStoerung:=
	strGLmHand.bI_QuittStoerung
	OR	fbEins[iEins_Id].OsImpulsSteuerspannungEin;

fbAchse_Wippe_030601.IsStoerungAntrieb:=
	NOT bIW306ServoBtb
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030601.IsTPlus:=
	astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
	AND	strGLmHand.bI_Senken;//AND	strGLmHand.bI_Heben;

fbAchse_Wippe_030601.IsTMinus:=
	astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
	AND	strGLmHand.bI_Heben;//AND	strGLmHand.bI_Senken;

fbAchse_Wippe_030601.IsTSchnell:=
	astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
	AND	strGLmHand.bQ_Schnell;

fbAchse_Wippe_030601.IsEsEndlageMinus:=
	NOT abGSignalstatuswordT1_Endschalter_Minus[AxId_Wippe_030601]
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030601.IsEsEndlagePlus:=
	NOT abGSignalstatuswordT1_Endschalter_Plus[AxId_Wippe_030601]
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030601.IsEsStopMinus:= FALSE;
fbAchse_Wippe_030601.IsEsStopPlus:= FALSE;

fbAchse_Wippe_030601.IsEilSchleichAchse:= FALSE;
fbAchse_Wippe_030601.IsGefrierStop:= gxGefrierstopAktiv;
fbAchse_Wippe_030601.IsIstwertSetzen:= FALSE;
fbAchse_Wippe_030601.IwWertIstwertSetzen:= 0;

fbAchse_Wippe_030601.IsSchleichenPlus:=
	P_ServiceAchsen.xSchleichen_Aktiv[AxId_Wippe_030601]
	AND	strGLmHand.bI_Vor;

fbAchse_Wippe_030601.IsSchleichenMinus:=
	P_ServiceAchsen.xSchleichen_Aktiv[AxId_Wippe_030601]
	AND	strGLmHand.bI_Zurueck;

fbAchse_Wippe_030601.IsServoInReferenz:=
	abGSignalstatuswordT1_Referenziert_ReferenzGeber[AxId_Wippe_030601]
	AND	abGSignalstatuswordT1_Referenziert_Geber[AxId_Wippe_030601]
	OR 	gxTestbetriebOhneMaschineAktiv;

fbAchse_Wippe_030601.IsSichereGeschwindigkeit:=
	abGSMOSteuersignal_SMM1[AxId_Wippe_030601]
	OR	abGSMOBetriebszustand_SMM1[AxId_Wippe_030601];

fbAchse_Wippe_030601.IsModuloAchse:= FALSE;
AxToNcEiS[AxId_Wippe_030601]:= TRUE;

fbAchse_Wippe_030601.IwParameter:= AchsHandlingOberflaeche.AchsDaten[AxId_Wippe_030601].AchsParameter;

IF	P_ServiceAchsen.xAktiv[AxId_Wippe_030601]
THEN
	IF	fbEins[iEins_Id].OsNotHaltIstOk
	THEN
		fbAchse_Wippe_030601.IsStartEichen:= P_ServiceAchsen.xStart_Eichen[AxId_Wippe_030601];
		fbAchse_Wippe_030601.IsStartAufPosition:= P_ServiceAchsen.xStart_AufPosition[AxId_Wippe_030601];
	ELSE
		fbAchse_Wippe_030601.IsStartEichen:= FALSE;
		fbAchse_Wippe_030601.IsStartAufPosition:= FALSE;
	END_IF;

	fbAchse_Wippe_030601.IsReset:= P_ServiceAchsen.xStopAktiv_Reset[AxId_Wippe_030601];
	fbAchse_Wippe_030601.IsFreigabe:= P_ServiceAchsen.xFreigabe_Aktiv[AxId_Wippe_030601];
	fbAchse_Wippe_030601.IwZielSollwert:= P_ServiceAchsen.rZielSollwert[AxId_Wippe_030601];
	fbAchse_Wippe_030601.IwSpeed:= P_ServiceAchsen.uiSpeed[AxId_Wippe_030601];
ELSE
	IF	fbEins[iEins_Id].OsAutomatikEin
		OR		fbPosi_Wippe_030601.OwJobStatus = iFaehrtAufSicherePos
			AND NOT  fbPosi_Wippe_030601.ISHAND
		OR	fbEins[iEins_Id].OsHandEin
			AND	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt
	THEN
		arGZielAchse[AxId_Wippe_030601]:= st_Achse_Wippe_030601.rZiel;
		arGSpeedAchse[AxId_Wippe_030601]:= st_Achse_Wippe_030601.rSpeed;
		abGStartAchse[AxId_Wippe_030601]:= st_Achse_Wippe_030601.xStartPosi;
		abGEichenAchse[AxId_Wippe_030601]:= st_Achse_Wippe_030601.xStartEichen;
		abGFreigabeAchse[AxId_Wippe_030601]:= st_Achse_Wippe_030601.xFreigabe;
	ELSE
		abGStartAchse[AxId_Wippe_030601]:= FALSE;
		abGEichenAchse[AxId_Wippe_030601]:= FALSE;
		abGFreigabeAchse[AxId_Wippe_030601]:= FALSE;
	END_IF;

	fbAchse_Wippe_030601.IsReset:=
		( astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
			OR	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt )
		AND 	strGLmHand.bI_Reset
		OR NOT fbEins[iEins_Id].OsAutomatikEin
			AND	GDat.TrE_Daten[TrEId_030601].iReset <> 0;

	fbAchse_Wippe_030601.IsFreigabe:=
		( abGFreigabeAchse[AxId_Wippe_030601]
			OR	fbEins[iEins_Id].OsHandEin )
		AND	fbEins[iEins_Id].OsNotHaltIstOk
		AND NOT fbAchse_Wippe_030601.OwOut.xAchseFehler
		AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
		AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
		AND	gxAlleTuerenGeschlossen_FreigabeAchseC[giSicher_C2_1];

	IF	fbEins[iEins_Id].OsAutomatikEin
		AND	arGSpeedAchse[AxId_Wippe_030601] > 0
	THEN
		fbAchse_Wippe_030601.IwSpeed:=
			LIMIT ( 0.1,arGSpeedAchse[AxId_Wippe_030601],100 );
	ELSE
		fbAchse_Wippe_030601.IwSpeed:= 100;
	END_IF;

	IF	fbAchse_Wippe_030601.IsSichereGeschwindigkeit
	THEN
		fbAchse_Wippe_030601.IwSpeed_HandSlow:= 50;
		fbAchse_Wippe_030601.IwSpeed_HandFast:= 100;
	ELSE
		fbAchse_Wippe_030601.IwSpeed_HandSlow:=
				LIMIT ( 0.1, USINT_TO_REAL(GKoAnWippe_030601.usSpeed_HandFahrenSlow), 100 );

		fbAchse_Wippe_030601.IwSpeed_HandFast:=
				LIMIT ( 0.1, USINT_TO_REAL(GKoAnWippe_030601.usSpeed_HandFahrenFast), 100 );
	END_IF;

	fbAchse_Wippe_030601.IwBeschleunigung:= st_Achse_Wippe_030601.rBeschleunigung;
	fbAchse_Wippe_030601.IwVerzoegerung:= st_Achse_Wippe_030601.rVerzoegerung;
	fbAchse_Wippe_030601.IwRuck:= st_Achse_Wippe_030601.rRuck;

	fbAchse_Wippe_030601.IsStartEichen:=
		abGEichenAchse[AxId_Wippe_030601]
		AND NOT gxTestbetriebOhneMaschineAktiv;

	fbAchse_Wippe_030601.IwZielSollwert:=
		arGZielAchse[AxId_Wippe_030601];

	fbAchse_Wippe_030601.IsStartAufPosition:=
		abGStartAchse[AxId_Wippe_030601]
		AND 	fbAchse_Wippe_030601.IsFreigabe
		AND	fbAchse_Wippe_030601.OwOut.xAchseGeeicht;

	fbAchse_Wippe_030601.IsNeueGeschwindigkeit:= st_Achse_Wippe_030601.xStartNeueGeschwindigkeit;

	fbAchse_Wippe_030601.IsSonderGeschwindigkeit:= st_Achse_Wippe_030601.xSonderGeschwindigkeit;
	fbAchse_Wippe_030601.IwSonderGeschwindigkeit:= LREAL_TO_REAL ( st_Achse_Wippe_030601.lrSonderGeschwindigkeit );

	fbAchse_Wippe_030601.IsStartNeuesZielWaehrendPosi:= st_Achse_Wippe_030601.xStartNeuesZielWaehrendPosi;
	fbAchse_Wippe_030601.IwNeuesZielWaehrendPosi:= st_Achse_Wippe_030601.rNeuesZielWaehrendPosi;

	(* wenn von Achse uebernommen = loeschen, da sonst kein Start nach NotHalt/Stop *)
	IF	fbAchse_Wippe_030601.xZielUmschiessen
	THEN
		st_Achse_Wippe_030601.xStartNeuesZielWaehrendPosi:= FALSE;
	END_IF;

	IF	fbAchse_Wippe_030601.xGeschwindigkeitUmschiessen
	THEN
		st_Achse_Wippe_030601.xStartNeueGeschwindigkeit:= FALSE;
	END_IF;
END_IF;

fbAchse_Wippe_030601();

IF	fbAchse_Wippe_030601.IsHand
	AND	fbAchse_Wippe_030601.IsReset
THEN
	abGAchseNeuEichen[AxId_Wippe_030601]:= FALSE;
END_IF;


(*------------------------------------------------------*)
(*  Handling: -> Jobverteiler                  		  *)
(*------------------------------------------------------*)

st_Achse_Wippe_030601.iID:= AxId_Wippe_030601;
st_Achse_Wippe_030601.xNichtEichen:= TRUE;
st_Achse_Wippe_030601.stVonAchse:= fbAchse_Wippe_030601.OwOut;
st_Achse_Wippe_030601.stVonAchse.xAchseGeeicht:=
	fbAchse_Wippe_030601.OwOut.xAchseGeeicht;

st_Achse_Wippe_030601.xBereit_FuerFahrjob:=
	fbAchse_Wippe_030601.OwOut.xAchseBereit
	AND NOT fbAchse_Wippe_030601.OwOut.xAchseFehler;



(*-----------------------------------------------------------------*)
(* Die globale Struktur für die Leuchtmelde Handtasten beschreiben *)
(*-----------------------------------------------------------------*)
IF	fbAchse_Wippe_030601.IsHand
	AND	astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
THEN
	IF NOT fbAchse_Wippe_030601.IsEsEndlagePlus
	THEN
		strGLmHand.bQ_Heben:= TRUE;
	END_IF;

	IF NOT fbAchse_Wippe_030601.IsEsEndlageMinus
	THEN
		strGLmHand.bQ_Senken:= TRUE;
	END_IF;

	IF		fbPosi_Wippe_030601.SKET <> 0
		AND		fbPosi_Wippe_030601.SKET <> 1
	THEN
		strGLmHand.bQ_Reset:= TRUE;
	END_IF;
END_IF;



				(*---------------------------------------------------*)
				(*---------------------------------------------------*)
				(*           Freigabe Hardwaren / Software           *)
				(*---------------------------------------------------*)
				(*---------------------------------------------------*)

IF ( fbAchse_Wippe_030601.IsEsEndlageMinus
		OR  	fbAchse_Wippe_030601.IsEsEndlagePlus )
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	abGEndlageAngefahren[AxId_Wippe_030601]:= TRUE;
END_IF;

IF	strGLmHand.bI_QuittStoerung
		AND NOT fbAchse_Wippe_030601.IsEsEndlageMinus
		AND NOT fbAchse_Wippe_030601.IsEsEndlagePlus
	OR NOT fbEins[iEins_Id].OsSteuerspannungIstEin
THEN
	abGEndlageFreifahren[AxId_Wippe_030601]:= FALSE;
	abGEndlageAngefahren[AxId_Wippe_030601]:= FALSE;
END_IF;

abGEndlageFreifahren[AxId_Wippe_030601]:=
	fbEins[iEins_Id].OsHandEin
	AND	abGEndlageAngefahren[AxId_Wippe_030601];

aTonGReglerfreigabe[AxId_Wippe_030601].IN:=
	( NOT abGEndlageAngefahren[AxId_Wippe_030601]
		OR	abGEndlageFreifahren[AxId_Wippe_030601] )
	AND	bFreigabeFahren_Wippe_030601
	AND   gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_1]
      AND   gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_1]
      AND   gxSicherheitsBereichQuittiertC[giSicher_C2_1]
      AND NOT bFreigabeTuerOeffnen_Wippe_030601
	AND NOT abGSignalstatuswordT1_FehlerZustand[AxId_Wippe_030601]
	AND NOT abGAchseDisable[AxId_Wippe_030601]
	AND NOT AxFrNcFehler[AxId_Wippe_030601]
	AND NOT fbAchse_Wippe_030601.OsMFehlerMcBausteine
	AND NOT GKoAnWippe_030601.xAchse_Inaktiv;

aTonGReglerfreigabe[AxId_Wippe_030601](PT:= T#500MS);

bQW306ServoEstop:=
	NOT abGSignalstatuswordT1_FehlerZustand[AxId_Wippe_030601]
	AND NOT AxFrNcFehler[AxId_Wippe_030601]
	OR 	abGSMOBetriebszustand_Applikation[AxId_Wippe_030601];

abGReglerfreigabe[AxId_Wippe_030601]:=
	aTonGReglerfreigabe[AxId_Wippe_030601].Q
	OR	aTofGReglerfreigabe_Aus[AxId_Wippe_030601].Q
		AND	AxFrNcFahrePlus[AxId_Wippe_030601]
		AND NOT abGEndlageAngefahren[AxId_Wippe_030601]
	OR	aTofGReglerfreigabe_Aus[AxId_Wippe_030601].Q
		AND	AxFrNcFahreMinus[AxId_Wippe_030601]
		AND NOT abGEndlageAngefahren[AxId_Wippe_030601];

(* Ausschaltverzoegerung Reglerfreigabe *)
aTofGReglerfreigabe_Aus[AxId_Wippe_030601].IN:=
	aTonGReglerfreigabe[AxId_Wippe_030601].IN
		AND  	aTonGReglerfreigabe[AxId_Wippe_030601].Q;
aTofGReglerfreigabe_Aus[AxId_Wippe_030601](PT:= GKoAnWippe_030601.tBisReglerfreigabeAus_BeiNotHalt);

aTonGVorschubfreigabe[AxId_Wippe_030601](PT:= T#500MS);

aTonGVorschubfreigabe[AxId_Wippe_030601].IN:=
	abGReglerfreigabe[AxId_Wippe_030601];

abGVorschubfreigabe[AxId_Wippe_030601]:= aTonGVorschubfreigabe[AxId_Wippe_030601].Q;

abGVorschubfreigabePlus[AxId_Wippe_030601]:=
	NOT fbAchse_Wippe_030601.IsEsEndlagePlus
		AND	bIW306BremseGeloest
	OR	gxTestbetriebOhneMaschineAktiv;

abGVorschubfreigabeMinus[AxId_Wippe_030601]:=
	NOT fbAchse_Wippe_030601.IsEsEndlageMinus
		AND	bIW306BremseGeloest
	OR	gxTestbetriebOhneMaschineAktiv;

(*---------------------------------------------------*)
(* Achse: Freigabe Software              		     *)
(*---------------------------------------------------*)

AxToNcRfg[AxId_Wippe_030601]:=
	abGReglerfreigabe[AxId_Wippe_030601]
		AND NOT abGAchseDisable[AxId_Wippe_030601];

AxToNcVfp[AxId_Wippe_030601]:=
	abGVorschubfreigabe[AxId_Wippe_030601]
		AND	abGVorschubfreigabePlus[AxId_Wippe_030601]
		AND NOT bFehlerFahrenPlus_Wippe_030601
		AND	aTonGReglerfreigabe[AxId_Wippe_030601].Q
		AND NOT abGAchseDisable[AxId_Wippe_030601];

AxToNcVfm[AxId_Wippe_030601]:=
	abGVorschubfreigabe[AxId_Wippe_030601]
		AND	abGVorschubfreigabeMinus[AxId_Wippe_030601]
		AND NOT bFehlerFahrenMinus_Wippe_030601
		AND	aTonGReglerfreigabe[AxId_Wippe_030601].Q
		AND NOT abGAchseDisable[AxId_Wippe_030601];

(*----------------------------------------------*)
(*----------------------------------------------*)
(* Achse: Reset SERCOS-Antrieb       		*)
(*----------------------------------------------*)
(*----------------------------------------------*)
fbSERCOS_ResetAntrieb_Wippe_030601 (
	NetID				:= P_Ueberwachung_EtherCat.sNetId,
	Name				:= '=W306.EC1+S1-TA1S',
	DevID				:= uiIDevID,
	AchsID			:= AxId_Wippe_030601,
	IsFehlerQuitt		:= strGLmHand.bI_QuittStoerung,
	IsTestbetrieb		:= gxTestbetriebOhneMaschineAktiv,
	IsDoReset			:= fbAchse_Wippe_030601.OsDoReset_VorModul,
	IsNotHaltOK			:= gxSicherheitsBereichQuittiertC[giSicher_NotHalt],
	OsResetOK			=> ,
	OsFehlerAdresseLesen	=> ,
	OsNotHaltAktivieren	=> ,
	uiQ_EtherCATAdresse	=> );

uiGPortNr_SERCOS_Antrieb[AxId_Wippe_030601]	:= fbSERCOS_ResetAntrieb_Wippe_030601.uiQ_EtherCATAdresse;
fbAchse_Wippe_030601.IsResetOK_VorModul		:= fbSERCOS_ResetAntrieb_Wippe_030601.OsResetOK;


(*------------------------------------------*)
(*------------------------------------------*)
(* Achse: Absolutwertsetzen im Steller      *)
(*------------------------------------------*)
(*------------------------------------------*)
fbSERCOS_AbsolutwertSetzen_Wippe_030601 (
	NetID				:= P_Ueberwachung_EtherCat.sNetId,
	PortNr			:= uiGPortNr_SERCOS_Antrieb[AxId_Wippe_030601],
	AchsID			:= AxId_Wippe_030601,
	IwIstwert			:= AxFrNc_fPosIst[AxId_Wippe_030601],
	IsSetAbsolutwert		:=
					NOT fbEins[iEins_Id].OsNotHaltIstOK
					AND	astrGButtonManTransporte[ID_Wippe_030601_IstwertSetzen].bSchalt,
	IsReglerfreigabe		:= AxToNcRfg[AxId_Wippe_030601],
	IsAufEichposition		:= AxToNcEiS[AxId_Wippe_030601],
	IsTestbetrieb		:= gxTestbetriebOhneMaschineAktiv,
	IsFehlerQuitt		:= strGLmHand.bI_QuittStoerung,
	ProtoNr			:= P_BahnJob,
	iStatus			=> ,
	OsMReglerfreigabeAktiv	=> ,
	OsMKeineEichPosition	=> ,
	OsAbsolutwertGesetzt	=> ,
	OsFertig			=> );


(*----------------------------------------*)
(*----------------------------------------*)
(* Achse: Drehmoment begrenzen im Steller *)
(*----------------------------------------*)
(*----------------------------------------*)

aiQAntriebGrenzDrehmoment[AxId_Wippe_030601]:=
	LIMIT(1, UINT_TO_INT ( GKoAnWippe_030601.uMaxDrehmoment ) * 10, 4000);

(*------------------------------------------*)
(*------------------------------------------*)
(*  Hub: Bremsentest              		  *)
(*------------------------------------------*)
(*------------------------------------------*)
fbSERCOS_Bremsentest_Wippe_030601(
	sI_NetIDMaster		:= P_Ueberwachung_EtherCat.sNetId,
	uiI_EtherCATAdresse	:= uiGPortNr_SERCOS_Antrieb[AxId_Wippe_030601],
	uiI_AxId			:= AxId_Wippe_030601,
	bI_BausteinAktiv		:= TRUE,
	bI_NotHaltOK		:= fbEins[iEins_Id].OsNotHaltIstOk,
	bI_FreigabeStartTest:=
					bFreigabeStartBremsentestAblauf_Wippe_030601
					AND	bSicherePosAngefahren_Wippe_030601
					AND	bFreigabeFahren_Wippe_030601
					AND NOT gxAnTuerAngemeldetC[giSicher_C2_1]
					AND NOT gxEineTuerOffenC[giSicher_C2_1],
	bI_Reset			:=
					( astrGButtonManTransporte[ID_Wippe_030601_Bremsentest].bSchalt
						OR	astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
						OR	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt )
					AND	strGLmHand.bI_Reset
					AND	fbEins[iEins_Id].OsHandEin
					OR NOT fbEins[iEins_Id].OsAutomatikEin
						AND	GDat.TrE_Daten[TrEId_030601].iReset <> 0,
	bI_Reglerfreigabe		:= AxToNcRfg[AxId_Wippe_030601],
	bI_StartTestManuell	:= bBremsentestStarten_Wippe_030601,
	bI_Testbetrieb		:= gxTestbetriebOhneMaschineAktiv,
	bQ_Busy			=> ,
	bQ_Error			=> ,
	bQ_TestMussErfolgen	=> ,
	bQ_VorwarnungBremsentest=> ,
	bQ_StopBremsentest	=> ,
	bQ_BremsenTestOK		=> ,
	uiQ_ErrID			=> );

GDat.TrE_Daten[TrEId_030601].iBelegtStatus:= F_SetClearBelegtStatus( TrEId_030601, iBremsentestStehtAn, fbSERCOS_Bremsentest_Wippe_030601.bQ_TestMussErfolgen );

fbFTBremsentestTueranmeldung_Wippe_030601(
	CLK:= bSicherePosAngefahren_Wippe_030601
		AND	bFreigabeStartBremsentestAblauf_Wippe_030601
		AND ( gxAnTuerAngemeldetC[giSicher_C2_1]
			OR	gxEineTuerOffenC[giSicher_C2_1] ),
	Q=> );

IF	( astrGButtonManTransporte[ID_Wippe_030601_Bremsentest].bSchalt
		OR	astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
		OR	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt )
	AND	fbEins[iEins_Id].OsHandEin
	AND	fbSERCOS_Bremsentest_Wippe_030601.bQ_Error
THEN
	strGLmHand.bQ_Reset:= TRUE;
END_IF;

IF	fbSERCOS_Bremsentest_Wippe_030601.bQ_Busy
THEN
	bBremsentestAusgefuehrt_Wippe_030601:= TRUE;
	bBremsentestStarten_Wippe_030601:= FALSE;

ELSIF fbFTBremsentestTueranmeldung_Wippe_030601.Q
	AND	fbSERCOS_Bremsentest_Wippe_030601.enmFB_STATUS = BEARBEITEN
	AND NOT bBremsentestAusgefuehrt_Wippe_030601
	AND NOT bBremsentestStarten_Wippe_030601
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	bBremsentestStarten_Wippe_030601:= TRUE;

ELSIF	NOT bSicherePosAngefahren_Wippe_030601
	AND	bBremsentestAusgefuehrt_Wippe_030601
THEN
	bBremsentestAusgefuehrt_Wippe_030601:= FALSE;

ELSIF	fbEins[iEins_Id].OsHandEin
	AND	astrGButtonManTransporte[ID_Wippe_030601_Bremsentest].bSchalt
	AND	fbSERCOS_Bremsentest_Wippe_030601.enmFB_STATUS = BEARBEITEN
	AND NOT bBremsentestAusgefuehrt_Wippe_030601
	AND NOT bBremsentestStarten_Wippe_030601
	AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_Busy
	AND NOT fbSERCOS_Bremsentest_Wippe_030601.bQ_Error
	AND NOT fbSERCOS_Bremsentest_Wippe_030601.bTestManuell
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	strGLmHand.bQ_Vor:= TRUE;

	IF	strGLmHand.bI_Vor
	THEN
		bBremsentestStarten_Wippe_030601:= TRUE;
	END_IF;
END_IF;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_13_AbsAchse_Posi_Wippe_030601" Id="{306470f6-ccf6-4916-a05a-7c1121aca135}">
      <Implementation>
        <ST><![CDATA[(*
-----------------------------------------------
-----------------------------------------------
 Inhalt:                            

      - Posi.Modul
      - Ueberwachung Heben / Senken
      - Job Hub heben / senken 
-----------------------------------------------
-----------------------------------------------
*)

(*------------------------------------------------*)
(*------------------------------------------------*)
(* Achse: Jobhandling Positionierung		  *)
(*------------------------------------------------*)
(*------------------------------------------------*)

fbPosi_Wippe_030601.IWACHSID:= AxId_Wippe_030601;
fbPosi_Wippe_030601.IWPARA:= GKoAnWippe_030601;

fbPosi_Wippe_030601.ISHAND:=
	fbEins[iEins_Id].OsHandEin
		AND NOT astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	strGLmHand.bI_Reset
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND GDat.TrE_Daten[TrEId_030601].iReset <> 0;

fbPosi_Wippe_030601.ISAUTOMATIK:=
	fbEins[iEins_Id].OsAutomatikEin
	OR	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt;

fbPosi_Wippe_030601.ISRESET:=
	fbEins[iEins_Id].OsHandEin
		AND ( astrGButtonManTransporte[ID_Wippe_030601_Tippen].bSchalt
			OR	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt )
		AND 	strGLmHand.bI_Reset
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	GDat.TrE_Daten[TrEId_030601].iReset <> 0;

fbPosi_Wippe_030601.ISQUITTSTOERUNG:=
	strGLmHand.bI_QuittStoerung
	OR 	fbEins[iEins_Id].OsImpulsSteuerspannungEin;

fbPosi_Wippe_030601.ISZYKLUSBEENDEN:=
	fbEins[iEins_Id].OsZyklusBeenden;

fbPosi_Wippe_030601.ISSTOERUNGANTRIEB:=
	fbAchse_Wippe_030601.OsMStoerungAntrieb
	OR	fbAchse_Wippe_030601.OsMFehlerAchsmodul;

fbPosi_Wippe_030601.ISFREIGABE_FAHRTINGRUND:= FALSE;
fbPosi_Wippe_030601.ISMITSTARTNEUESZIELWAEHRENDPOSI:= FALSE;
fbPosi_Wippe_030601.ISISTWERTSETZENMANUELL:= FALSE;
fbPosi_Wippe_030601.ISSPEED2:= FALSE;
fbPosi_Wippe_030601.ISKEINEGRUNDPOSITION:= TRUE;

fbPosi_Wippe_030601.ISSICHEREPOSANFAHREN:=
	(( gxAnTuerAngemeldetC[giSicher_C2_1]
		OR	gxEineTuerOffenC[giSicher_C2_1] )
		AND NOT GKoAnWippe_030601.xSicherheitstuerenOeffnen_WennAchseSteht
		OR	fbSERCOS_Bremsentest_Wippe_030601.bQ_TestMussErfolgen
			AND	bFreigabeStartBremsentestAblauf_Wippe_030601 )
	AND	fbEins[iEins_Id].OsNotHaltIstOK;

fbPosi_Wippe_030601( IO_Achse:= st_Achse_Wippe_030601 );

IF		fbPosi_Wippe_030601.IWDOJOB > eJob_KeinJob
	AND		fbPosi_Wippe_030601.OWJOBAKTIV =  fbPosi_Wippe_030601.IWDOJOB
THEN
		fbPosi_Wippe_030601.IWDOJOB:= eJob_KeinJob;
END_IF;

(*
===============================================
   Ueberwachung Heben / Senken

   Heben  = Spaltkontrolle muss frei sein
   Senken = Spaltkontrolle muss frei sein
===============================================
*)

fbEntprellenSpaltlichschranken_Wippe_030601(
	IsSensor:= bIW306Transp1AnfSpur1
			AND bIW306Transp1AnfSpur2
			AND bIW305Transp1SichSpur1
			AND bIW305Transp1SichSpur2
			AND bIW315Transp1SichSpur1
			AND bIW315Transp1SichSpur2
			AND bIW325Transp1SichSpur1
			AND bIW325Transp1SichSpur2,			(* alle Spaltlichtschranken einfügen, die OK für die Bewegung sein müssen *)
	tEntprell_Belegt:= GkoAll.tEntprellSchalter,
	tEntprell_Frei:= GkoAll.tEntprellSchalter,
	OsSensor=> bSpaltlichschrankenOK_Wippe_030601 );

IF	gxTestbetriebOhneMaschineAktiv
THEN
	bSpaltlichschrankenOK_Wippe_030601:= TRUE;
END_IF;

IF NOT bSpaltlichschrankenOK_Wippe_030601
	AND (  fbPosi_Wippe_030601.OwJobStatus = iAutomatikAktivJob
		OR		fbPosi_Wippe_030601.OwJobStatus = iFahrtGrund )
	AND		fbPosi_Wippe_030601.ISAUTOMATIK
	AND NOT gxTestbetriebOhneMaschineAktiv
	AND NOT GKoAnWippe_030601.xAchse_Inaktiv
THEN
	IF	AxFrNcFahrePlus[AxId_Wippe_030601]
	THEN
		bFehlerFahrenPlus_Wippe_030601:= TRUE;
	END_IF;

	IF	AxFrNcFahreMinus[AxId_Wippe_030601]
	THEN
		bFehlerFahrenMinus_Wippe_030601:= TRUE;
	END_IF;

ELSIF NOT bSpaltlichschrankenOK_Wippe_030601
	AND	iWippe_030601_IstAufPos = 0
	AND (  fbPosi_Wippe_030601.OwJobStatus = iAutomatikBereitJob
		OR		fbPosi_Wippe_030601.OwJobStatus = iHand )
	AND NOT gxTestbetriebOhneMaschineAktiv
	AND NOT GKoAnWippe_030601.xAchse_Inaktiv
THEN
	bFehlerFahrenPlus_Wippe_030601:= TRUE;
	bFehlerFahrenMinus_Wippe_030601:= TRUE;

ELSIF	(  fbPosi_Wippe_030601.ISQUITTSTOERUNG
		OR NOT  fbPosi_Wippe_030601.ISAUTOMATIK )
	AND 	bSpaltlichschrankenOK_Wippe_030601
	OR 	GKoAnWippe_030601.xAchse_Inaktiv
THEN
	bFehlerFahrenPlus_Wippe_030601:= FALSE;
	bFehlerFahrenMinus_Wippe_030601:= FALSE;
END_IF;

bFreigabePositionieren_Wippe_030601:=						(* Wann darf positioniert werden? -> projektabhängig anpassen *)
  	strGHdshk_Bahn030601.str_DoJob_AufBahn = eRolljobKeinJob
	AND	strGHdshk_Bahn030601.str_JobAktiv_AufBahn = eRolljobKeinJob
	AND	strGHdshk_Bahn030601.str_DoJob_VonBahn = eRolljobKeinJob
	AND ( strGHdshk_Bahn030601.str_JobAktiv_VonBahn = eRolljobKeinJob
		OR	strGHdshk_Bahn030601.str_JobAktiv_VonBahn = eRolljobVonBahnVorlauf
		OR	strGHdshk_Bahn030601.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
		OR	strGHdshk_Bahn030601.str_JobAktiv_VonBahn = eRolljobAnsBahnEndeVorlauf )
	AND GDat.TrE_Daten[TrEId_030601].iAnzahlPlatten = 0
	AND NOT ( strGHdshk_Bahn030601.str_BahnStatus = iStoerung )
	AND	strGHdshk_Bahn030501.str_DoJob_VonBahn = eRolljobKeinJob
	AND 	( strGHdshk_Bahn030501.str_JobAktiv_VonBahn = eRolljobKeinJob
		OR strGHdshk_Bahn030501.str_JobAktiv_VonBahn = eRolljobAnsBahnendeVorlauf)
	AND NOT ( strGHdshk_Bahn030501.str_BahnStatus = iStoerung )
	AND	strGHdshk_Bahn031501.str_DoJob_VonBahn = eRolljobKeinJob
	AND 	(strGHdshk_Bahn031501.str_JobAktiv_VonBahn = eRolljobKeinJob
		OR strGHdshk_Bahn031501.str_JobAktiv_VonBahn = eRolljobAnsBahnendeVorlauf)
	AND NOT ( strGHdshk_Bahn031501.str_BahnStatus = iStoerung )
	AND	strGHdshk_Bahn032501.str_DoJob_VonBahn = eRolljobKeinJob
	AND 	(strGHdshk_Bahn032501.str_JobAktiv_VonBahn = eRolljobKeinJob
		OR strGHdshk_Bahn032501.str_JobAktiv_VonBahn = eRolljobAnsBahnendeVorlauf)
	AND NOT ( strGHdshk_Bahn032501.str_BahnStatus = iStoerung )
	AND bSpaltlichschrankenOK_Wippe_030601;

IF NOT bFreigabePositionieren_Wippe_030601
	AND NOT bSpaltlichschrankenOK_Wippe_030601
	AND	strGHdshk_Bahn030601.b_BahnSteht
	AND	iWippe_030601_IstAufPos <> iWippe_030601_SollAufPos
	AND	fbPosi_Wippe_030601.IWDOJOB = eJob_KeinJob
	AND	fbPosi_Wippe_030601.OWJOBAKTIV = eJob_KeinJob
	AND	fbPosi_Wippe_030601.OwJobStatus = iAutomatikBereitJob
	AND	st_Achse_Wippe_030601.xBereit_FuerFahrjob
	AND NOT GKoAnWippe_030601.xAchse_Inaktiv
THEN
	bFehlerFahrenFreigabe_Wippe_030601:= TRUE;

ELSIF	(  fbPosi_Wippe_030601.ISQUITTSTOERUNG
		OR NOT  fbPosi_Wippe_030601.ISAUTOMATIK )
	AND 	bSpaltlichschrankenOK_Wippe_030601
	OR 	GKoAnWippe_030601.xAchse_Inaktiv
THEN
	bFehlerFahrenFreigabe_Wippe_030601:= FALSE;
END_IF;

IF		fbPosi_Wippe_030601.ISRESET
	AND		fbPosi_Wippe_030601.ISHAND
THEN
	iWippe_030601_SollAufPos:= 0;
END_IF;

(*
-----------------------------------------------------
 Achse: Job Hub heben / senken 
-----------------------------------------------------
*)
iWippe_030601_IstAufPos:= 0;

FOR i:= 1 TO giMaxAnzahlStoppositionen
DO
	IF ABS( GKoAnWippe_030601.arStoppPositionen[i] - AxFrNc_fPosIst[AxId_Wippe_030601] ) <= GKoAnWippe_030601.rToleranz_StoppPositionen
		AND	GKoAnWippe_030601.arStoppPositionen[i] <> 0
	THEN
		iWippe_030601_IstAufPos:= i;
		EXIT;
	END_IF;
END_FOR;

IF	bFreigabePositionieren_Wippe_030601
	AND	bSpaltlichschrankenOK_Wippe_030601
	AND	fbPosi_Wippe_030601.IWDOJOB = eJob_KeinJob
	AND	fbPosi_Wippe_030601.OWJOBAKTIV = eJob_KeinJob
	AND	fbPosi_Wippe_030601.OwJobStatus = iAutomatikBereitJob
	AND	st_Achse_Wippe_030601.xBereit_FuerFahrjob
	AND NOT GKoAnWippe_030601.xAchse_Inaktiv
THEN
	IF	fbEins[iEins_Id].OsAutomatikEin
		AND	iWippe_030601_SollAufPos >= 1
		AND	iWippe_030601_SollAufPos <= giMaxAnzahlStoppositionen
		AND	iWippe_030601_IstAufPos <> iWippe_030601_SollAufPos
		AND	bFreigabeFuerJob_C2_1
	THEN
		IF 	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_SollAufPos] <> 0
		THEN
						fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[iWippe_030601_SollAufPos];
						fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;

			F_ProtoText4( P_BahnJob,
						'Achse Wippe 06.30.01 gestartet. ',
						CONCAT( ' / Ziel: ', F_RealToString_0Nach(  fbPosi_Wippe_030601.IWZIEL )),
						'',
						'' );
		END_IF;

	ELSIF	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Wippe_030601_Positionieren].bSchalt
	THEN
		IF NOT bFehlerFahrenPlus_Wippe_030601					(* Spaltüberwachungen *)
			AND NOT bFehlerFahrenMinus_Wippe_030601
		THEN
			IF	iWippe_030601_IstAufPos = 0
			THEN
				strGLmHand.bQ_Senken:= TRUE;
				strGLmHand.bQ_Heben:= TRUE;

				IF	strGLmHand.bI_Senken
				THEN
										fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[1];
										fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;
					iWippe_030601_SollAufPos:= 1;

				ELSIF	strGLmHand.bI_Heben
				THEN
					FOR	i:= giMaxAnzahlStoppositionen TO 1 BY -1
					DO
						IF	GKoAnWippe_030601.arStoppPositionen[i] <> 0
						THEN
														fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[i];
														fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;
							iWippe_030601_SollAufPos:= i;
							EXIT;
						END_IF;
					END_FOR;
				END_IF;
			ELSE
				IF	iWippe_030601_IstAufPos = 1
					AND	giMaxAnzahlStoppositionen > 1
				THEN
					IF	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos+1] <> 0
					THEN
						strGLmHand.bQ_Heben:= TRUE;

						IF	strGLmHand.bI_Heben
						THEN
														fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos+1];
														fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;
							iWippe_030601_SollAufPos:= iWippe_030601_IstAufPos+1;
						END_IF;
					END_IF;

				ELSIF iWippe_030601_IstAufPos = giMaxAnzahlStoppositionen
					AND	giMaxAnzahlStoppositionen > 1
				THEN
					IF	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos-1] <> 0
					THEN
						strGLmHand.bQ_Senken:= TRUE;
	
						IF	strGLmHand.bI_Senken
						THEN
														fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos-1];
														fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;
							iWippe_030601_SollAufPos:= iWippe_030601_IstAufPos-1;
						END_IF;
					END_IF;

				ELSIF iWippe_030601_IstAufPos > 1
					AND	iWippe_030601_IstAufPos < giMaxAnzahlStoppositionen
				THEN
					IF	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos-1] <> 0
					THEN
						strGLmHand.bQ_Senken:= TRUE;
					END_IF;

					IF	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos+1] <> 0
					THEN
						strGLmHand.bQ_Heben:= TRUE;
					END_IF;
	
					IF	strGLmHand.bI_Senken
						AND	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos-1] <> 0
					THEN
												fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos-1];
												fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;
						iWippe_030601_SollAufPos:= iWippe_030601_IstAufPos-1;

					ELSIF	strGLmHand.bI_Heben
						AND	GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos+1] <> 0
					THEN
												fbPosi_Wippe_030601.IWZIEL:= GKoAnWippe_030601.arStoppPositionen[iWippe_030601_IstAufPos+1];
												fbPosi_Wippe_030601.IWDOJOB:= eJob_Positionieren;
						iWippe_030601_SollAufPos:= iWippe_030601_IstAufPos+1;
					END_IF;
				END_IF;
			END_IF;
		END_IF;
	END_IF;
END_IF;

bFreigabeJob_Wippe_030601:=
		fbPosi_Wippe_030601.IWDOJOB = eJob_KeinJob
	AND		fbPosi_Wippe_030601.OWJOBAKTIV = eJob_KeinJob
	AND		fbPosi_Wippe_030601.OwJobStatus = iAutomatikBereitJob
	AND	iWippe_030601_IstAufPos = iWippe_030601_SollAufPos
	OR 	GKoAnWippe_030601.xAchse_Inaktiv;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_14_EilSchl_Buerste_030801" Id="{fdbb3157-422e-4ece-89cf-8fb05ac28ee3}">
      <Implementation>
        <ST><![CDATA[				(*---------------------------------------------------*)
				(*---------------------------------------------------*)
				(*       Zuordnungen: Achsmodul	          	     *)
				(*---------------------------------------------------*)
				(*---------------------------------------------------*)

bFreigabeFahren_Buerste_030801:=
	( TRUE
	OR	gxTestbetriebOhneMaschineAktiv
		AND NOT gxTestbetrieb_NotHalt )
	AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_2]
	AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_2]
	AND	gxSicherheitsBereichQuittiertC[giSicher_C2_2]
	AND NOT bFreigabeTuerOeffnen_Buerste_030801
	AND	fbEins[iEins_Id].OsNotHaltIstOK
	AND NOT gxTestEinfahrenKante;

(*---------------------------------------------------*)
(* Freigabe Tueren Oeffnen		                 *)
(*---------------------------------------------------*)

bFreigabeTuer_Achsen_Buerste_030801:=
	fbAchse_Buerste_030801.OwOut.xAchseBereit
		OR	fbAchse_Buerste_030801.OwOut.xAchseEnabled
		OR	fbAchse_Buerste_030801.OwOut.xAchseDisabled
		OR	fbAchse_Buerste_030801.OwOut.xAchseFehler;

bFreigabeTuer_Jobs_Buerste_030801:=
	fbAchse_Buerste_030801.xAchseSteht;

bSicherePosAngefahren_Buerste_030801:=
	bFreigabeTuer_Jobs_Buerste_030801
	AND	bFreigabeTuer_Achsen_Buerste_030801;

TonBisFreigabeTuerOeffnen_Buerste_030801(
	IN:= ( bSicherePosAngefahren_Buerste_030801
			OR ( NOT fbEins[iEins_Id].OsNotHaltIstOK
					OR	GKoAnB[usiBuerste1].xInAktiv )
				AND	fbAchse_Buerste_030801.xAchseSteht )
		AND ( gxAnTuerAngemeldetC[giSicher_C2_2]
			OR	gxEineTuerOffenC[giSicher_C2_2] ),
	PT:= t#1s,
	Q=> bFreigabeTuerOeffnen_Buerste_030801,
	ET=> );

(*------------------------------------------------------*)
(*  Achse	                                            *)
(*------------------------------------------------------*)

fbAchse_Buerste_030801.AxId:= AxId_Buerste_030801;
fbAchse_Buerste_030801.IwResetMode:= 0;

fbAchse_Buerste_030801.IsHand:=
	fbEins[iEins_Id].OsHandEin
		AND NOT P_ServiceAchsen.xAktiv[AxId_Buerste_030801]
	OR	P_ServiceAchsen.xAktiv[AxId_Buerste_030801]
		AND	P_ServiceAchsen.xStopAktiv_Reset[AxId_Buerste_030801]
	OR NOT fbEins[iEins_Id].OsAutomatikEin
		AND	GDat.TrE_Daten[TrEId_030801_Buerste].iReset <> 0;

fbAchse_Buerste_030801.IsAutomatik:=
	fbEins[iEins_Id].OsAutomatikEin
	OR	fbEins[iEins_Id].OsHandEin
		AND	astrGButtonManTransporte[ID_Buerste_030801_Positionieren].bSchalt
	OR	P_ServiceAchsen.xAktiv[AxId_Buerste_030801];

fbAchse_Buerste_030801.IsResetNachNotHalt:=
	fbEins[iEins_Id].IsTQuittierenNotHalt
		AND NOT fbEins[iEins_Id].OsNotHaltIstOk;

fbAchse_Buerste_030801.IsQuittStoerung:=
	strGLmHand.bI_QuittStoerung
	OR	fbEins[iEins_Id].OsImpulsSteuerspannungEin;

fbAchse_Buerste_030801.IsStoerungAntrieb:=
	NOT bIW10SchwertbuersteObBtp
	AND NOT bIW10SchwertbuersteUntBtp
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Buerste_030801.IsTPlus:=
	astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
	AND	strGLmHand.bI_Heben;

fbAchse_Buerste_030801.IsTMinus:=
	astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
	AND	strGLmHand.bI_Senken;

fbAchse_Buerste_030801.IsTSchnell:=
	astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
	AND	strGLmHand.bQ_Schnell;

fbAchse_Buerste_030801.IsEsEndlageMinus:=
	FALSE
	AND fbBuerste_030801.bQ_Grundstellung
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Buerste_030801.IsEsEndlagePlus:=
	bIW10SchwertbObZEndMax
	AND fbBuerste_030801.bQ_Grundstellung
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Buerste_030801.IsEsStopMinus:=
	FALSE
	AND NOT fbBuerste_030801.bQ_SchleichenEichenOben
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Buerste_030801.IsEsStopPlus:=
	bIW10SchwertbObZEndMax
	AND NOT fbBuerste_030801.bQ_SchleichenEichenOben
	AND NOT gxTestbetriebOhneMaschineAktiv;

fbAchse_Buerste_030801.IsEilSchleichAchse:= TRUE;
fbAchse_Buerste_030801.IsGefrierStop:= gxGefrierstopAktiv;
fbAchse_Buerste_030801.IsIstwertSetzen:= fbBuerste_030801.bQ_IstwertSetzenOben;
fbAchse_Buerste_030801.IwWertIstwertSetzen:= GKoAnB[usiBuerste1].rEichwert_Oben;

fbAchse_Buerste_030801.IsSchleichenPlus:=
	P_ServiceAchsen.xSchleichen_Aktiv[AxId_Buerste_030801]
	AND	strGLmHand.bI_Vor
	OR	fbBuerste_030801.bQ_SchleichenEichenOben;

fbAchse_Buerste_030801.IsSchleichenMinus:=
	P_ServiceAchsen.xSchleichen_Aktiv[AxId_Buerste_030801]
	AND	strGLmHand.bI_Zurueck;

fbAchse_Buerste_030801.IsServoInReferenz:= FALSE;

fbAchse_Buerste_030801.IsSichereGeschwindigkeit:= FALSE;

fbAchse_Buerste_030801.IsModuloAchse:= FALSE;
AxToNcEiS[AxId_Buerste_030801]:= bIW10SchwertbObZEndMax;

fbAchse_Buerste_030801.IwParameter:= AchsHandlingOberflaeche.AchsDaten[AxId_Buerste_030801].AchsParameter;

IF	P_ServiceAchsen.xAktiv[AxId_Buerste_030801]
THEN
	IF	fbEins[iEins_Id].OsNotHaltIstOk
	THEN
		fbAchse_Buerste_030801.IsStartEichen:= P_ServiceAchsen.xStart_Eichen[AxId_Buerste_030801];
		fbAchse_Buerste_030801.IsStartAufPosition:= P_ServiceAchsen.xStart_AufPosition[AxId_Buerste_030801];
	ELSE
		fbAchse_Buerste_030801.IsStartEichen:= FALSE;
		fbAchse_Buerste_030801.IsStartAufPosition:= FALSE;
	END_IF;

	fbAchse_Buerste_030801.IsReset:= P_ServiceAchsen.xStopAktiv_Reset[AxId_Buerste_030801];
	fbAchse_Buerste_030801.IsFreigabe:= P_ServiceAchsen.xFreigabe_Aktiv[AxId_Buerste_030801];
	fbAchse_Buerste_030801.IwZielSollwert:= P_ServiceAchsen.rZielSollwert[AxId_Buerste_030801];
	fbAchse_Buerste_030801.IwSpeed:= P_ServiceAchsen.uiSpeed[AxId_Buerste_030801];
ELSE
	IF	fbEins[iEins_Id].OsAutomatikEin
		OR	fbEins[iEins_Id].OsHandEin
			AND	astrGButtonManTransporte[ID_Buerste_030801_Positionieren].bSchalt
	THEN
		arGZielAchse[AxId_Buerste_030801]:= st_Achse_Buerste_030801.rZiel;
		arGSpeedAchse[AxId_Buerste_030801]:= st_Achse_Buerste_030801.rSpeed;
		abGStartAchse[AxId_Buerste_030801]:= st_Achse_Buerste_030801.xStartPosi;
		abGEichenAchse[AxId_Buerste_030801]:= st_Achse_Buerste_030801.xStartEichen;
		abGFreigabeAchse[AxId_Buerste_030801]:= st_Achse_Buerste_030801.xFreigabe;
	ELSE
		abGStartAchse[AxId_Buerste_030801]:= FALSE;
		abGEichenAchse[AxId_Buerste_030801]:= FALSE;
		abGFreigabeAchse[AxId_Buerste_030801]:= FALSE;
	END_IF;

	fbAchse_Buerste_030801.IsReset:=
		( astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
			OR	astrGButtonManTransporte[ID_Buerste_030801_Positionieren].bSchalt )
		AND 	strGLmHand.bI_Reset
		OR NOT fbEins[iEins_Id].OsAutomatikEin
			AND	GDat.TrE_Daten[TrEId_030801_Buerste].iReset <> 0;

	fbAchse_Buerste_030801.IsFreigabe:=
		( abGFreigabeAchse[AxId_Buerste_030801]
			AND NOT bFehlerFahrenFreigabe_Buerste_030801
			AND NOT bFehlerFahrenPlus_Buerste_030801
			AND NOT bFehlerFahrenMinus_Buerste_030801
			OR NOT fbAchse_Buerste_030801.IsAutomatik
				AND	fbAchse_Buerste_030801.IsHand )
		AND	fbEins[iEins_Id].OsNotHaltIstOk
		AND NOT fbAchse_Buerste_030801.OwOut.xAchseFehler
		AND	gxAlleTuerenGeschlossen_HardwareC[giSicher_C2_2]
		AND	gxAlleTuerenGeschlossenVerriegelt_HardwareC[giSicher_C2_2]
		AND	gxAlleTuerenGeschlossen_FreigabeAchseC[giSicher_C2_2];

	IF	fbEins[iEins_Id].OsAutomatikEin
		AND	arGSpeedAchse[AxId_Buerste_030801] > 0
	THEN
		fbAchse_Buerste_030801.IwSpeed:=
			LIMIT ( 0.1,arGSpeedAchse[AxId_Buerste_030801],100 );
	ELSE
		fbAchse_Buerste_030801.IwSpeed:= 100;
	END_IF;

	IF	fbAchse_Buerste_030801.IsSichereGeschwindigkeit
	THEN
		fbAchse_Buerste_030801.IwSpeed_HandSlow:= 50;
		fbAchse_Buerste_030801.IwSpeed_HandFast:= 100;
	ELSE
		fbAchse_Buerste_030801.IwSpeed_HandSlow:= 50;
		fbAchse_Buerste_030801.IwSpeed_HandFast:= 100;
	END_IF;

	fbAchse_Buerste_030801.IwBeschleunigung:= st_Achse_Buerste_030801.rBeschleunigung;
	fbAchse_Buerste_030801.IwVerzoegerung:= st_Achse_Buerste_030801.rVerzoegerung;
	fbAchse_Buerste_030801.IwRuck:= st_Achse_Buerste_030801.rRuck;

	fbAchse_Buerste_030801.IsStartEichen:=
		abGEichenAchse[AxId_Buerste_030801]
		AND NOT gxTestbetriebOhneMaschineAktiv;

	fbAchse_Buerste_030801.IwZielSollwert:=
		arGZielAchse[AxId_Buerste_030801];

	fbAchse_Buerste_030801.IsStartAufPosition:=
		abGStartAchse[AxId_Buerste_030801]
		AND 	fbAchse_Buerste_030801.IsFreigabe
		AND	fbAchse_Buerste_030801.OwOut.xAchseGeeicht;

	fbAchse_Buerste_030801.IsNeueGeschwindigkeit:= st_Achse_Buerste_030801.xStartNeueGeschwindigkeit;

	fbAchse_Buerste_030801.IsSonderGeschwindigkeit:= st_Achse_Buerste_030801.xSonderGeschwindigkeit;
	fbAchse_Buerste_030801.IwSonderGeschwindigkeit:= LREAL_TO_REAL ( st_Achse_Buerste_030801.lrSonderGeschwindigkeit );

	fbAchse_Buerste_030801.IsStartNeuesZielWaehrendPosi:= st_Achse_Buerste_030801.xStartNeuesZielWaehrendPosi;
	fbAchse_Buerste_030801.IwNeuesZielWaehrendPosi:= st_Achse_Buerste_030801.rNeuesZielWaehrendPosi;

	IF	fbAchse_Buerste_030801.xZielUmschiessen
	THEN
		st_Achse_Buerste_030801.xStartNeuesZielWaehrendPosi:= FALSE;
	END_IF;

	IF	fbAchse_Buerste_030801.xGeschwindigkeitUmschiessen
	THEN
		st_Achse_Buerste_030801.xStartNeueGeschwindigkeit:= FALSE;
	END_IF;
END_IF;

fbAchse_Buerste_030801();

IF	fbAchse_Buerste_030801.IsHand
	AND	fbAchse_Buerste_030801.IsReset
	OR NOT bAchseBeiStartGeeicht_Buerste_030801
THEN
	abGAchseNeuEichen[AxId_Buerste_030801]:= TRUE;
	bAchseBeiStartGeeicht_Buerste_030801:= TRUE;
END_IF;

(*------------------------------------------------------*)
(*  Handling: -> Jobverteiler                      	  *)
(*------------------------------------------------------*)

st_Achse_Buerste_030801.iID:= AxId_Buerste_030801;
st_Achse_Buerste_030801.xNichtEichen:= TRUE;
st_Achse_Buerste_030801.stVonAchse:= fbAchse_Buerste_030801.OwOut;
st_Achse_Buerste_030801.stVonAchse.xAchseGeeicht:=
	fbAchse_Buerste_030801.OwOut.xAchseGeeicht;

st_Achse_Buerste_030801.xBereit_FuerFahrjob:=
	fbAchse_Buerste_030801.OwOut.xAchseBereit
	AND NOT fbAchse_Buerste_030801.OwOut.xAchseFehler;



(*-----------------------------------------------------------------*)
(* Die globale Struktur für die Leuchtmelde Handtasten beschreiben *)
(*-----------------------------------------------------------------*)
IF	fbAchse_Buerste_030801.IsHand
	AND	astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
THEN
	IF NOT fbAchse_Buerste_030801.IsEsEndlagePlus
	THEN
		strGLmHand.bQ_Heben:= TRUE;
	END_IF;

	IF NOT fbAchse_Buerste_030801.IsEsEndlageMinus
	THEN
		strGLmHand.bQ_Senken:= TRUE;
	END_IF;
END_IF;



				(*---------------------------------------------------*)
				(*---------------------------------------------------*)
				(*           Freigabe Hardwaren / Software           *)
				(*---------------------------------------------------*)
				(*---------------------------------------------------*)

abGAchseDisable[AxId_Buerste_030801]:=
	GKoAnB[usiBuerste1].xInAktiv;

IF ( fbAchse_Buerste_030801.IsEsEndlageMinus
		OR 	fbAchse_Buerste_030801.IsEsEndlagePlus )
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	abGEndlageAngefahren[AxId_Buerste_030801]:= TRUE;
END_IF;

IF	strGLmHand.bI_QuittStoerung
		AND NOT fbAchse_Buerste_030801.IsEsEndlageMinus
		AND NOT fbAchse_Buerste_030801.IsEsEndlagePlus
	OR NOT fbEins[iEins_Id].OsSteuerspannungIstEin
THEN
	abGEndlageFreifahren[AxId_Buerste_030801]:= FALSE;
	abGEndlageAngefahren[AxId_Buerste_030801]:= FALSE;
END_IF;

abGEndlageFreifahren[AxId_Buerste_030801]:=
	fbEins[iEins_Id].OsHandEin
	AND	abGEndlageAngefahren[AxId_Buerste_030801];

aTonGReglerfreigabe[AxId_Buerste_030801].IN:=
	( NOT abGEndlageAngefahren[AxId_Buerste_030801]
		OR	abGEndlageFreifahren[AxId_Buerste_030801] )
	AND	bFreigabeFahren_Buerste_030801
	AND NOT abGAchseDisable[AxId_Buerste_030801]
	AND NOT AxFrNcFehler[AxId_Buerste_030801]
	AND NOT fbAchse_Buerste_030801.OsMFehlerMcBausteine
	AND NOT GKoAnB[usiBuerste1].xInAktiv;

aTonGReglerfreigabe[AxId_Buerste_030801](PT:= T#500MS);

abGReglerfreigabe[AxId_Buerste_030801]:=
	aTonGReglerfreigabe[AxId_Buerste_030801].Q
	OR	aTofGReglerfreigabe_Aus[AxId_Buerste_030801].Q
		AND	AxFrNcFahrePlus[AxId_Buerste_030801]
		AND NOT abGEndlageAngefahren[AxId_Buerste_030801]
	OR	aTofGReglerfreigabe_Aus[AxId_Buerste_030801].Q
		AND	AxFrNcFahreMinus[AxId_Buerste_030801]
		AND NOT abGEndlageAngefahren[AxId_Buerste_030801];

(* Ausschaltverzoegerung Reglerfreigabe *)
aTofGReglerfreigabe_Aus[AxId_Buerste_030801].IN:=
	aTonGReglerfreigabe[AxId_Buerste_030801].IN
		AND  	aTonGReglerfreigabe[AxId_Buerste_030801].Q;
aTofGReglerfreigabe_Aus[AxId_Buerste_030801](PT:= GKoAll.tBisReglerfreigabeAus_BeiNotHalt);

aTonGVorschubfreigabe[AxId_Buerste_030801](PT:= T#500MS);

aTonGVorschubfreigabe[AxId_Buerste_030801].IN:=
	abGReglerfreigabe[AxId_Buerste_030801];

abGVorschubfreigabe[AxId_Buerste_030801]:= aTonGVorschubfreigabe[AxId_Buerste_030801].Q;

abGVorschubfreigabePlus[AxId_Buerste_030801]:=
	NOT fbAchse_Buerste_030801.IsEsEndlagePlus
	OR	gxTestbetriebOhneMaschineAktiv;

abGVorschubfreigabeMinus[AxId_Buerste_030801]:=
	NOT fbAchse_Buerste_030801.IsEsEndlageMinus
	OR	gxTestbetriebOhneMaschineAktiv;

(*---------------------------------------------------*)
(* Achse: Freigabe Software              		     *)
(*---------------------------------------------------*)

AxToNcRfg[AxId_Buerste_030801]:=
	abGReglerfreigabe[AxId_Buerste_030801]
		AND NOT abGAchseDisable[AxId_Buerste_030801];

AxToNcVfp[AxId_Buerste_030801]:=
	abGVorschubfreigabe[AxId_Buerste_030801]
		AND	abGVorschubfreigabePlus[AxId_Buerste_030801]
		AND	aTonGReglerfreigabe[AxId_Buerste_030801].Q
		AND NOT abGAchseDisable[AxId_Buerste_030801];

AxToNcVfm[AxId_Buerste_030801]:=
	abGVorschubfreigabe[AxId_Buerste_030801]
		AND	abGVorschubfreigabeMinus[AxId_Buerste_030801]
		AND	aTonGReglerfreigabe[AxId_Buerste_030801].Q
		AND NOT abGAchseDisable[AxId_Buerste_030801];

(*---------------------------------------------------*)
(* Achse: Ausgänge an Systemmanager schreiben	     *)
(*---------------------------------------------------*)
bQW10SchwertbObZMinus		:= bIW10DirectionMinus;
bQW10SchwertbObZPlus		:= bIW10DirectionPlus;
bQW10SchwertbObZSchnell		:= bIW10VeloHigh;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_15_EilSchl_PosiBuerste_030801" Id="{95cff286-8dba-4323-ae18-692c9624bb18}">
      <Implementation>
        <ST><![CDATA[(*------------------------------------------------*)
(*------------------------------------------------*)
(* Achse: Jobhandling Positionierung		  *)
(*------------------------------------------------*)
(*------------------------------------------------*)
(*
IF GDat.TrE_Daten[TrEId_030801].iAnzahlPlatten > 0
THEN
	bKleinteilBuerste_030801:= FALSE;

	FOR i:= 1 TO LIMIT(1,GDat.TrE_Daten[TrEId_030801].iAnzahlPlatten,giMaxAnzahlPlattenProSpur)
	DO
		IF	(GDat.TrE_Daten[TrEId_030801].arLaenge[i] <= GKoAnB[usiBuerste1].rMinLaenge_Buerste
				OR GDat.TrE_Daten[TrEId_030801].arBreite[i] <= GKoAnB[usiBuerste1].rMinBreite_Buerste)
		THEN
			bKleinteilBuerste_030801:= TRUE;
			EXIT;
		END_IF;
	END_FOR;

	rDickeBuerste	:= GDat.TrE_Daten[TrEId_030801].arDicke[1];
	rBreiteBuerste	:= GDat.TrE_Daten[TrEId_030801].arBreite[1];

ELSIF ( GDat.TrE_Daten[TrEId_030801].iJobStatus = iDatenAktiv
		OR GDat.TrE_Daten[TrEId_030801].iJobStatus = iUebernahmeGestartet )
	AND GDat.TrE_Daten[TrEId_030801].iAnzahlPlatten = 0
THEN
	bKleinteilBuerste_030801:= FALSE;

	FOR i:= 1 TO LIMIT(1,fbJobBahn030801.strBahnjob_Aktiv.iAnzahlPlatten,giMaxAnzahlPlattenProSpur)
	DO
		IF	(fbJobBahn030801.strBahnjob_Aktiv.arLaenge[i] <= GKoAnB[usiBuerste1].rMinLaenge_Buerste
				OR fbJobBahn030801.strBahnjob_Aktiv.arBreite[i] <= GKoAnB[usiBuerste1].rMinBreite_Buerste)
		THEN
			bKleinteilBuerste_030801:= TRUE;
			EXIT;
		END_IF;
	END_FOR;

	rDickeBuerste	:= fbJobBahn030801.strBahnjob_Aktiv.arDicke[1];
	rBreiteBuerste	:= fbJobBahn030801.strBahnjob_Aktiv.arBreite[1];

ELSIF GDat.TrE_Daten[TrEId_030801].iJobStatus = iSekNichtAktiv
	AND GDat.TrE_Daten[TrEId_030801].iAnzahlPlatten = 0
	AND GDat.TrE_Daten[TrEId_070402].iAnzahlPlatten > 0
THEN

	bKleinteilBuerste_030801:= FALSE;

	FOR i:= 1 TO LIMIT(1,GDat.TrE_Daten[TrEId_070402].iAnzahlPlatten,giMaxAnzahlPlattenProSpur)
	DO
		IF	(GDat.TrE_Daten[TrEId_070402].arLaenge[i] <= GKoAnB[usiBuerste1].rMinLaenge_Buerste
				OR GDat.TrE_Daten[TrEId_070402].arBreite[i] <= GKoAnB[usiBuerste1].rMinBreite_Buerste)
		THEN
			bKleinteilBuerste_030801:= TRUE;
			EXIT;
		END_IF;
	END_FOR;

	rDickeBuerste	:= GDat.TrE_Daten[TrEId_070402].arDicke[1];
	rBreiteBuerste	:= GDat.TrE_Daten[TrEId_070402].arBreite[1];

ELSIF GDat.TrE_Daten[TrEId_030801].iAnzahlPlatten = 0
	AND	GDat.TrE_Daten[TrEId_030801].asBarcode[1] = ''
	AND 	strGHdshk_Bahn030801.str_BahnStatus = iAutomatikBereitJob
	AND NOT strGHdshk_Bahn030801.b_BahnBelegt
THEN
	bKleinteilBuerste_030801:= FALSE;
END_IF;

fbTOF_BuersteAntriebEin_030801(
		IN:= strGHdshk_Bahn030801.b_BahnVor,
		PT:= t#5s,
		Q=> ,
		ET=> );

fbEntprellenHoehenkontrolle_030801(
	IsSensor:= NOT bIW308Hoehenkontr
					AND FALSE,
	tEntprell_Belegt:= t#1s,
	tEntprell_Frei:= t#1s,
	OsSensor=> );

IF	fbEntprellenHoehenkontrolle_030801.OsSensor
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	bQ_MFehlerHoehenkontrolle030801:= TRUE;

ELSIF	bQ_MFehlerHoehenkontrolle030801
	AND (strGLmHand.bI_QuittStoerung
		OR (NOT fbEntprellenHoehenkontrolle_030801.OsSensor
			AND AxFrNc_fPosIst[AxId_Buerste_030801] >= (GDat.TrE_Daten[TrEId_030801].arDicke[1] - fbBuerste_030801.rToleranzBuerste)))
THEN
	bQ_MFehlerHoehenkontrolle030801:= FALSE;
END_IF
*)

fbBuerste_030801(
	sI_Name							:= '03.08.01_Buerste',
	uiI_AxId_Oben					:= AxId_Buerste_030801,
	uiI_ProId						:= P_BahnJob,
	bI_Hand							:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik					:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Reset						:= strGLmHand.bI_Reset
								 	 	AND ( astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
									 		 OR	astrGButtonManTransporte[ID_Buerste_030801_Positionieren].bSchalt ),
	bI_QuittStoerung				:= strGLmHand.bI_QuittStoerung
										OR fbEins[iEins_Id].OsImpulsSteuerspannungEin,
	bI_ZyklusBeenden				:= fbEins[iEins_Id].OsZyklusBeenden
										OR	Aufruf_Allgemein.bAnforderungAnlageAus,
	bI_StoerungBuerstenAntriebOben	:= NOT bIW10SchwertbuersteObBtp,
	bI_StoerungBuerstenAntriebUnten	:= NOT bIW10SchwertbuersteUntBtp,
	bI_StoerungAchse				:= FALSE,
	bI_SicherheitOK					:= gxSicherheitsBereichQuittiertC[giSicher_C2_2],
	bI_Kleinteile					:= bKleinteilBuerste_030801,
	bI_BuersteZu					:= TRUE,
	bI_BuersteAntriebEin			:= strGHdshk_Bahn030801.b_BahnVor,
	bI_TeileBuersten				:= TRUE,
	bI_TeileReinigen				:= fbTOF_BuersteAntriebEin_030801.Q,
	bI_IngromatEin					:= FALSE,
	bI_FahrtInGrundOhneEichen		:= astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
										OR	astrGButtonManTransporte[ID_Buerste_030801_Positionieren].bSchalt,
	bI_FreigabeAufPosition			:= fbBuerste_030801.rI_Dicke > 0,
	bI_EichenManuell				:= TRUE,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_ImpulsInit					:= bGImpulsInitSprache,
	rI_Dicke						:= fbJobBahn030801.strBahnjob_Aktiv.arDicke[1],
	rI_Breite						:= fbJobBahn030801.strBahnjob_Aktiv.arBreite[1], 
	strI_Para						:= GKoAnB[usiBuerste1],
	strIO_TrE_Extern 				:= GDat.TrE_Daten[TrEId_030801_Buerste],
	strIO_Hubachse_Oben				:= st_Achse_Buerste_030801,
	abQ_Blasventil					=> ,
	bQ_BuersteOeffnen				=> ,
	bQ_BuersteObenEin				=> bQW10SchwertbuersteObEin,
	bQ_BuersteUntenEin				=> bQW10SchwertbuersteUntEin,
	bQ_Reinigen						=> bQW10SchwertbReinigEin,
	bQ_Ingromat						=> ,
	bQ_ZyklusBeendet				=> ,
	bQ_Grundstellung				=> ,
	bQ_SchleichenEichenOben			=> ,
	bQ_IstwertSetzenOben=> ,
	bQ_MStoerungBuerstenAntriebOben=> ,
	bQ_MStoerungBuerstenAntriebUnten=> ,
	uiQ_Ablaufstatus=> , 
	strQ_Status=> );

	
IF	astrGButtonManTransporte[ID_Buerste_030801_Tippen].bSchalt
	OR	astrGButtonManTransporte[ID_Buerste_030801_Positionieren].bSchalt
THEN
	TZeile.Aktiv := TRUE;
	TZeile.Wert  := REAL_TO_INT(AxFrNc_fPosIst[AxId_Buerste_030801]);
END_IF;

IF	( fbBuerste_030801.strQ_Status = iAutomatikBereitJob
		AND	fbBuerste_030801.rI_Dicke > 0
		AND	st_Achse_Buerste_030801.xBereit_FuerFahrjob
		AND 	(( ABS (( fbBuerste_030801.rI_Dicke + fbBuerste_030801.strI_Para.rOeffnungswertKleinteile_Oben ) - fbBuerste_030801.rIstwert ) <= fbBuerste_030801.rToleranzBuerste
				AND	fbBuerste_030801.bI_Kleinteile )
			OR	( ABS ( fbBuerste_030801.rI_Dicke - fbBuerste_030801.rIstwert ) <= fbBuerste_030801.rToleranzBuerste
				AND NOT fbBuerste_030801.bI_Kleinteile )))
	OR	fbBuerste_030801.strI_Para.xInAktiv
THEN
	bBuersteInPostion_030801:= TRUE;
ELSE
	bBuersteInPostion_030801:= FALSE;
END_IF;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_16_Anschlag_030201" Id="{5026497d-32ea-4e16-bedb-a5a7932fdcee}">
      <Implementation>
        <ST><![CDATA[
fbAnschlag_030201(
	IsHand									:= fbEins[iEins_Id].OsHandEin
												OR ( NOT fbEins[iEins_Id].OsAutomatikEin
													AND ( GDat.TrE_Daten[TrEId_030201_Roll1].iReset <> 0
														OR	GDat.TrE_Daten[TrEId_030202_Roll2].iReset <> 0 ) ),
	IsAutomatik								:= fbEins[iEins_Id].OsAutomatikEin,
	IsReset									:= astrGButtonManTransporte[ID_Anschlag030201].bSchalt
												AND	strGLmHand.bI_Reset
												OR ( NOT fbEins[iEins_Id].OsAutomatikEin
													AND ( GDat.TrE_Daten[TrEId_030201_Roll1].iReset <> 0
														OR GDat.TrE_Daten[TrEId_030202_Roll2].iReset <> 0 )),
	IsQuittStoerung							:= strGLmHand.bI_QuittStoerung,
	IsTestbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	IsNotHaltIstOK							:= TRUE,
	IsFreigabe_Automatik					:= TRUE,
	IsStoerungAntrieb						:= strGStoerungen[iEins_Id].bStoerungDruckluft,
	IsSicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	IsTHandVor								:= astrGButtonManTransporte[ID_Anschlag030201].bSchalt
												AND	strGLmHand.bI_Senken,
	IsTHandZurueck							:= astrGButtonManTransporte[ID_Anschlag030201].bSchalt
												AND	strGLmHand.bI_Heben,
	IsDauerlauf_Aktivieren					:= astrGButtonManTransporte[ID_Anschlag030201].bSchalt
												AND	gxDauerlauf_Aktiv,
	IsHand_Takt								:= gTakt22,
	IsGrundstellung							:= bIW302Anschlag1Sek1GS
												AND NOT gxTestbetriebOhneMaschineAktiv
												OR	gxTestbetriebOhneMaschineAktiv
													AND	fbAnschlag_030201.OsGrundstellung,
	IsArbeitsstellung						:= bIW302Anschlag1Sek1AS
												AND NOT gxTestbetriebOhneMaschineAktiv
												OR	gxTestbetriebOhneMaschineAktiv
													AND	fbAnschlag_030201.OsArbeitsstellung,
	IwMode									:= 3,
	IwMode_NotHalt							:= 0,
	IwDoJob									:= strGHdshk_Anschlag030201.str_DoJob,
	IsFreigabeGrundposition					:= TRUE,
	IsGrundpositionArbeitsstellung			:= strGHdshk_Anschlag030201.b_Arbeitsstellung,
	IsKeineGrundposition					:= FALSE,
	IsOhneUeberwachung						:= FALSE,
	IsGesetzterOutMerken					:= TRUE,
	IsClearOut_NachJob						:= FALSE,
	IsOutAnlassen_Hand						:= TRUE,
	IsOutAnlassen_Stoerung					:= TRUE,
	IsPositionsUeberwachung					:= TRUE,
	IsBewegungsUeberwachung					:= TRUE,
	IwBisGrundstellung						:= strGHdshk_Anschlag030201.tBisGrundstellung,
	IwBisArbeitsstellung					:= strGHdshk_Anschlag030201.tBisArbeitsstellung,
	IwMaxLaufzeitZylinder					:= strGHdshk_Anschlag030201.tMaxLaufzeit,
	IwBisDrucklos							:= strGHdshk_Anschlag030201.tBisDrucklos,
	OsGrundstellung							=> bQW302AnschlagSek1GS,
	OsArbeitsstellung						=> bQW302AnschlagSek1AS,
	OwJobAktiv								=> strGHdshk_Anschlag030201.str_JobAktiv,
	OwStatus								=> strGHdshk_Anschlag030201.str_ZylinderStatus,
	OwAblaufStatus							=> strGHdshk_Anschlag030201.i_AblaufStatus,
	OsMStoerungAntrieb						=> strGHdshk_Anschlag030201.b_MStoerungAntrieb,
	OsMMaxLaufzeit_Ein						=> strGHdshk_Anschlag030201.b_MMaxLaufzeit_Ein,
	OsMMaxLaufzeit_Aus						=> strGHdshk_Anschlag030201.b_MMaxLaufzeit_Aus,
	OsMPositionsUeberwachung_Ein			=> strGHdshk_Anschlag030201.b_MPositionsUeberwachung_Ein,
	OsMPositionsUeberwachung_Aus			=> strGHdshk_Anschlag030201.b_MPositionsUeberwachung_Aus,
	OsMBewegungsUeberwachung				=> strGHdshk_Anschlag030201.b_MBewegungsUeberwachung);

	
strGHdshk_Anschlag030201.b_Arbeitsstellung:= fbAnschlag_030201.IsArbeitsstellung;
strGHdshk_Anschlag030201.b_Grundstellung:= fbAnschlag_030201.IsGrundstellung;

(* Jobstatus setzen *)

IF	strGHdshk_Anschlag030201.str_DoJob > eJob_KeinJob
	AND	strGHdshk_Anschlag030201.str_DoJob = strGHdshk_Anschlag030201.str_JobAktiv
	OR	fbAnschlag_030201.IsHand
		AND fbAnschlag_030201.IsReset
THEN
	strGHdshk_Anschlag030201.str_DoJob:= eJob_KeinJob;
END_IF;

(* Handbetrieb *)

IF	fbAnschlag_030201.IsHand
	AND	astrGButtonManTransporte[ID_Anschlag030201].bSchalt
THEN
	IF NOT fbAnschlag_030201.IsArbeitsstellung
	THEN
		strGLmHand.bQ_Senken:= TRUE;
	END_IF;

	IF NOT fbAnschlag_030201.IsGrundstellung
	THEN
		strGLmHand.bQ_Heben:= TRUE;
	END_IF;
END_IF;

(* Meldungen *)

fbMeldungenAnschlag_030201(
	uiI_FehlerId			:= 3000,
	strIO_GHdshk_Zylinder	:= strGHdshk_Anschlag030201,
	strIO_Stoerungen		:= strGStoerungen[iEins_Id]);


(* Ansteuerung Automatik *)

IF	strGHdshk_Anschlag030201 .str_DoJob = eJob_KeinJob
	AND	strGHdshk_Anschlag030201.str_JobAktiv = eJob_KeinJob
	AND	strGHdshk_Anschlag030201.str_ZylinderStatus = iAutomatikBereitJob
THEN
	IF  GDat.TrE_Daten[TrEId_030301].iJobStatus = iDatenAktiv
		AND	fbJobBahn030301.strBahnjob_Aktiv.diZielId = strGHdshk_Bahn030301.di_PlatzId
		AND	fbJobBahn030301.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030201_Roll1.di_PlatzId
		AND	strGHdshk_Bahn030201_Roll1.str_JobAktiv_AufBahn = eRolljobKeinJob
		AND strGHdshk_Bahn030201_Roll1.str_JobAktiv_VonBahn = eRolljobKeinJob
		AND	strGHdshk_Bahn030202_Roll2.str_JobAktiv_AufBahn = eRolljobKeinJob
		AND strGHdshk_Bahn030202_Roll2.str_JobAktiv_VonBahn = eRolljobKeinJob
		OR ( GDat.TrE_Daten[TrEId_030201_Roll1].iJobStatus = iDatenAktiv				(* Ein Job nach dem anderen *)
			AND NOT strGHdshk_Bahn030201_Roll1.b_BahnBelegt
			AND NOT strGHdshk_Bahn030202_Roll2.b_BahnBelegt
			AND GDat.TrE_Daten[TrEId_030201_Roll1].iAnzahlPlatten = 0
			AND GDat.TrE_Daten[TrEId_030202_Roll2].iAnzahlPlatten = 0
			AND	strGHdshk_Bahn030201_Roll1.i_BahnV2_AufBahn_BereitFuerJob = 0
			AND strGHdshk_Bahn030201_Roll1.i_BahnV2_VonBahn_BereitFuerJob = 0			
			AND	strGHdshk_Bahn030202_Roll2.i_BahnV2_AufBahn_BereitFuerJob = 0
			AND strGHdshk_Bahn030202_Roll2.i_BahnV2_VonBahn_BereitFuerJob = 0 )
		AND NOT strGHdshk_Anschlag030201.b_Grundstellung
	THEN
		strGHdshk_Anschlag030201.str_DoJob:= eJob_Grundstellung;

	ELSIF (( GDat.TrE_Daten[TrEId_030201_Roll1].iJobStatus = iDatenAktiv				(* Ein Job nach dem anderen *)
			AND	fbJobBahn030201.strBahnjob_Aktiv_Sek_1.diZielId = strGHdshk_Bahn030201_Roll1.di_PlatzId
			AND	fbJobBahn030201.strBahnjob_Aktiv_Sek_1.diQuellId = strGHdshk_Bahn030101.di_PlatzId
			AND NOT strGHdshk_Bahn030201_Roll1.b_BahnBelegt
			AND strGHdshk_Bahn030202_Roll2.b_BahnBelegt
			AND GDat.TrE_Daten[TrEId_030201_Roll1].iAnzahlPlatten = 0
			AND GDat.TrE_Daten[TrEId_030202_Roll2].iAnzahlPlatten <> 0
			AND	strGHdshk_Bahn030201_Roll1.i_BahnV2_AufBahn_BereitFuerJob = 0
			AND strGHdshk_Bahn030201_Roll1.i_BahnV2_VonBahn_BereitFuerJob = 0 )
		OR (strGHdshk_Bahn030201_Roll1.str_JobAktiv_AufBahn = eRolljobAufBahnPosiVorlauf		(* Ein Job mit vollständigem Bild *)	
			AND	strGHdshk_Bahn030202_Roll2.str_JobAktiv_AufBahn = eRolljobAufBahnPosiVorlauf
			AND GDat.TrE_Daten[TrEId_030201_Roll1].iAnzahlPlatten <> 0
			AND GDat.TrE_Daten[TrEId_030202_Roll2].iAnzahlPlatten <> 0
			AND strGHdshk_Bahn030202_Roll2.str_PlattenPos.arPlattenPos[1] >= strGHdshk_Bahn030202_Roll2.str_Bahndaten.rGesamtLaenge - 400 ))
		AND NOT strGHdshk_Anschlag030201.b_Arbeitsstellung
	THEN
		strGHdshk_Anschlag030201.str_DoJob:= eJob_Arbeitsstellung;
	END_IF;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_19_Bahn_040101_Extern" Id="{7f7243d1-1b70-4ef4-8364-9b495b96daff}">
      <Implementation>
        <ST><![CDATA[IF	fbJobBahn040101.bQ_GrundOK
THEN
	strGHdshk_BahnExternW2.str_BahnStatus:= GDat.TrE_Daten[TrEId_ExternW2].iAktivStatus;
ELSE
	strGHdshk_BahnExternW2.str_BahnStatus:= iAutomatikBereitJob;
END_IF;


IF	fbJobBahn040101.bKeinJobInJobzeile
	AND	fbJobBahn040101.iAnzahlJobsAktiv = 0
	AND	fbJobBahn040101.bQ_GrundOK
	AND NOT fbJobBahn040101.bQ_ResetAktiv
	AND	bFreigabeFuerJob_C2_2
	AND	GDat.TrE_Daten[TrEId_ExternW2].iJobStatus = iSekNichtAktiv
	AND	strGADSKomEmpfangVonPos0400.strJob_Daten.iJobStatus = iJobzeileAktiv
	AND	strGADSKomEmpfangVonPos0400.strJob_Daten.diQuellId = strGHdshk_Bahn030801.di_PlatzId
	AND	strGADSKomEmpfangVonPos0400.strJob_Daten.diZielId = strGHdshk_BahnExternW2.di_PlatzId
	AND	strGADSKomEmpfangVonPos0400.strJob_Daten.iAnzahlPlatten > 0
	AND	diJobIdAltExternW2 <> strGADSKomEmpfangVonPos0400.strJob_Daten.diJobID
	AND ( strGADSKomEmpfangVonPos0400.strTrE_Daten.iJobStatus = iDatenAktiv
		OR	strGADSKomEmpfangVonPos0400.strTrE_Daten.iJobStatus = iUebernahmeGestartet )
THEN
		fbJobDaten_In_ZielTrE(
			iMode_Copy			:= 3,
			iMode_Daten			:= 0,
			iBarcodePruefen		:= 0,
			Jobzeile			:= strGADSKomEmpfangVonPos0400.strJob_Daten,
			TrE_Daten			:= TrE_DatenJobExternW2 );

		fbQuellTrE_In_JobDaten(
			bI_JobSofortBeenden	:= FALSE,
			iI_AnzahlPlatten		:= TrE_DatenJobExternW2.iAnzahlPlatten,
			diI_QuellId			:= strGHdshk_Bahn030801.di_PlatzId,
			diI_ZielId			:= strGHdshk_BahnExternW2.di_PlatzId,
			strIO_TrE_Quelle		:= TrE_DatenJobExternW2,
			strIO_ArbTab_Job_Ziel	:= GJobDat.ArbTab_Job[TrEId_ExternW2] );

		diJobIdAltExternW2:= strGADSKomEmpfangVonPos0400.strJob_Daten.diJobID;
ELSE
		fbTrE_Daten_Leer(TrE_Daten:= TrE_DatenJobExternW2 );
END_IF;


IF	( GDat.TrE_Daten[TrEId_ExternW2].iJobStatus = iDatenAktiv
		OR GDat.TrE_Daten[TrEId_ExternW2].iJobStatus = iUebernahmeGestartet )
	AND	strGADSKomEmpfangVonPos0400.strJob_Daten.iJobStatus <> iJobzeileAktiv
	OR	GDat.TrE_Daten[TrEId_030801].iReset <> 0
THEN
	GDat.TrE_Daten[TrEId_ExternW2].iReset:= 1;
END_IF;



fbJobBahn040101(
	bI_MitPCJob                               := NOT gxTestbetriebOhnePCJobs,
	bI_FreigabeJobErzeugenSPS_Vorg            := gxTestbetriebOhnePCJobs,
	bI_FreigabeJobErzeugenSPS_Nachf           := FALSE,
	bI_FreigabeResetJob                       := astrGButtonManTransporte[ID_Bahn030801].bSchalt,
	bI_FreigabeResetBahn                      := astrGButtonManTransporte[ID_Bahn030801].bSchalt,
	bI_FreigabeFuerJob                        := bFreigabeFuerJob_C2_2,
	bI_ZusatzFreigabe                         := TRUE,
	bI_FreigabeFuerBuchen                     := bFreigabeFuerBuchen_C2_2,
	bI_MitAufBahnBeiVonBahn                   := FALSE,
	bI_Querfoerderer                          := FALSE,
	bI_FreigabeAnBahnanfang                   := FALSE,
	bI_FreigabeAnsBahnende                    := FALSE,
	bI_ScannenAktiv                           := FALSE,
	bI_Testbetrieb                            := gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner                     := FALSE,
	bI_BeiResetJoblisteLoeschen               := NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs                          := 1,
	iI_MaxAnzahlNoRead                        := 1,
	uiI_ProId                                 := P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal           := 0,
	diI_SperrenZielBahnNrVonPortal            := 0,
	tI_BisScannerDatenDa                      := t#0s,
	tI_Systemzeit                             := P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk                              := strGHdshk_BahnExternW2,
	strIO_GHdshk_Vorg                         := strGHdshk_Bahn030801,
	strIO_GHdshk_Nachf                        := strBahnaustausch_Leer,
	strIO_TrE                                 := GDat.TrE_Daten[TrEId_ExternW2],
	strIO_TrE_Vorg                            := GDat.TrE_Daten[TrEId_030801],
	strIO_TrE_Nachf                           := TrE_Daten_Leer,
	strIO_ArbTab_Job                          := GJobDat.ArbTab_Job[TrEId_ExternW2],
	strIO_GLmHand                             := strGLmHand,
	fbIO_Scanner                              := fbScanner_Leer,
	bQ_GrundOK                                => ,
	bQ_ResetAktiv                             => ,
	bQ_ScannerHatNichtGelesen                 => ,
	bQ_ScannerFalscherBarcode                 => ,
	bQ_ScannerMaxAnzahlNoRead                 => );


FOR i:= 0 TO giListenLaenge_Job
DO
	IF	GJobDat.ArbTab_Job[TrEId_ExternW2].JobZeile[i].iJobStatus = iJobzeileBeendet
	THEN
		GJobDat.ArbTab_Job[TrEId_ExternW2].JobZeile[i].iJobStatus:= iJobzeileGeloescht;
	END_IF
END_FOR;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_21_Bahn_030801" Id="{69b5b77c-8dda-4b29-80d1-61124a157f40}">
      <Implementation>
        <ST><![CDATA[
fbHardwareBahn030801(
	uiI_ProId									:= P_BahnHardware,
	uiI_TrEId									:= TrEId_030801,
	uiI_AxId									:= 0,
	uiI_FehlerId								:= 4650,
	sI_Bahnname									:= '03.08.01',
	bI_Hand										:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik								:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb								:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK								:= gxSicherheitsBereichQuittiertC[giSicher_C2_2],
	bI_FreigabeAutomatik						:= TRUE,
	bI_FreigabeHandVorZurueck					:= astrGButtonManTransporte[ID_Bahn030801].bSchalt,
	bI_BahnDarfZurueckHand						:= FALSE,
	bI_FreigabeReset							:= astrGButtonManTransporte[ID_Bahn030801].bSchalt,
	bI_StoerungAntrieb							:= NOT fbG6UmrichterBahn030801.bQ_Betriebsbereit
													OR NOT fbG6UmrichterBahn030802.bQ_Betriebsbereit,
	bI_Anfang									:= NOT bIW308Transp1Anf,
	bI_BelegtKontrolle							:= FALSE,
	bI_Ende										:= NOT bIW308Transp2End,
	bI_VorZurueckInversHand						:= FALSE,
	bI_AbbruchPosi_AufBahn						:= FALSE,
	bI_AbbruchPosi_VonBahn						:= FALSE,
	bI_BahnenGrundSchnell						:= FALSE,
	bI_GrundZurueck								:= FALSE,
	bI_OhneSynchronVonBahn						:= FALSE,
	bI_NachlaufAmAnfangEnde						:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben		:= FALSE,
	bI_ImpulsInit								:= bGImpulsInitSprache,
	bI_OhneImpulsgeber							:= FALSE,
	bI_AutoHandaufgabeAktiv						:= FALSE,
	bI_AutoHandentnahmeAktiv					:= FALSE,
	strIO_GHdshk								:= strGHdshk_Bahn030801,
	strIO_GHdshk_Vorg							:= strGHdshk_Bahn030701_Roll,
	strIO_GHdshk_Nachf							:= strGHdshk_BahnExternW2,
	strIO_GLmHand								:= strGLmHand,
	strIO_TrE									:= GDat.TrE_Daten[TrEId_030801],
	strIO_Stoerungen							:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn030801(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W308.EA1+S1-TA1',
	uiI_FxId							:= FxId_030801,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW308TA1Statuswort,
	usiI_Umrichterstatus				:= usiIW308TA1UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW308TA1Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= LREAL_TO_REAL(ABS(strGHdshk_Bahn030801.lr_Bahnspeed_Vorgabe)),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030801.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_2],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_2],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030801.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030801.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030801],
	iQ_Sollwert							=> uiQW308TA1Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030801.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW308TA1Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> ,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030801]:=
	fbG6UmrichterBahn030801.strQ_Umrichterstatus.sConverterState;

fbG6UmrichterBahn030802(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W308.EA2+S1-TA1',
	uiI_FxId							:= FxId_030802,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW308TA2Statuswort,
	usiI_Umrichterstatus				:= usiIW308TA2UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW308TA2Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= LREAL_TO_REAL(ABS(strGHdshk_Bahn030801.lr_Bahnspeed_Vorgabe)),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030801.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_2],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_2],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030801.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030801.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030802],
	iQ_Sollwert							=> uiQW308TA2Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030801.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW308TA2Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> ,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030802]:=
	fbG6UmrichterBahn030802.strQ_Umrichterstatus.sConverterState;
	
	
fbJobBahn030801(
	bI_MitPCJob								:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg			:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf			:= FALSE,
	bI_FreigabeResetJob						:= astrGButtonManTransporte[ID_Bahn030801].bSchalt,
	bI_FreigabeResetBahn					:= astrGButtonManTransporte[ID_Bahn030801].bSchalt,
	bI_FreigabeFuerJob						:= bFreigabeFuerJob_C2_2,
	bI_ZusatzFreigabe                         := GDat.TrE_Daten[TrEId_030801].iJobStatus = iDatenAktiv
												AND fbBuerste_030801.strQ_Status = iAutomatikBereitJob
												AND	fbBuerste_030801.bQ_Grundstellung
												AND ( ABS(fbBuerste_030801.rQ_Plattendicke - fbJobBahn030801.strBahnjob_Aktiv.arDicke[1]) <= fbBuerste_030801.rToleranzBuerste
														 OR REAL_TO_INT(fbAchse_Buerste_030801.rAxFrNc_fPosIst) >=  fbJobBahn030801.strBahnjob_Aktiv.arDicke[1]
															AND fbJobBahn030801.strBahnjob_Aktiv.arDicke[1] <= 13  )
												AND fbBuerste_030801.rQ_Plattendicke > 0
												AND NOT strGHdshk_Bahn030801.b_BahnBelegt
												OR	GKoAnB[usiBuerste1].xInAktiv,
	bI_FreigabeFuerBuchen					:= bFreigabeFuerBuchen_C2_2,
	bI_MitAufBahnBeiVonBahn					:= FALSE,
	bI_BilderSammeln						:= FALSE, 
	bI_Querfoerderer						:= FALSE,
	bI_FreigabeAnBahnanfang					:= FALSE,
	bI_FreigabeAnsBahnende					:= FALSE,
	bI_ScannenAktiv							:= FALSE,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner					:= FALSE,
	bI_BeiResetJoblisteLoeschen				:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs						:= 1,
	iI_MaxAnzahlNoRead						:= 1,
	uiI_ProId								:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal			:= 0,
	diI_SperrenZielBahnNrVonPortal			:= 0,
	tI_BisScannerDatenDa					:= t#0s,
	tI_Systemzeit							:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk							:= strGHdshk_Bahn030801,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn030701_Roll,
	strIO_GHdshk_Nachf						:= strGHdshk_BahnExternW2,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_030801],
	strIO_TrE_Vorg							:= GDat.TrE_Daten[TrEId_030701],
	strIO_TrE_Nachf							:= GDat.TrE_Daten[TrEId_ExternW2],
	strIO_ArbTab_Job						:= GJobDat.ArbTab_Job[TrEId_030801],
	strIO_GLmHand							:= strGLmHand,
	fbIO_Scanner							:= fbScanner_Leer,
	bQ_GrundOK								=> ,
	bQ_ResetAktiv							=> ,
	bQ_ScannerHatNichtGelesen				=> ,
	bQ_ScannerFalscherBarcode				=> ,
	bQ_ScannerMaxAnzahlNoRead				=> );
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_22_Bahn_030701" Id="{ced456a4-f4a5-4c44-8bf3-8ae1aa671b9c}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn030701(
			uiI_ProId:= P_BahnHardware,
			uiI_TrEId:= TrEId_030701,
			uiI_AxId_Roll1:= 0,
			uiI_AxId_Riem1:= 0,
			uiI_AxId_Riem2:= 0,
			uiI_FehlerId_Roll1:= 4500,
			uiI_FehlerId_Riem1:= 4550,
			uiI_FehlerId_Riem2:= 5600,
			sI_Bahnname:= '03.07.01',
			bI_Hand:= fbEins[iEins_Id].OsHandEin,
			bI_Automatik:= fbEins[iEins_Id].OsAutomatikEin,
			bI_Testbetrieb:= gxTestbetriebOhneMaschineAktiv,
			bI_SicherheitOK:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
			bI_FreigabeAutomatik:= TRUE,
			bI_FreigabeHandVorZurueck_Roll1:= astrGButtonManTransporte[ID_Bahn030701_Roll].bSchalt,
			bI_FreigabeHandVorZurueck_Riem1:= astrGButtonManTransporte[ID_Bahn030702_Riem1].bSchalt,
			bI_FreigabeHandVorZurueck_Riem2:= astrGButtonManTransporte[ID_Bahn030703_Riem2].bSchalt,
			bI_BahnDarfZurueckHand_Roll1:= FALSE,
			bI_BahnDarfZurueckHand_Riem1:= TRUE,
			bI_BahnDarfZurueckHand_Riem2:= TRUE,
			bI_FreigabeHandHebenSenkenSek1:= astrGButtonManTransporte[ID_Bahn030702_Riem1].bSchalt
									OR astrGButtonManTransporte[ID_Bahn030701_Roll].bSchalt,
			bI_FreigabeHandHebenSenkenSek2:= astrGButtonManTransporte[ID_Bahn030703_Riem2].bSchalt
									OR astrGButtonManTransporte[ID_Bahn030701_Roll].bSchalt,
			bI_FreigabeReset:= astrGButtonManTransporte[ID_Bahn030701_Roll].bSchalt
									OR astrGButtonManTransporte[ID_Bahn030702_Riem1].bSchalt
									OR astrGButtonManTransporte[ID_Bahn030703_Riem2].bSchalt,
			bI_StoerungAntrieb_Roll1:=NOT fbG6UmrichterBahn030701_Roll.bQ_Betriebsbereit ,
			bI_Anfang_Roll1:= NOT bIW307Transp11TeilVorAnschl OR NOT bIW307Transp12TeilVorAnschl,
			bI_Ende_Roll1:= NOT bIW308Transp1Anf,
			bI_AufFoerderhoehe_Roll1:= bIW307Transp2GS,
			bI_StoerungAntrieb_Riem1:= NOT fbG6UmrichterBahn030702_Riem1.bQ_Betriebsbereit,
			bI_Anfang_Riem1:= NOT bIW307Transp11Anf,
			bI_Ende_Riem1:= NOT bIW307Transp11TeilVorAnschl
								AND strGHdshk_Bahn030702_Riem1.r_PosiRestwert_AufBahn = 0,
			bI_AufFoerderhoehe_Riem1:= bIW307Transp2AS,
			bI_StoerungAntrieb_Riem2:= NOT fbG6UmrichterBahn030703_Riem2.bQ_Betriebsbereit,
			bI_Anfang_Riem2:= NOT bIW307Transp12Anf,
			bI_Ende_Riem2:= NOT bIW307Transp12TeilVorAnschl
								AND strGHdshk_Bahn030703_Riem2.r_PosiRestwert_AufBahn = 0,
			bI_AufFoerderhoehe_Riem2:= bIW307Transp2AS,
			bI_HebenSenkenInvers:= FALSE,
			bI_VorZurueckInversHand:= FALSE,
			bI_AbbruchPosi_AufBahn_Roll1:= FALSE,
			bI_AbbruchPosi_AufBahn_Riem1:= FALSE,
			bI_AbbruchPosi_AufBahn_Riem2:= FALSE,
			bI_AbbruchPosi_VonBahn_Roll1:= FALSE,
			bI_AbbruchPosi_VonBahn_Riem1:= FALSE,
			bI_AbbruchPosi_VonBahn_Riem2:= FALSE,
			bI_BahnenGrundSchnell_Sek_1:= FALSE,
			bI_BahnenGrundSchnell_Sek_2:= FALSE,
			bI_HubGrundWennFrei_Sek_1:= FALSE,
			bI_HubGrundWennFrei_Sek_2:= FALSE,
			bI_HubArbeitWennFrei_Sek_1:= FALSE,
			bI_HubArbeitWennFrei_Sek_2:= FALSE,
			bI_HubGrundWennBelegt_Sek_1:= FALSE,
			bI_HubGrundWennBelegt_Sek_2:= FALSE,
			bI_HubArbeitWennBelegt_Sek_1:= FALSE ,
			bI_HubArbeitWennBelegt_Sek_2:= FALSE ,
			bI_OhneSynchronVonBahn_Roll1:= FALSE,
			bI_OhneSynchronVonBahn_Riem1:= FALSE,
			bI_OhneSynchronVonBahn_Riem2:= FALSE,
			bI_VorgRiemHatNurEineSpur:= TRUE,
			bI_NachfRiemHatNurEineSpur:= FALSE,
			bI_MitUeberwachungTeilNichtFreigegeben:= FALSE,
			bI_ImpulsInit:= bGImpulsInitSprache,
			bI_OhneImpulsgeber_Roll1:= FALSE,
			bI_OhneImpulsgeber_Riem1:= FALSE,
			bI_OhneImpulsgeber_Riem2:= FALSE,
			strIO_GHdshk_Roll1:= strGHdshk_Bahn030701_Roll,
			strIO_GHdshk_Roll1_Vorg:= strBahnaustausch_Leer,
			strIO_GHdshk_Roll1_Nachf:= strGHdshk_Bahn030801,
			strIO_GHdshk_Riem1:= strGHdshk_Bahn030702_Riem1,
			strIO_GHdshk_Riem1_Vorg:= strGHdshk_Bahn030601,
			strIO_GHdshk_Riem1_Nachf:= strBahnaustausch_Leer,
			strIO_GHdshk_Riem2:=  strGHdshk_Bahn030703_Riem2,
			strIO_GHdshk_Riem2_Vorg:= strGHdshk_Bahn030601,
			strIO_GHdshk_Riem2_Nachf:= strBahnaustausch_Leer,
			strIO_GLmHand:= strGLmHand,
			strIO_TrE:= GDat.TrE_Daten[TrEId_030701],
			strIO_Stoerungen:=  strGStoerungen[iEins_Id],
			bQ_Sektion1AS=> bQW307Transp2AS,
			bQ_Sektion1GS=> bQW307Transp2GS,
			bQ_Sektion2AS=> bQW307Transp2AS,
			bQ_Sektion2GS=> bQW307Transp2GS );

fbG6UmrichterBahn030701_Roll(
			sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
			sI_PfadXML						:= sGG6XMLPfad,
			sI_PfadSonderDatensatz			:= '',
			sI_Name							:= '=W307.EA1+S1-TA1',
			uiI_DevID						:= uiIDevID,
			uiI_FxId						:= FxId_030701_Roll,
			uiI_ProId						:= P_Umrichter,
			diI_Statuswort					:= udiIW307TA1Statuswort,
			usiI_Umrichterstatus			:= usiIW307TA1UmrichterStatus,
			uiI_Datensatz					:= 1,
			iI_Istfrequenz					:= uiIW307TA1Istfrequenz,
			tI_ZeitBremse					:= t#500ms,
			rI_Beschleunigung				:= 0.1,
			rI_Verzoegerung					:= 0.1,
			rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn030701_Roll.lr_Bahnspeed_Vorgabe),
			rI_Maxgeschwindigkeit			:= strGHdshk_Bahn030701_Roll.str_BahnSpeed.rVmaxSpeed,
			bI_Aktiv						:= TRUE,
			bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
			bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
			bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
			bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
			bI_DrehrichtungVor				:= strGHdshk_Bahn030701_Roll.b_BahnVor,
			bI_DrehrichtungZurueck			:= strGHdshk_Bahn030701_Roll.b_BahnZurueck,
			bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
			bI_DrehInv						:= TRUE,
			uiQ_EtherCATAdresse			    => uiGEtherCATAdresse_KEB[FxId_030701_Roll],
			iQ_Sollwert						=> uiQW307TA1Sollw,
			lrQ_Istwert						=> strGHdshk_Bahn030701_Roll.lr_Bahnspeed_Ist,
			diQ_Control						=> udiQW307TA1Control,
			bQ_Betriebsbereit				=> ,
			bQ_BremseLoesen					=> bQW307Bremse1Loe,
			bQ_FehlerKEBDatenDownload		=> ,
			bQ_FehlerKeinIMAUmrichter		=> ,
			bQ_FehlerXMLDatei				=> ,
			bQ_FehlerParaLesen				=> ,
			bQ_FehlerParaSchreiben			=> ,
			bQ_FehlerAdresseLesen			=> ,
			strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030701_Roll]:=
			fbG6UmrichterBahn030701_Roll.strQ_Umrichterstatus.sConverterState;

fbG6UmrichterBahn030702_Riem1(
		sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
		sI_PfadXML						:= sGG6XMLPfad,
		sI_PfadSonderDatensatz			:= '',
		sI_Name							:= '=W307.EB11+S1-TA1',
		uiI_DevID						:= uiIDevID,
		uiI_FxId						:= FxId_030702_Riem1,
		uiI_ProId						:= P_Umrichter,
		diI_Statuswort					:= udiIW307TA11Statuswort,
		usiI_Umrichterstatus			:= usiIW307TA11UmrichterStatus,
		uiI_Datensatz					:= 1,
		iI_Istfrequenz					:= uiIW307TA11Istfrequenz,
		tI_ZeitBremse					:= t#500ms,
		rI_Beschleunigung				:= 0.1,
		rI_Verzoegerung					:= 0.1,
		rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn030702_Riem1.lr_Bahnspeed_Vorgabe),
		rI_Maxgeschwindigkeit			:= strGHdshk_Bahn030702_Riem1.str_BahnSpeed.rVmaxSpeed,
		bI_Aktiv						:= TRUE,
		bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
		bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
		bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
		bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
		bI_DrehrichtungVor				:= strGHdshk_Bahn030702_Riem1.b_BahnVor,
		bI_DrehrichtungZurueck				:= strGHdshk_Bahn030702_Riem1.b_BahnZurueck,
		bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
		bI_DrehInv						:= FALSE,//TRUE,
		uiQ_EtherCATAdresse			    	=> uiGEtherCATAdresse_KEB[FxId_030702_Riem1],
		iQ_Sollwert						=> uiQW307TA11Sollw,
		lrQ_Istwert						=> strGHdshk_Bahn030702_Riem1.lr_Bahnspeed_Ist,
		diQ_Control						=> udiQW307TA11Control,
		bQ_Betriebsbereit					=> ,
		bQ_BremseLoesen					=> ,
		bQ_FehlerKEBDatenDownload			=> ,
		bQ_FehlerKeinIMAUmrichter			=> ,
		bQ_FehlerXMLDatei					=> ,
		bQ_FehlerParaLesen				=> ,
		bQ_FehlerParaSchreiben				=> ,
		bQ_FehlerAdresseLesen				=> ,
		strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030702_Riem1]:=
		fbG6UmrichterBahn030702_Riem1.strQ_Umrichterstatus.sConverterState;


fbG6UmrichterBahn030703_Riem2(
		sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
		sI_PfadXML						:= sGG6XMLPfad,
		sI_PfadSonderDatensatz			:= '',
		sI_Name							:= '=W307.EB12+S1-TA1',
		uiI_DevID						:= uiIDevID,
		uiI_FxId						:= FxId_030703_Riem2,
		uiI_ProId						:= P_Umrichter,
		diI_Statuswort					:= udiIW307TA12Statuswort,
		usiI_Umrichterstatus			:= usiIW307TA12UmrichterStatus,
		uiI_Datensatz					:= 1,
		iI_Istfrequenz					:= uiIW307TA12Istfrequenz,
		tI_ZeitBremse					:= t#500ms,
		rI_Beschleunigung				:= 0.1,
		rI_Verzoegerung					:= 0.1,
		rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn030703_Riem2.lr_Bahnspeed_Vorgabe),
		rI_Maxgeschwindigkeit			:= strGHdshk_Bahn030703_Riem2.str_BahnSpeed.rVmaxSpeed,
		bI_Aktiv						:= TRUE,
		bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
		bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
		bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
		bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
		bI_DrehrichtungVor				:= strGHdshk_Bahn030703_Riem2.b_BahnVor,
		bI_DrehrichtungZurueck			:= strGHdshk_Bahn030703_Riem2.b_BahnZurueck,
		bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
		bI_DrehInv						:= FALSE,
		uiQ_EtherCATAdresse			    => uiGEtherCATAdresse_KEB[FxId_030703_Riem2],
		iQ_Sollwert						=> uiQW307TA12Sollw,
		lrQ_Istwert						=> strGHdshk_Bahn030703_Riem2.lr_Bahnspeed_Ist,
		diQ_Control						=> udiQW307TA12Control,
		bQ_Betriebsbereit				=> ,
		bQ_BremseLoesen					=> ,
		bQ_FehlerKEBDatenDownload		=> ,
		bQ_FehlerKeinIMAUmrichter		=> ,
		bQ_FehlerXMLDatei				=> ,
		bQ_FehlerParaLesen				=> ,
		bQ_FehlerParaSchreiben			=> ,
		bQ_FehlerAdresseLesen			=> ,
		strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030703_Riem2]:=
		fbG6UmrichterBahn030703_Riem2.strQ_Umrichterstatus.sConverterState;

fbJobBahn030701(
		bI_MitPCJob								:= TRUE,
		bI_FreigabeJobErzeugenSPS_Roll1_Vorg	:= FALSE,
		bI_FreigabeJobErzeugenSPS_Roll1_Nachf	:= FALSE,
		bI_FreigabeJobErzeugenSPS_Riem1_Vorg	:= FALSE,
		bI_FreigabeJobErzeugenSPS_Riem1_Nachf	:= FALSE,
		bI_FreigabeJobErzeugenSPS_Riem2_Vorg	:= FALSE,
		bI_FreigabeJobErzeugenSPS_Riem2_Nachf	:= FALSE,
		bI_FreigabeResetJob						:= astrGButtonManTransporte[ID_Bahn030701_Roll].bSchalt
													OR astrGButtonManTransporte[ID_Bahn030702_Riem1].bSchalt
													OR astrGButtonManTransporte[ID_Bahn030703_Riem2].bSchalt,
		bI_FreigabeResetBahn					:= astrGButtonManTransporte[ID_Bahn030701_Roll].bSchalt
													OR astrGButtonManTransporte[ID_Bahn030702_Riem1].bSchalt
													OR astrGButtonManTransporte[ID_Bahn030703_Riem2].bSchalt,
		bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
		bI_ZusatzFreigabe					:= TRUE,
		bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
		bI_MitAufBahnBeiVonBahn				:= FALSE,
		bI_Querfoerderer_Roll				:= FALSE,
		bI_Querfoerderer_Riem				:= TRUE,
		bI_FreigabeAnBahnanfang_Roll1		:= FALSE,
		bI_FreigabeAnsBahnende_Roll1		:= FALSE,
		bI_FreigabeAnBahnanfang_Riem1		:= FALSE,
		bI_FreigabeAnsBahnende_Riem1		:= FALSE,
		bI_FreigabeAnBahnanfang_Riem2		:= FALSE,
		bI_FreigabeAnsBahnende_Riem2		:= FALSE,
		bI_VorgRiemHatNurEineSpur			:= TRUE,
		bI_NachfRiemHatNurEineSpur			:= FALSE,
		bI_BahnHKStop_Roll1					:= FALSE,
		bI_BahnHKStop_Riem1					:= FALSE,
		bI_BahnHKStop_Riem2					:= FALSE,
		bI_ScannenAktiv_Roll1				:= FALSE,
		bI_ScannenAktiv_Riem1				:= FALSE,
		bI_ScannenAktiv_Riem2				:= FALSE,
		bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
		bI_FehlerQuittScanner_Roll1			:= FALSE,
		bI_FehlerQuittScanner_Riem1			:= FALSE,
		bI_FehlerQuittScanner_Riem2			:= FALSE,
		bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
		iI_MaxAnzahlJobs					:= 1,
		iI_MaxAnzahlNoRead					:= 1,
		uiI_ProId							:= P_BahnJob,
	(*	diI_SperrenQuellBahnNrVonPortal:= ,
		diI_SperrenZielBahnNrVonPortal:= , *)
		tI_BisScannerDatenDa				:= t#0s,
		tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
		strIO_GHdshk_Roll1					:= strGHdshk_Bahn030701_Roll,
		strIO_GHdshk_Roll1_Vorg				:= strBahnaustausch_Leer,
		strIO_GHdshk_Roll1_Nachf			:= strGHdshk_Bahn030801,
		strIO_GHdshk_Riem1					:= strGHdshk_Bahn030702_Riem1,
		strIO_GHdshk_Riem1_Vorg				:= strGHdshk_Bahn030601,
		strIO_GHdshk_Riem1_Nachf			:= strBahnaustausch_Leer,
		strIO_GHdshk_Riem2					:= strGHdshk_Bahn030703_Riem2,
		strIO_GHdshk_Riem2_Vorg				:= strGHdshk_Bahn030601,
		strIO_GHdshk_Riem2_Nachf			:= strBahnaustausch_Leer,
		strIO_TrE							:= GDat.TrE_Daten[TrEId_030701],
		strIO_TrE_Roll1_Vorg				:= TrE_Daten_Leer,
		strIO_TrE_Roll1_Nachf				:= GDat.TrE_Daten[TrEId_030801],
		strIO_TrE_Riem1_Vorg				:= GDat.TrE_Daten[TrEId_030601],
		strIO_TrE_Riem1_Nachf				:= TrE_Daten_Leer,
		strIO_TrE_Riem2_Vorg				:= GDat.TrE_Daten[TrEId_030601],
		strIO_TrE_Riem2_Nachf				:= TrE_Daten_Leer,
		strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_030701],
		strIO_ArbTab_Job_Riem1_Vorg			:= GJobDat.ArbTab_Job[TrEId_030601],
		strIO_ArbTab_Job_Riem2_Vorg			:= GJobDat.ArbTab_Job[TrEId_030601],
		strIO_ArbTab_Job_Riem1_Nachf		:= strArbTab_Job_Leer,
		strIO_ArbTab_Job_Riem2_Nachf		:= strArbTab_Job_Leer,
		strIO_GLmHand						:= strGLmHand,
		fbIO_Scanner_Roll1					:= fbScanner_Leer,
		fbIO_Scanner_Riem1					:= fbScanner_Leer,
		fbIO_Scanner_Riem2					:= fbScanner_Leer,
		bQ_GrundOK							=> ,
		bQ_ResetAktiv						=> ,
		bQ_ScannerHatNichtGelesen_Roll1		=> ,
		bQ_ScannerHatNichtGelesen_Riem1		=> ,
		bQ_ScannerHatNichtGelesen_Riem2		=> ,
		bQ_ScannerFalscherBarcode_Roll1		=> ,
		bQ_ScannerFalscherBarcode_Riem1		=> ,
		bQ_ScannerFalscherBarcode_Riem2		=> ,
		bQ_ScannerMaxAnzahlNoRead_Roll1		=> ,
		bQ_ScannerMaxAnzahlNoRead_Riem1		=> ,
		bQ_ScannerMaxAnzahlNoRead_Riem2		=> );
	
	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_23_Bahn_030601" Id="{f15e06cd-7317-40ac-afc9-fd4e73e365ae}">
      <Implementation>
        <ST><![CDATA[(*--------------------------*)
(* Sollposition Wippe       *)
(*--------------------------*)

IF	GDat.TrE_Daten[TrEId_030601].iJobStatus = iDatenAktiv
    	AND GDat.TrE_Daten[TrEId_030601].iAnzahlPlatten <= 2
THEN
	IF	fbJobBahn030601.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030501.di_PlatzId
	THEN
		iWippe_030601_SollAufPos:= 1;

	ELSIF fbJobBahn030601.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn031501.di_PlatzId
	THEN
		iWippe_030601_SollAufPos:= 2;

	ELSIF fbJobBahn030601.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn032501.di_PlatzId
	THEN
		iWippe_030601_SollAufPos:= 3;
	END_IF
END_IF;

(*--------------------------*)
(* Zwischenmerker schreiben *)
(*--------------------------*)

IF	iWippe_030601_IstAufPos = 1
THEN
	strGHdshk_Zwischen_030601:= strGHdshk_Bahn030501;
	strTrEDaten_Zwischen_030601:= GDat.TrE_Daten[TrEId_030501];

ELSIF iWippe_030601_IstAufPos = 2
THEN
	strGHdshk_Zwischen_030601:= strGHdshk_Bahn031501;
	strTrEDaten_Zwischen_030601:= GDat.TrE_Daten[TrEId_031501];

ELSIF iWippe_030601_IstAufPos = 3
THEN
	strGHdshk_Zwischen_030601:= strGHdshk_Bahn032501;
	strTrEDaten_Zwischen_030601:= GDat.TrE_Daten[TrEId_032501];
ELSE
	strGHdshk_Zwischen_030601:= strBahnaustausch_Leer;
	strTrEDaten_Zwischen_030601:= TrE_Daten_Leer;
END_IF;

(*----------------------------*)
(* Rampen koppeln zum Sammeln *)
(*----------------------------*)

IF	strGHdshk_Bahn030501.str_DoJob_VonBahn = eRolljobVonBahnPosiVorlauf
	OR	strGHdshk_Bahn030501.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
THEN
	strGHdshk_Bahn030601.str_BahnRampen.lrBeschleunigung_mms2:=
		strGHdshk_Bahn030501.str_BahnRampen.lrBeschleunigung_mms2;
		
ELSIF strGHdshk_Bahn031501.str_DoJob_VonBahn = eRolljobVonBahnPosiVorlauf
	OR	strGHdshk_Bahn031501.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
THEN
	strGHdshk_Bahn030601.str_BahnRampen.lrBeschleunigung_mms2:=
		strGHdshk_Bahn031501.str_BahnRampen.lrBeschleunigung_mms2;
		
ELSIF strGHdshk_Bahn032501.str_DoJob_VonBahn = eRolljobVonBahnPosiVorlauf
	OR	strGHdshk_Bahn032501.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
THEN
	strGHdshk_Bahn030601.str_BahnRampen.lrBeschleunigung_mms2:=
		strGHdshk_Bahn032501.str_BahnRampen.lrBeschleunigung_mms2;
END_IF;



fbHardwareBahn030601(
	uiI_ProId							:= P_BahnHardware,
	uiI_TrEId							:= TrEId_030601,
	uiI_AxId							:= 0,
	uiI_FehlerId						:= 4450,
	sI_Bahnname							:= '03.06.01',
	bI_Hand								:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik						:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK						:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik				:= TRUE,
	bI_FreigabeHandVorZurueck			:= astrGButtonManTransporte[ID_Bahn030601].bSchalt,
	bI_BahnDarfZurueckHand				:= TRUE,
	bI_FreigabeReset					:= astrGButtonManTransporte[ID_Bahn030601].bSchalt,
	bI_StoerungAntrieb					:= NOT fbG6UmrichterBahn030601.bQ_Betriebsbereit,
	bI_Anfang							:= ( NOT bIW306Transp1AnfSpur1
												OR NOT bIW306Transp1AnfSpur2 )
											OR strGHdshk_Bahn030501.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
												AND ( NOT bIW305Transp1EndSpur1
														OR NOT bIW305Transp1EndSpur2 )
											OR strGHdshk_Bahn031501.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
												AND ( NOT bIW315Transp1EndSpur1
														OR NOT bIW315Transp1EndSpur2 )
											OR strGHdshk_Bahn032501.str_JobAktiv_VonBahn = eRolljobVonBahnPosiVorlauf
												AND ( NOT bIW325Transp1EndSpur1
														OR NOT bIW325Transp1EndSpur2 ),
										(*	OR	strGHdshk_Bahn030601.str_JobAktiv_AufBahn = eRolljobAnBahnanfangRuecklauf
												AND NOT strGHdshk_Bahn030601.b_LiEnde, *)
	bI_BelegtKontrolle					:= FALSE,
	bI_Ende								:= NOT bIW307Transp11Anf
												OR NOT bIW307Transp12Anf,//OR bIW307Transp12Anf,
	bI_VorZurueckInversHand				:= FALSE,
	bI_AbbruchPosi_AufBahn				:= FALSE,
	bI_AbbruchPosi_VonBahn				:= FALSE,
	bI_BahnenGrundSchnell				:= FALSE,
	bI_GrundZurueck						:= FALSE,
	bI_OhneSynchronVonBahn				:= FALSE,
	bI_NachlaufAmAnfangEnde				:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben		:= FALSE,
	bI_ImpulsInit						:= bGImpulsInitSprache,
	bI_OhneImpulsgeber					:= FALSE,
	bI_AutoHandaufgabeAktiv				:= FALSE,
	bI_AutoHandentnahmeAktiv			:= FALSE,
	strIO_GHdshk						:= strGHdshk_Bahn030601,
	strIO_GHdshk_Vorg					:= strGHdshk_Zwischen_030601,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030702_Riem1,
	strIO_GLmHand						:= strGLmHand,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_030601],
	strIO_Stoerungen					:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn030601(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W306.EA1+S1-TA1',
	uiI_FxId							:= FxId_030601,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW306TA1Statuswort,
	usiI_Umrichterstatus				:= usiIW306TA1UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW306TA1Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= LREAL_TO_REAL(ABS(strGHdshk_Bahn030601.lr_Bahnspeed_Vorgabe)),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030601.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030601.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030601.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= FALSE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030601],
	iQ_Sollwert							=> uiQW306TA1Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030601.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW306TA1Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> ,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );


fbJobBahn030601(
	bI_MitPCJob							:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn030601].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn030601].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C1_1,
	bI_ZusatzFreigabe					:= GDat.TrE_Daten[TrEId_030601].iJobStatus = iDatenAktiv
											AND  bFreigabeJob_Wippe_030601
											AND ( bSpaltlichschrankenOK_Wippe_030601
												OR	iWippe_030601_IstAufPos = iWippe_030601_SollAufPos )
											AND ( fbJobBahn030601.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030501.di_PlatzId
													AND	iWippe_030601_IstAufPos = 1
												OR	fbJobBahn030601.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn031501.di_PlatzId
													AND	iWippe_030601_IstAufPos = 2
												OR	fbJobBahn030601.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn032501.di_PlatzId
													AND	iWippe_030601_IstAufPos = 3 )
											AND strGHdshk_Zwischen_030601.di_PlatzId = fbJobBahn030601.strBahnjob_Aktiv.diQuellId,					
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C1_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_BilderSammeln					:= fbJobBahn030601.strBahnjob_Aktiv.aiPos_X[1] <= 1
											AND	fbJobBahn030601.strBahnjob_Aktiv.aiPos_X[2] <= 1
											AND	fbJobBahn030601.strBahnjob_Aktiv.aiPos_X[3] <= 1
											AND	fbJobBahn030601.strBahnjob_Aktiv.aiPos_X[4] <= 1
											AND	fbJobBahn030601.strBahnjob_Aktiv.arLaenge[1] <= strGHdshk_Bahn030601.str_Bahndaten.rRastermass_Laenge_LaengstePlatte
											AND	fbJobBahn030601.strBahnjob_Aktiv.arLaenge[2] <= strGHdshk_Bahn030601.str_Bahndaten.rRastermass_Laenge_LaengstePlatte ,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= T#0S,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn030601,
	strIO_GHdshk_Vorg					:= strGHdshk_Zwischen_030601,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030702_Riem1,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_030601],
	strIO_TrE_Vorg						:= strTrEDaten_Zwischen_030601,
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_030701],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_030601],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,
	bQ_ScannerFalscherBarcode			=> ,
	bQ_ScannerMaxAnzahlNoRead			=> );

(*---------------------------------*)
(* Zwischenmerker zurueckschreiben *)
(*---------------------------------*)

IF	iWippe_030601_IstAufPos = 1
THEN
	strGHdshk_Bahn030501:= strGHdshk_Zwischen_030601;
	GDat.TrE_Daten[TrEId_030501]:= strTrEDaten_Zwischen_030601;

ELSIF iWippe_030601_IstAufPos = 2
THEN
	strGHdshk_Bahn031501:= strGHdshk_Zwischen_030601;
	GDat.TrE_Daten[TrEId_031501]:= strTrEDaten_Zwischen_030601;

ELSIF iWippe_030601_IstAufPos = 3
THEN
	strGHdshk_Bahn032501:= strGHdshk_Zwischen_030601;
	GDat.TrE_Daten[TrEId_032501]:= strTrEDaten_Zwischen_030601;

END_IF;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_24_Bahn_032501" Id="{5df1705f-23e7-44f1-9565-6ab8653422b0}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn032501(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_032501,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4900,
	sI_Bahnname								:= '03.25.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn032501].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn032501].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn032501.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW325Transp1AnfSpur1
													OR NOT bIW325Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW325Transp1EndSpur1
													OR NOT bIW325Transp1EndSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE,
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber						:= FALSE,
	strIO_GHdshk							:= strGHdshk_Bahn032501,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn031401,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn030601,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_032501],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn032501(
	sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML						:= sGG6XMLPfad,
	sI_PfadSonderDatensatz			:= '',
	sI_Name							:= '=W325.EA1+S1-TA1',
	uiI_DevID						:= uiIDevID,
	uiI_FxId						:= FxId_032501,
	uiI_ProId						:= P_Umrichter,
	diI_Statuswort					:= udiIW325TA1Statuswort,
	usiI_Umrichterstatus			:= usiIW325TA1UmrichterStatus,
	uiI_Datensatz					:= 1,
	iI_Istfrequenz					:= uiIW325TA1Istfrequenz,
	tI_ZeitBremse					:= t#500ms,
	rI_Beschleunigung				:= 0.1,
	rI_Verzoegerung					:= 0.1,
	rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn032501.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit			:= strGHdshk_Bahn032501.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv						:= TRUE,
	bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor				:= strGHdshk_Bahn032501.b_BahnVor,
	bI_DrehrichtungZurueck			:= strGHdshk_Bahn032501.b_BahnZurueck,
	bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv						:= FALSE,
	uiQ_EtherCATAdresse			  	=> uiGEtherCATAdresse_KEB[FxId_032501],
	iQ_Sollwert						=> uiQW325TA1Sollw,
	lrQ_Istwert						=> strGHdshk_Bahn032501.lr_Bahnspeed_Ist,
	diQ_Control						=> udiQW325TA1Control,
	bQ_Betriebsbereit				=> ,
	bQ_BremseLoesen					=> ,
	bQ_FehlerKEBDatenDownload		=> ,
	bQ_FehlerKeinIMAUmrichter		=> ,
	bQ_FehlerXMLDatei				=> ,
	bQ_FehlerParaLesen				=> ,
	bQ_FehlerParaSchreiben			=> ,
	bQ_FehlerAdresseLesen			=> ,
	strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_032501]:=
	fbG6UmrichterBahn032501.strQ_Umrichterstatus.sConverterState;

fbJobBahn032501(
	bI_MitPCJob							:= FALSE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= TRUE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn032501].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn032501].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe					:= TRUE,
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_BilderSammeln					:= FALSE, 
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= t#0s,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn032501,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn031401,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030601,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_032501],
	strIO_TrE_Vorg						:= GDat.TrE_Daten[TrEId_031401],
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_030601],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_032501],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,);]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_25_Bahn_032401" Id="{9f9587cf-30ae-4442-9fe0-f358c9f1b81b}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn032401(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_032401,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4850,
	sI_Bahnname								:= '03.24.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn032401].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn032401].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn032401.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW324Transp1AnfSpur1
													OR NOT bIW324Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW325Transp1AnfSpur1
													OR NOT bIW325Transp1AnfSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE,
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber						:= FALSE,
	strIO_GHdshk							:= strGHdshk_Bahn032401,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn030301,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn032501,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_032401],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn032401(
	sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML						:= sGG6XMLPfad,
	sI_PfadSonderDatensatz			:= '',
	sI_Name							:= '=W324.EA1+S1-TA1',
	uiI_DevID						:= uiIDevID,
	uiI_FxId						:= FxId_032401,
	uiI_ProId						:= P_Umrichter,
	diI_Statuswort					:= udiIW324TA1Statuswort,
	usiI_Umrichterstatus			:= usiIW324TA1UmrichterStatus,
	uiI_Datensatz					:= 1,
	iI_Istfrequenz					:= uiIW324TA1Istfrequenz,
	tI_ZeitBremse					:= t#500ms,
	rI_Beschleunigung				:= 0.1,
	rI_Verzoegerung					:= 0.1,
	rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn032401.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit			:= strGHdshk_Bahn032401.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv						:= TRUE,
	bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor				:= strGHdshk_Bahn032401.b_BahnVor,
	bI_DrehrichtungZurueck			:= strGHdshk_Bahn032401.b_BahnZurueck,
	bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv						:= TRUE,
	uiQ_EtherCATAdresse			  	=> uiGEtherCATAdresse_KEB[FxId_032401],
	iQ_Sollwert						=> uiQW324TA1Sollw,
	lrQ_Istwert						=> strGHdshk_Bahn032401.lr_Bahnspeed_Ist,
	diQ_Control						=> udiQW324TA1Control,
	bQ_Betriebsbereit				=> ,
	bQ_BremseLoesen					=> ,
	bQ_FehlerKEBDatenDownload		=> ,
	bQ_FehlerKeinIMAUmrichter		=> ,
	bQ_FehlerXMLDatei				=> ,
	bQ_FehlerParaLesen				=> ,
	bQ_FehlerParaSchreiben			=> ,
	bQ_FehlerAdresseLesen			=> ,
	strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_032401]:=
	fbG6UmrichterBahn032401.strQ_Umrichterstatus.sConverterState;

fbJobBahn032401(
	bI_MitPCJob							:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn032401].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn032401].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe					:= bFreigabeJob_Wippe_030301 
												AND iWippe_030301_IstAufPos = 3,
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_BilderSammeln					:= FALSE,
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= t#0s,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn032401,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn030301,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn032501,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_032401],
	strIO_TrE_Vorg						:= GDat.TrE_Daten[TrEId_030301],
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_032501],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_032401],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,
	bQ_ScannerFalscherBarcode			=> ,
	bQ_ScannerMaxAnzahlNoRead			=> );
	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_26_Bahn_031501" Id="{8139a2b4-c27f-4edd-8323-796654634328}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn031501(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_031501,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4800,
	sI_Bahnname								:= '03.15.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn031501].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn031501].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn031501.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW315Transp1AnfSpur1
													OR NOT bIW315Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW315Transp1EndSpur1
													OR NOT bIW315Transp1EndSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE,
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber						:= FALSE,
	strIO_GHdshk							:= strGHdshk_Bahn031501,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn031401,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn030601,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_031501],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn031501(
	sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML						:= sGG6XMLPfad,
	sI_PfadSonderDatensatz			:= '',
	sI_Name							:= '=W315.EA1+S1-TA1',
	uiI_DevID						:= uiIDevID,
	uiI_FxId						:= FxId_031501,
	uiI_ProId						:= P_Umrichter,
	diI_Statuswort					:= udiIW315TA1Statuswort,
	usiI_Umrichterstatus			:= usiIW315TA1UmrichterStatus,
	uiI_Datensatz					:= 1,
	iI_Istfrequenz					:= uiIW315TA1Istfrequenz,
	tI_ZeitBremse					:= t#500ms,
	rI_Beschleunigung				:= 0.1,
	rI_Verzoegerung					:= 0.1,
	rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn031501.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit			:= strGHdshk_Bahn031501.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv						:= TRUE,
	bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor				:= strGHdshk_Bahn031501.b_BahnVor,
	bI_DrehrichtungZurueck			:= strGHdshk_Bahn031501.b_BahnZurueck,
	bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv						:= false,
	uiQ_EtherCATAdresse			  	=> uiGEtherCATAdresse_KEB[FxId_031501],
	iQ_Sollwert						=> uiQW315TA1Sollw,
	lrQ_Istwert						=> strGHdshk_Bahn031501.lr_Bahnspeed_Ist,
	diQ_Control						=> udiQW315TA1Control,
	bQ_Betriebsbereit				=> ,
	bQ_BremseLoesen					=> ,
	bQ_FehlerKEBDatenDownload		=> ,
	bQ_FehlerKeinIMAUmrichter		=> ,
	bQ_FehlerXMLDatei				=> ,
	bQ_FehlerParaLesen				=> ,
	bQ_FehlerParaSchreiben			=> ,
	bQ_FehlerAdresseLesen			=> ,
	strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_031501]:=
	fbG6UmrichterBahn031501.strQ_Umrichterstatus.sConverterState;

fbJobBahn031501(
	bI_MitPCJob							:= FALSE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= TRUE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn031501].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn031501].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe					:= TRUE,
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_BilderSammeln					:= FALSE, 
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= t#0s,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn031501,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn031401,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030601,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_031501],
	strIO_TrE_Vorg						:= GDat.TrE_Daten[TrEId_031401],
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_030601],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_031501],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,);]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_27_Bahn_031401" Id="{a4b9da01-724f-4f7e-b537-377fa21c8f8f}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn031401(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_031401,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4750,
	sI_Bahnname								:= '03.14.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn031401].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn031401].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn031401.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW314Transp1AnfSpur1
													OR NOT bIW314Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW315Transp1AnfSpur1
													OR NOT bIW315Transp1AnfSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE,
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber						:= FALSE,
	strIO_GHdshk							:= strGHdshk_Bahn031401,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn030301,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn031501,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_031401],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn031401(
	sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML						:= sGG6XMLPfad,
	sI_PfadSonderDatensatz			:= '',
	sI_Name							:= '=W314.EA1+S1-TA1',
	uiI_DevID						:= uiIDevID,
	uiI_FxId						:= FxId_031401,
	uiI_ProId						:= P_Umrichter,
	diI_Statuswort					:= udiIW314TA1Statuswort,
	usiI_Umrichterstatus			:= usiIW314TA1UmrichterStatus,
	uiI_Datensatz					:= 1,
	iI_Istfrequenz					:= uiIW314TA1Istfrequenz,
	tI_ZeitBremse					:= t#500ms,
	rI_Beschleunigung				:= 0.1,
	rI_Verzoegerung					:= 0.1,
	rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn031401.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit			:= strGHdshk_Bahn031401.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv						:= TRUE,
	bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor				:= strGHdshk_Bahn031401.b_BahnVor,
	bI_DrehrichtungZurueck			:= strGHdshk_Bahn031401.b_BahnZurueck,
	bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv						:= TRUE,
	uiQ_EtherCATAdresse			  	=> uiGEtherCATAdresse_KEB[FxId_031401],
	iQ_Sollwert						=> uiQW314TA1Sollw,
	lrQ_Istwert						=> strGHdshk_Bahn031401.lr_Bahnspeed_Ist,
	diQ_Control						=> udiQW314TA1Control,
	bQ_Betriebsbereit				=> ,
	bQ_BremseLoesen					=> ,
	bQ_FehlerKEBDatenDownload		=> ,
	bQ_FehlerKeinIMAUmrichter		=> ,
	bQ_FehlerXMLDatei				=> ,
	bQ_FehlerParaLesen				=> ,
	bQ_FehlerParaSchreiben			=> ,
	bQ_FehlerAdresseLesen			=> ,
	strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_031401]:=
	fbG6UmrichterBahn031401.strQ_Umrichterstatus.sConverterState;

fbJobBahn031401(
	bI_MitPCJob							:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn031401].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn031401].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe					:= bFreigabeJob_Wippe_030301 
												AND iWippe_030301_IstAufPos = 2,
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_BilderSammeln					:= FALSE,
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= t#0s,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn031401,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn030301,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn031501,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_031401],
	strIO_TrE_Vorg						:= GDat.TrE_Daten[TrEId_030301],
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_031501],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_031401],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,
	bQ_ScannerFalscherBarcode			=> ,
	bQ_ScannerMaxAnzahlNoRead			=> );
	
	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_28_Bahn_030501" Id="{8831c2a4-d856-4415-9e9d-4f0726e8c5c6}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn030501(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_030501,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4400,
	sI_Bahnname								:= '03.05.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn030501].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn030501].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn030501.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW305Transp1AnfSpur1
													OR NOT bIW305Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW305Transp1EndSpur1
													OR NOT bIW305Transp1EndSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE,
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber						:= FALSE,
	strIO_GHdshk							:= strGHdshk_Bahn030501,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn030401,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn030601,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_030501],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn030501(
	sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML						:= sGG6XMLPfad,
	sI_PfadSonderDatensatz			:= '',
	sI_Name							:= '=W305.EA1+S1-TA1',
	uiI_DevID						:= uiIDevID,
	uiI_FxId						:= FxId_030501,
	uiI_ProId						:= P_Umrichter,
	diI_Statuswort					:= udiIW305TA1Statuswort,
	usiI_Umrichterstatus			:= usiIW305TA1UmrichterStatus,
	uiI_Datensatz					:= 1,
	iI_Istfrequenz					:= uiIW305TA1Istfrequenz,
	tI_ZeitBremse					:= t#500ms,
	rI_Beschleunigung				:= 0.1,
	rI_Verzoegerung					:= 0.1,
	rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn030501.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit			:= strGHdshk_Bahn030501.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv						:= TRUE,
	bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor				:= strGHdshk_Bahn030501.b_BahnVor,
	bI_DrehrichtungZurueck			:= strGHdshk_Bahn030501.b_BahnZurueck,
	bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv						:= FALSE,
	uiQ_EtherCATAdresse			  	=> uiGEtherCATAdresse_KEB[FxId_030501],
	iQ_Sollwert						=> uiQW305TA1Sollw,
	lrQ_Istwert						=> strGHdshk_Bahn030501.lr_Bahnspeed_Ist,
	diQ_Control						=> udiQW305TA1Control,
	bQ_Betriebsbereit				=> ,
	bQ_BremseLoesen					=> ,
	bQ_FehlerKEBDatenDownload		=> ,
	bQ_FehlerKeinIMAUmrichter		=> ,
	bQ_FehlerXMLDatei				=> ,
	bQ_FehlerParaLesen				=> ,
	bQ_FehlerParaSchreiben			=> ,
	bQ_FehlerAdresseLesen			=> ,
	strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030501]:=
	fbG6UmrichterBahn030501.strQ_Umrichterstatus.sConverterState;

fbJobBahn030501(
	bI_MitPCJob							:= FALSE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= TRUE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn030501].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn030501].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe					:= TRUE,
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_BilderSammeln					:= FALSE, 
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= t#0s,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn030501,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn030401,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030601,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_030501],
	strIO_TrE_Vorg						:= GDat.TrE_Daten[TrEId_030401],
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_030601],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_030501],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,
	bQ_ScannerFalscherBarcode			=> ,
	bQ_ScannerMaxAnzahlNoRead			=> );
	
	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_29_Bahn_030401" Id="{2d936456-18a7-4f83-9b31-97562463a4c1}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn030401(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_030401,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4350,
	sI_Bahnname								:= '03.04.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn030401].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn030401].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn030401.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW304Transp1AnfSpur1
													OR NOT bIW304Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW305Transp1AnfSpur1
													OR NOT bIW305Transp1AnfSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE,
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber						:= FALSE,
	strIO_GHdshk							:= strGHdshk_Bahn030401,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn030301,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn030501,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_030401],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn030401(
	sI_NetIDMaster					:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML						:= sGG6XMLPfad,
	sI_PfadSonderDatensatz			:= '',
	sI_Name							:= '=W304.EA1+S1-TA1',
	uiI_DevID						:= uiIDevID,
	uiI_FxId						:= FxId_030401,
	uiI_ProId						:= P_Umrichter,
	diI_Statuswort					:= udiIW304TA1Statuswort,
	usiI_Umrichterstatus			:= usiIW304TA1UmrichterStatus,
	uiI_Datensatz					:= 1,
	iI_Istfrequenz					:= uiIW304TA1Istfrequenz,
	tI_ZeitBremse					:= t#500ms,
	rI_Beschleunigung				:= 0.1,
	rI_Verzoegerung					:= 0.1,
	rI_Sollgeschwindigkeit			:= ABS(strGHdshk_Bahn030401.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit			:= strGHdshk_Bahn030401.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv						:= TRUE,
	bI_FehlerQuitt					:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb					:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter				:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe				:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor				:= strGHdshk_Bahn030401.b_BahnVor,
	bI_DrehrichtungZurueck			:= strGHdshk_Bahn030401.b_BahnZurueck,
	bI_EtherCATOK					:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv						:= TRUE,
	uiQ_EtherCATAdresse			  	=> uiGEtherCATAdresse_KEB[FxId_030401],
	iQ_Sollwert						=> uiQW304TA1Sollw,
	lrQ_Istwert						=> strGHdshk_Bahn030401.lr_Bahnspeed_Ist,
	diQ_Control						=> udiQW304TA1Control,
	bQ_Betriebsbereit				=> ,
	bQ_BremseLoesen					=> ,
	bQ_FehlerKEBDatenDownload		=> ,
	bQ_FehlerKeinIMAUmrichter		=> ,
	bQ_FehlerXMLDatei				=> ,
	bQ_FehlerParaLesen				=> ,
	bQ_FehlerParaSchreiben			=> ,
	bQ_FehlerAdresseLesen			=> ,
	strQ_Umrichterstatus			=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030401]:=
	fbG6UmrichterBahn030401.strQ_Umrichterstatus.sConverterState;

fbJobBahn030401(
	bI_MitPCJob							:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf		:= FALSE,
	bI_FreigabeResetJob					:= astrGButtonManTransporte[ID_Bahn030401].bSchalt,
	bI_FreigabeResetBahn				:= astrGButtonManTransporte[ID_Bahn030401].bSchalt,
	bI_FreigabeFuerJob					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe					:= bFreigabeJob_Wippe_030301 
												AND iWippe_030301_IstAufPos = 1,
	bI_FreigabeFuerBuchen				:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn				:= FALSE,
	bI_BilderSammeln					:= FALSE ,
	bI_Querfoerderer					:= FALSE,
	bI_FreigabeAnBahnanfang				:= FALSE,
	bI_FreigabeAnsBahnende				:= FALSE,
	bI_ScannenAktiv						:= FALSE,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner				:= FALSE,
	bI_BeiResetJoblisteLoeschen			:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs					:= 1,
	iI_MaxAnzahlNoRead					:= 1,
	uiI_ProId							:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal		:= 0,
	diI_SperrenZielBahnNrVonPortal		:= 0,
	tI_BisScannerDatenDa				:= t#0s,
	tI_Systemzeit						:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk						:= strGHdshk_Bahn030401,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn030301,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030501,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_030401],
	strIO_TrE_Vorg						:= GDat.TrE_Daten[TrEId_030301],
	strIO_TrE_Nachf						:= GDat.TrE_Daten[TrEId_030501],
	strIO_ArbTab_Job					:= GJobDat.ArbTab_Job[TrEId_030401],
	strIO_GLmHand						:= strGLmHand,
	fbIO_Scanner						:= fbScanner_Leer,
	bQ_GrundOK							=> ,
	bQ_ResetAktiv						=> ,
	bQ_ScannerHatNichtGelesen			=> ,
	bQ_ScannerFalscherBarcode			=> ,
	bQ_ScannerMaxAnzahlNoRead			=> );
	
	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_30_Bahn_030301" Id="{6da63603-a52f-47bf-a285-ac0a3a622add}">
      <Implementation>
        <ST><![CDATA[
(*--------------------------*)
(* Sollposition Wippe       *)
(*--------------------------*)

IF	GDat.TrE_Daten[TrEId_030401].iJobStatus = iDatenAktiv
	AND	fbJobBahn030401.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030301.di_PlatzId
	AND	GDat.TrE_Daten[TrEId_031401].iJobStatus = iSekNichtAktiv
	AND	GDat.TrE_Daten[TrEId_032401].iJobStatus = iSekNichtAktiv
THEN
	iWippe_030301_SollAufPos:= 1;

ELSIF GDat.TrE_Daten[TrEId_031401].iJobStatus = iDatenAktiv
	AND	fbJobBahn031401.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030301.di_PlatzId
	AND	GDat.TrE_Daten[TrEId_030401].iJobStatus = iSekNichtAktiv
	AND	GDat.TrE_Daten[TrEId_032401].iJobStatus = iSekNichtAktiv
THEN
	iWippe_030301_SollAufPos:= 2;

ELSIF GDat.TrE_Daten[TrEId_032401].iJobStatus = iDatenAktiv
	AND	fbJobBahn032401.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030301.di_PlatzId
	AND	GDat.TrE_Daten[TrEId_030401].iJobStatus = iSekNichtAktiv
	AND	GDat.TrE_Daten[TrEId_031401].iJobStatus = iSekNichtAktiv	
	OR ( GDat.TrE_Daten[TrEId_030301].iJobStatus = iDatenAktiv (* Darf Teile nur in Pos 3 Teile aufnehmen *)
		AND	( fbJobBahn030301.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030201_Roll1.di_PlatzId
				OR fbJobBahn030301.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030202_Roll2.di_PlatzId
				OR fbJobBahn030301.strBahnjob_Aktiv.diQuellId = strGHdshk_Bahn030205_Riem.di_PlatzId )
		AND GDat.TrE_Daten[TrEId_030301].iAnzahlPlatten = 0
		AND strGHdshk_Bahn030301.str_JobAktiv_VonBahn = eRolljobKeinJob )
THEN
	iWippe_030301_SollAufPos:= 3;

END_IF;

(*--------------------------*)
(* Zwischenmerker schreiben *)
(*--------------------------*)

IF	iWippe_030301_IstAufPos = 1
THEN
	strGHdshk_Zwischen_030301:= strGHdshk_Bahn030401;
	strTrEDaten_Zwischen_030301:= GDat.TrE_Daten[TrEId_030401];

ELSIF iWippe_030301_IstAufPos = 2
THEN
	strGHdshk_Zwischen_030301:= strGHdshk_Bahn031401;
	strTrEDaten_Zwischen_030301:= GDat.TrE_Daten[TrEId_031401];

ELSIF iWippe_030301_IstAufPos = 3
THEN
	strGHdshk_Zwischen_030301:= strGHdshk_Bahn032401;
	strTrEDaten_Zwischen_030301:= GDat.TrE_Daten[TrEId_032401];
ELSE
	strGHdshk_Zwischen_030301:= strBahnaustausch_Leer;
	strTrEDaten_Zwischen_030301:= TrE_Daten_Leer;
END_IF;


fbHardwareBahn030301(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId								:= TrEId_030301,
	uiI_AxId								:= 0,
	uiI_FehlerId							:= 4300,
	sI_Bahnname								:= '03.03.01',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck				:= astrGButtonManTransporte[ID_Bahn030301].bSchalt,
	bI_BahnDarfZurueckHand					:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn030301].bSchalt,
	bI_StoerungAntrieb						:= NOT fbG6UmrichterBahn030301.bQ_Betriebsbereit,
	bI_Anfang								:= NOT bIW303Transp1AnfSpur1
													OR NOT bIW303Transp1AnfSpur2,
	bI_BelegtKontrolle						:= FALSE,
	bI_Ende									:= NOT bIW303Transp1EndSpur1
													OR NOT bIW303Transp1EndSpur2,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn					:= FALSE,
	bI_AbbruchPosi_VonBahn					:= FALSE,
	bI_BahnenGrundSchnell					:= FALSE,
	bI_GrundZurueck							:= FALSE,
	bI_OhneSynchronVonBahn					:= FALSE ,	
	bI_NachlaufAmAnfangEnde					:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_ImpulsInit						:= bGImpulsInitSprache,
	bI_OhneImpulsgeber					:= FALSE,
	bI_AutoHandaufgabeAktiv				:= FALSE,
	bI_AutoHandentnahmeAktiv			:= FALSE,
	strIO_GHdshk						:= strGHdshk_Bahn030301,
	strIO_GHdshk_Vorg					:= strGHdshk_Bahn030205_Riem,
	strIO_GHdshk_Nachf					:= strGHdshk_Zwischen_030301,
	strIO_GLmHand						:= strGLmHand,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_030301],
	strIO_Stoerungen					:= strGStoerungen[iEins_Id]);
	
fbG6UmrichterBahn030301(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W303.EA1+S1-TA1',
	uiI_FxId							:= FxId_030301,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW301TA1Statuswort,
	usiI_Umrichterstatus					:= usiIW303TA1UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW303TA1Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung						:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit					:= LREAL_TO_REAL(ABS(strGHdshk_Bahn030301.lr_Bahnspeed_Vorgabe)),
	rI_Maxgeschwindigkeit					:= strGHdshk_Bahn030301.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter						:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe						:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030301.b_BahnVor,
	bI_DrehrichtungZurueck					:= strGHdshk_Bahn030301.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= FALSE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030301],
	iQ_Sollwert							=> uiQW303TA1Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030301.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW303TA1Control,
	bQ_Betriebsbereit						=> ,
	bQ_BremseLoesen						=> ,
	bQ_FehlerKEBDatenDownload				=> ,
	bQ_FehlerKeinIMAUmrichter				=> ,
	bQ_FehlerXMLDatei						=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben					=> ,
	bQ_FehlerAdresseLesen					=> ,
	strQ_Umrichterstatus					=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030301]:=
	fbG6UmrichterBahn030301.strQ_Umrichterstatus.sConverterState;

(* Unklare Definition *)	
IF 	GJobDat.ArbTab_Job[TrEId_030301].JobZeile[1].diQuellId = strGHdshk_Bahn030202_Roll2.di_PlatzId
THEN 
	GJobDat.ArbTab_Job[TrEId_030301].JobZeile[1].diQuellId := strGHdshk_Bahn030201_Roll1.di_PlatzId;
END_IF

fbJobBahn030301(
	bI_MitPCJob								:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg			:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf			:= FALSE,
	bI_FreigabeResetJob						:= astrGButtonManTransporte[ID_Bahn030301].bSchalt,
	bI_FreigabeResetBahn					:= astrGButtonManTransporte[ID_Bahn030301].bSchalt,
	bI_FreigabeFuerJob						:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe						:= strGHdshk_Anschlag030201.b_Grundstellung
												AND bFreigabeJob_Wippe_030301 
												AND iWippe_030301_IstAufPos = 3
												AND GJobDat.ArbTab_Job[TrEId_030301].JobZeile[1].diQuellId = strGHdshk_Bahn030201_Roll1.di_PlatzId,
	bI_FreigabeFuerBuchen					:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn					:= FALSE,
	bI_Querfoerderer						:= TRUE,
	bI_FreigabeAnBahnanfang					:= FALSE,
	bI_FreigabeAnsBahnende					:= FALSE,
	bI_BilderSammeln						:=  fbJobBahn030301.strBahnjob_Aktiv.aiPos_X[1] <= 1
												AND	fbJobBahn030301.strBahnjob_Aktiv.aiPos_X[2] <= 1
												AND	fbJobBahn030301.strBahnjob_Aktiv.aiPos_X[3] <= 1
												AND	fbJobBahn030301.strBahnjob_Aktiv.aiPos_X[4] <= 1
												AND	fbJobBahn030301.strBahnjob_Aktiv.arLaenge[1] <= strGHdshk_Bahn030301.str_Bahndaten.rRastermass_Laenge_LaengstePlatte
												AND	fbJobBahn030301.strBahnjob_Aktiv.arLaenge[2] <= strGHdshk_Bahn030301.str_Bahndaten.rRastermass_Laenge_LaengstePlatte ,
	bI_ScannenAktiv							:= FALSE,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner					:= FALSE,
	bI_BeiResetJoblisteLoeschen				:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs						:= 1,
	iI_MaxAnzahlNoRead						:= 1,
	uiI_ProId								:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal			:= 0,
	diI_SperrenZielBahnNrVonPortal			:= 0,
	tI_BisScannerDatenDa					:= t#0s,
	tI_Systemzeit							:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk							:= strGHdshk_Bahn030301,
	strIO_GHdshk_Vorg						:= strGHdshk_Bahn030205_Riem,
	strIO_GHdshk_Nachf						:= strGHdshk_Zwischen_030301,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_030301],
	strIO_TrE_Vorg							:= GDat.TrE_Daten[TrEId_030202_Roll2],
	strIO_TrE_Nachf							:= strTrEDaten_Zwischen_030301,
	strIO_ArbTab_Job						:= GJobDat.ArbTab_Job[TrEId_030301],
	strIO_GLmHand							:= strGLmHand,
	fbIO_Scanner							:= fbScanner_Leer,
	bQ_GrundOK								=> ,
	bQ_ResetAktiv							=> ,
	bQ_ScannerHatNichtGelesen				=> ,
	bQ_ScannerFalscherBarcode				=> ,
	bQ_ScannerMaxAnzahlNoRead				=> );

	
	
(*---------------------------------*)
(* Zwischenmerker zurueckschreiben *)
(*---------------------------------*)

IF	iWippe_030301_IstAufPos = 1
THEN
	strGHdshk_Bahn030401:= strGHdshk_Zwischen_030301;
	GDat.TrE_Daten[TrEId_030401]:= strTrEDaten_Zwischen_030301;

ELSIF iWippe_030301_IstAufPos = 2
THEN
	strGHdshk_Bahn031401:= strGHdshk_Zwischen_030301;
	GDat.TrE_Daten[TrEId_031401]:= strTrEDaten_Zwischen_030301;

ELSIF iWippe_030301_IstAufPos = 3
THEN
	strGHdshk_Bahn032401:= strGHdshk_Zwischen_030301;
	GDat.TrE_Daten[TrEId_032401]:= strTrEDaten_Zwischen_030301;
END_IF;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_31_Bahn_030201" Id="{ab488a4c-81a8-4bdc-a082-21411fb53ed4}">
      <Implementation>
        <ST><![CDATA[fbHardwareBahn030201(
	uiI_ProId								:= P_BahnHardware,
	uiI_TrEId_Sek_1							:= TrEId_030201_Roll1,
	uiI_TrEId_Sek_2							:= TrEId_030202_Roll2,
	uiI_AxId_Roll1							:= 0,
	uiI_AxId_Roll2							:= 0,
	uiI_AxId_Riem1							:= 0,
	uiI_FehlerId_Roll1						:= 4050,
	uiI_FehlerId_Roll2						:= 4150,
	uiI_FehlerId_Riem1						:= 4250,
	sI_Bahnname_Sek_1						:= '03.02.01',
	sI_Bahnname_Sek_2						:= '03.02.02',
	bI_Hand									:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik							:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK							:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_FreigabeAutomatik					:= TRUE,
	bI_FreigabeHandVorZurueck_Roll1			:= astrGButtonManTransporte[ID_Bahn030201_Roll1].bSchalt,
	bI_FreigabeHandVorZurueck_Riem1			:= astrGButtonManTransporte[ID_Bahn030205_Riem].bSchalt,
	bI_FreigabeHandHebenSenkenSek1			:= astrGButtonManTransporte[ID_Bahn030201_Roll1].bSchalt
													OR astrGButtonManTransporte[ID_Bahn030205_Riem].bSchalt,
	bI_BahnDarfZurueckHand_Roll1			:= TRUE,
	bI_BahnDarfZurueckHand_Riem1			:= TRUE,
	bI_FreigabeHandVorZurueck_Roll2			:= astrGButtonManTransporte[ID_Bahn030202_Roll2].bSchalt,
	bI_FreigabeHandHebenSenkenSek2			:= astrGButtonManTransporte[ID_Bahn030202_Roll2].bSchalt
												OR astrGButtonManTransporte[ID_Bahn030205_Riem].bSchalt,
	bI_BahnDarfZurueckHand_Roll2			:= TRUE,
	bI_FreigabeReset						:= astrGButtonManTransporte[ID_Bahn030201_Roll1].bSchalt
												OR astrGButtonManTransporte[ID_Bahn030202_Roll2].bSchalt
												OR astrGButtonManTransporte[ID_Bahn030205_Riem].bSchalt,
	bI_StoerungAntrieb_Roll1				:= NOT fbG6UmrichterBahn030201_Roll1.bQ_Betriebsbereit
												and NOT fbG6UmrichterBahn030202_Roll2.bQ_Betriebsbereit,
	bI_Anfang_Roll1							:= NOT bIW302Transp11Anf
												OR NOT bIW302Transp12Anf,
	bI_Ende_Roll1							:= ( NOT bIW302Transp11TeilVorAnschl
												OR NOT bIW302Transp12TeilVorAnschl )
												AND ( strGHdshk_Bahn030201_Roll1.r_PosiRestwert_AufBahn = 0
													OR strGHdshk_Anschlag030201.b_Grundstellung ),
	bI_AufFoerderhoehe_Roll1				:= bIW302Transp2GS,
	bI_StoerungAntrieb_Roll2				:= NOT fbG6UmrichterBahn030203_Roll3.bQ_Betriebsbereit
												and NOT fbG6UmrichterBahn030204_Roll4.bQ_Betriebsbereit,
	bI_Anfang_Roll2							:= NOT bIW302Transp21Anf
												OR NOT bIW302Transp22Anf,
	bI_Ende_Roll2							:= ( NOT bIW302Transp21TeilVorAnschl
													OR NOT bIW302Transp22TeilVorAnschl )
												AND strGHdshk_Bahn030202_Roll2.r_PosiRestwert_AufBahn = 0,
	bI_AufFoerderhoehe_Roll2				:= bIW302Transp2GS,
	bI_StoerungAntrieb_Riem1				:= NOT fbG6UmrichterBahn030205_Riem.bQ_Betriebsbereit,
	bI_Anfang_Riem1							:= false,
	bI_Ende_Riem1							:= NOT bIW303Transp1AnfSpur1
												OR NOT bIW303Transp1AnfSpur2,
	bI_AufFoerderhoehe_Riem1				:= bIW302Transp2AS,
	bI_HebenSenkenInvers					:= FALSE,
	bI_VorZurueckInversHand					:= FALSE,
	bI_AbbruchPosi_AufBahn_Roll1			:= FALSE,
	bI_AbbruchPosi_AufBahn_Roll2			:= FALSE,
	bI_AbbruchPosi_AufBahn_Riem1			:= FALSE,
	bI_AbbruchPosi_VonBahn_Roll1			:= FALSE, 
	bI_AbbruchPosi_VonBahn_Roll2			:= FALSE ,
	bI_AbbruchPosi_VonBahn_Riem1			:= FALSE,
	bI_BahnenGrundSchnell_Sek_1				:= FALSE,
	bI_BahnenGrundSchnell_Sek_2				:= FALSE,
	bI_HubGrundWennFrei_Sek_1				:= FALSE,
	bI_HubGrundWennFrei_Sek_2				:= FALSE,
	bI_HubArbeitWennFrei_Sek_1				:= FALSE,
	bI_HubArbeitWennFrei_Sek_2				:= FALSE,
	bI_HubGrundWennBelegt_Sek_1				:= FALSE,
	bI_HubGrundWennBelegt_Sek_2				:= FALSE,
	bI_HubArbeitWennBelegt_Sek_1			:= FALSE,
	bI_HubArbeitWennBelegt_Sek_2			:= FALSE,
	bI_OhneSynchronVonBahn_Roll1			:= FALSE,
	bI_OhneSynchronVonBahn_Roll2			:= FALSE,
	bI_OhneSynchronVonBahn_Riem1			:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben	:= FALSE,
	bI_NullkanteLangeTeileAufRolle2			:= TRUE,
	bI_ImpulsInit							:= bGImpulsInitSprache,
	bI_OhneImpulsgeber_Roll1				:= FALSE,
	bI_OhneImpulsgeber_Roll2				:= FALSE,
	bI_OhneImpulsgeber_Riem1				:= FALSE,
	strIO_GHdshk_Roll1						:= strGHdshk_Bahn030201_Roll1,
	strIO_GHdshk_Roll1_Vorg					:= strGHdshk_Bahn030101,
	strIO_GHdshk_Roll2						:= strGHdshk_Bahn030202_Roll2,
	strIO_GHdshk_Roll2_Nachf				:= strBahnaustausch_Leer,
	strIO_GHdshk_Riem1						:= strGHdshk_Bahn030205_Riem,
	strIO_GHdshk_Riem1_Vorg					:= strBahnaustausch_Leer,
	strIO_GHdshk_Riem1_Nachf				:= strGHdshk_Bahn030301,
	strIO_GLmHand							:= strGLmHand,
	strIO_TrE_Sek_1							:= GDat.TrE_Daten[TrEId_030201_Roll1],
	strIO_TrE_Sek_2							:= GDat.TrE_Daten[TrEId_030202_Roll2],
	strIO_Stoerungen						:= strGStoerungen[iEins_Id],
	bQ_Sektion1AS							=> ,
	bQ_Sektion2AS							=> ,
	bQ_Sektion1GS							=> ,
	bQ_Sektion2GS							=> );

(* Nur ein Hub für beide *)
	
	bQW302Transp2AS:= fbHardwareBahn030201.bQ_Sektion1AS;
	bQW302Transp2GS:= fbHardwareBahn030201.bQ_Sektion1GS;
	
fbG6UmrichterBahn030201_Roll1(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W302.EA11+S1-TA1',
	uiI_FxId							:= FxId_030201_Roll1,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW302TA11Statuswort,
	usiI_Umrichterstatus				:= usiIW302TA11UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW302TA11Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= ABS(strGHdshk_Bahn030201_Roll1.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030201_Roll1.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030201_Roll1.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030201_Roll1.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030201_Roll1],
	iQ_Sollwert							=> uiQW302TA11Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030201_Roll1.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW302TA11Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> bQW302Bremse11Loe,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030201_Roll1]:=
	fbG6UmrichterBahn030201_Roll1.strQ_Umrichterstatus.sConverterState;

fbG6UmrichterBahn030202_Roll2(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W302.EA12+S1-TA1',
	uiI_FxId							:= FxId_030202_Roll2,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW302TA12Statuswort,
	usiI_Umrichterstatus				:= usiIW302TA12UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW302TA12Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= ABS(strGHdshk_Bahn030201_Roll1.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030201_Roll1.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030201_Roll1.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030201_Roll1.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030202_Roll2],
	iQ_Sollwert							=> uiQW302TA12Sollw,//uiQW302TA11Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030201_Roll1.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW302TA12Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> bQW302Bremse12Loe,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030202_Roll2]:=
	fbG6UmrichterBahn030202_Roll2.strQ_Umrichterstatus.sConverterState;

fbG6UmrichterBahn030203_Roll3(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W302.EA21+S1-TA1',
	uiI_FxId							:= FxId_030203_Roll3,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW302TA21Statuswort,
	usiI_Umrichterstatus				:= usiIW302TA21UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW302TA21Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= ABS(strGHdshk_Bahn030202_Roll2.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030202_Roll2.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030202_Roll2.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030202_Roll2.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030203_Roll3],
	iQ_Sollwert							=> uiQW302TA21Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030203_Roll3.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW302TA21Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> bQW302Bremse21Loe,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030203_Roll3]:=
	fbG6UmrichterBahn030203_Roll3.strQ_Umrichterstatus.sConverterState;

fbG6UmrichterBahn030204_Roll4(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W302.EA22+S1-TA1',
	uiI_FxId							:= FxId_030204_Roll4,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW302TA22Statuswort,
	usiI_Umrichterstatus				:= usiIW302TA22UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW302TA22Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= ABS(strGHdshk_Bahn030202_Roll2.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030202_Roll2.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030202_Roll2.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030202_Roll2.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030204_Roll4],
	iQ_Sollwert							=> uiQW302TA22Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030204_Roll4.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW302TA22Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> bQW302Bremse22Loe,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030204_Roll4]:=
	fbG6UmrichterBahn030204_Roll4.strQ_Umrichterstatus.sConverterState;


	
fbG6UmrichterBahn030205_Riem(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W302.EB1+S1-TA1',
	uiI_FxId							:= FxId_030205_Riem,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW302TA1Statuswort,
	usiI_Umrichterstatus				:= usiIW302TA1UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW302TA1Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= ABS(strGHdshk_Bahn030205_Riem.lr_Bahnspeed_Vorgabe),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030205_Riem.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C2_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C2_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030205_Riem.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030205_Riem.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030205_Riem],
	iQ_Sollwert							=> uiQW302TA1Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030205_Riem.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW302TA1Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> ,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030205_Riem]:=
	fbG6UmrichterBahn030205_Riem.strQ_Umrichterstatus.sConverterState;

fbJobBahn030201(
	bI_MitPCJob_Sek_1							:= TRUE,
	bI_MitPCJob_Sek_2							:= TRUE,
	bI_FreigabeJobErzeugenSPS_Roll1_Vorg		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Roll1_Roll2		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Roll2_Roll1		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Roll2_Nachf		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Riem1_Vorg		:= FALSE,
	bI_FreigabeJobErzeugenSPS_Riem1_Nachf		:= FALSE,
	bI_FreigabeResetJob							:=	astrGButtonManTransporte[ID_Bahn030201_Roll1].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030202_Roll2].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030203_Roll3].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030204_Roll4].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030205_Riem].bSchalt,
	bI_FreigabeResetBahn						:=	astrGButtonManTransporte[ID_Bahn030201_Roll1].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030202_Roll2].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030203_Roll3].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030204_Roll4].bSchalt
														OR astrGButtonManTransporte[ID_Bahn030205_Riem].bSchalt,
	bI_FreigabeFuerJob_Sek_1					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe_Sek_1						:= strGHdshk_Anschlag030201.b_Grundstellung
													OR ( strGHdshk_Bahn030202_Roll2.b_BahnBelegt
														AND GDat.TrE_Daten[TrEId_030202_Roll2].iAnzahlPlatten <> 0 ),
	bI_FreigabeFuerBuchen_Sek_1					:= bFreigabeFuerBuchen_C2_1,
	bI_FreigabeFuerJob_Sek_2					:= bFreigabeFuerJob_C2_1,
	bI_ZusatzFreigabe_Sek_2						:= strGHdshk_Anschlag030201.b_Grundstellung,
	bI_FreigabeFuerBuchen_Sek_2					:= bFreigabeFuerBuchen_C2_1,
	bI_MitAufBahnBeiVonBahn_Sek_1				:= FALSE,
	bI_MitAufBahnBeiVonBahn_Sek_2				:= FALSE,
	bI_Querfoerderer_Roll						:= FALSE,
	bI_Querfoerderer_Riem						:= FALSE,
	bI_BahnHKStop_Roll1							:= FALSE,
	bI_BahnHKStop_Roll2							:= FALSE,
	bI_BahnHKStop_Riem1							:= FALSE,
	bI_FreigabeAnBahnanfang_Roll1				:= FALSE,
	bI_FreigabeAnsBahnende_Roll1				:= strGHdshk_Anschlag030201.b_Arbeitsstellung, 
	bI_FreigabeAnBahnanfang_Roll2				:= FALSE,
	bI_FreigabeAnsBahnende_Roll2				:= FALSE, 
	bI_FreigabeAnBahnanfang_Riem1				:= FALSE,
	bI_FreigabeAnsBahnende_Riem1				:= FALSE,
	bI_Testbetrieb								:= gxTestbetriebOhneMaschineAktiv,
	bI_BeiResetJoblisteLoeschen					:= NOT bG3TecIstLeitsystem,
	bI_NullkanteLangeTeileAufRolle2				:= TRUE,
	uiI_ProId									:= P_BahnJob,
	iI_MaxAnzahlJobs_Sek_1						:= 1,
	iI_MaxAnzahlJobs_Sek_2						:= 1,
	diI_SperrenQuellBahnNrVonPortal				:= 0,
	diI_SperrenZielBahnNrVonPortal				:= 0,
	tI_Systemzeit								:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk_Roll1							:= strGHdshk_Bahn030201_Roll1,
	strIO_GHdshk_Roll1_Vorg						:= strGHdshk_Bahn030101,
	strIO_GHdshk_Roll2							:= strGHdshk_Bahn030202_Roll2,
	strIO_GHdshk_Roll2_Nachf					:= strBahnaustausch_Leer,
	strIO_GHdshk_Riem1							:= strGHdshk_Bahn030205_Riem,
	strIO_GHdshk_Riem1_Vorg						:= strBahnaustausch_Leer,
	strIO_GHdshk_Riem1_Nachf					:= strGHdshk_Bahn030301,
	strIO_TrE_Sek_1								:= GDat.TrE_Daten[TrEId_030201_Roll1],
	strIO_TrE_Sek_2								:= GDat.TrE_Daten[TrEId_030202_Roll2],
	strIO_TrE_Roll_Vorg							:= GDat.TrE_Daten[TrEId_030101],
	strIO_TrE_Roll_Nachf						:= TrE_Daten_Leer,
	strIO_TrE_Riem1_Vorg						:= TrE_Daten_Leer,
	strIO_TrE_Riem1_Nachf						:= GDat.TrE_Daten[TrEId_030301],
	strIO_ArbTab_Job_Sek_1						:= GJobDat.ArbTab_Job[TrEId_030201_Roll1],
	strIO_ArbTab_Job_Sek_2						:= GJobDat.ArbTab_Job[TrEId_030202_Roll2],
	strIO_GLmHand								:= strGLmHand,
	bQ_GrundOK_Sek_1							=> ,
	bQ_GrundOK_Sek_2							=> ,
	bQ_ResetAktiv_Sek_1							=> ,
	bQ_ResetAktiv_Sek_2							=> );


	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_32_Bahn_030101" Id="{51c77241-185f-4640-accc-813151ca84e9}">
      <Implementation>
        <ST><![CDATA[
fbHardwareBahn030101(
	uiI_ProId							:= P_BahnHardware,
	uiI_TrEId							:= TrEId_030101,
	uiI_AxId							:= 0,
	uiI_FehlerId						:= 4000,
	sI_Bahnname							:= '03.01.01',
	bI_Hand								:= fbEins[iEins_Id].OsHandEin,
	bI_Automatik						:= fbEins[iEins_Id].OsAutomatikEin,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_SicherheitOK						:= gxSicherheitsBereichQuittiertC[giSicher_C1_1],
	bI_FreigabeAutomatik				:= TRUE,
	bI_FreigabeHandVorZurueck			:= astrGButtonManTransporte[ID_Bahn030101].bSchalt,
	bI_BahnDarfZurueckHand				:= FALSE,
	bI_FreigabeReset					:= astrGButtonManTransporte[ID_Bahn030101].bSchalt,
	bI_StoerungAntrieb					:= NOT fbG6UmrichterBahn030101.bQ_Betriebsbereit,
	bI_Anfang							:= FALSE,
	bI_BelegtKontrolle					:= FALSE,
	bI_Ende								:= NOT bIW302Transp11Anf
											OR NOT bIW302Transp12Anf,
	bI_VorZurueckInversHand				:= FALSE,
	bI_AbbruchPosi_AufBahn				:= FALSE,
	bI_AbbruchPosi_VonBahn				:= FALSE,
	bI_BahnenGrundSchnell				:= FALSE,
	bI_GrundZurueck						:= FALSE,
	bI_OhneSynchronVonBahn				:= FALSE,
	bI_NachlaufAmAnfangEnde				:= FALSE,
	bI_MitUeberwachungTeilNichtFreigegeben		:= FALSE,
	bI_ImpulsInit						:= bGImpulsInitSprache,
	bI_OhneImpulsgeber					:= FALSE,
	bI_AutoHandaufgabeAktiv				:= FALSE,
	bI_AutoHandentnahmeAktiv			:= FALSE,
	strIO_GHdshk						:= strGHdshk_Bahn030101,
	strIO_GHdshk_Vorg					:= strGHdshk_BahnExternW1,
	strIO_GHdshk_Nachf					:= strGHdshk_Bahn030201_Roll1,
	strIO_GLmHand						:= strGLmHand,
	strIO_TrE							:= GDat.TrE_Daten[TrEId_030101],
	strIO_Stoerungen					:= strGStoerungen[iEins_Id]);

fbG6UmrichterBahn030101(
	sI_NetIDMaster						:= P_Ueberwachung_EtherCat.sNetId,
	sI_PfadXML							:= sGG6XMLPfad,
	sI_PfadSonderDatensatz				:= '',
	sI_Name								:= '=W301.EA1+S1-TA1',
	uiI_FxId							:= FxId_030101,
	uiI_ProId							:= P_Umrichter,
	uiI_DevID							:= uiIDevID,
	diI_Statuswort						:= udiIW301TA1Statuswort,
	usiI_Umrichterstatus				:= usiIW301TA1UmrichterStatus,
	uiI_Datensatz						:= 1,
	iI_Istfrequenz						:= uiIW301TA1Istfrequenz,
	tI_ZeitBremse						:= t#500ms,
	rI_Beschleunigung					:= 0.1,
	rI_Verzoegerung						:= 0.1,
	rI_Sollgeschwindigkeit				:= LREAL_TO_REAL(ABS(strGHdshk_Bahn030101.lr_Bahnspeed_Vorgabe)),
	rI_Maxgeschwindigkeit				:= strGHdshk_Bahn030101.str_BahnSpeed.rVmaxSpeed,
	bI_Aktiv							:= TRUE,
	bI_FehlerQuitt						:= strGLmHand.bI_QuittStoerung,
	bI_Testbetrieb						:= gxTestbetriebOhneMaschineAktiv,
	bI_StartUmrichter					:= gxSicherheitsBereichQuittiertC[giSicher_C1_1],
	bI_Reglerfreigabe					:= gxSicherheitsBereichVerzOKC[giSicher_C1_1],
	bI_DrehrichtungVor					:= strGHdshk_Bahn030101.b_BahnVor,
	bI_DrehrichtungZurueck				:= strGHdshk_Bahn030101.b_BahnZurueck,
	bI_EtherCATOK						:= P_Ueberwachung_EtherCat.xAlles_OK,
	bI_DrehInv							:= TRUE,
	uiQ_EtherCATAdresse					=> uiGEtherCATAdresse_KEB[FxId_030101],
	iQ_Sollwert							=> uiQW301TA1Sollw,
	lrQ_Istwert							=> strGHdshk_Bahn030101.lr_Bahnspeed_Ist,
	diQ_Control							=> udiQW301TA1Control,
	bQ_Betriebsbereit					=> ,
	bQ_BremseLoesen						=> ,
	bQ_FehlerKEBDatenDownload			=> ,
	bQ_FehlerKeinIMAUmrichter			=> ,
	bQ_FehlerXMLDatei					=> ,
	bQ_FehlerParaLesen					=> ,
	bQ_FehlerParaSchreiben				=> ,
	bQ_FehlerAdresseLesen				=> ,
	strQ_Umrichterstatus				=> );

Aufruf_DisplayKEB.arI_DisplayKEB[FxId_030101]:=
	fbG6UmrichterBahn030101.strQ_Umrichterstatus.sConverterState;

fbJobBahn030101(
	bI_MitPCJob								:= TRUE,
	bI_FreigabeJobErzeugenSPS_Vorg			:= FALSE,
	bI_FreigabeJobErzeugenSPS_Nachf			:= FALSE,
	bI_FreigabeResetJob						:= astrGButtonManTransporte[ID_Bahn030101].bSchalt,
	bI_FreigabeResetBahn					:= astrGButtonManTransporte[ID_Bahn030101].bSchalt,
	bI_FreigabeFuerJob						:= bFreigabeFuerJob_C1_1,
	bI_ZusatzFreigabe						:= FALSE,
	bI_FreigabeFuerBuchen					:= bFreigabeFuerBuchen_C1_1,
	bI_MitAufBahnBeiVonBahn					:= FALSE,
	bI_Querfoerderer						:= FALSE,
	bI_FreigabeAnBahnanfang					:= FALSE,
	bI_FreigabeAnsBahnende					:= FALSE,
	bI_BilderSammeln						:= FALSE,
	bI_ScannenAktiv							:= FALSE,
	bI_Testbetrieb							:= gxTestbetriebOhneMaschineAktiv,
	bI_FehlerQuittScanner					:= FALSE,
	bI_BeiResetJoblisteLoeschen				:= NOT bG3TecIstLeitsystem,
	iI_MaxAnzahlJobs						:= 1,
	iI_MaxAnzahlNoRead						:= 1,
	uiI_ProId								:= P_BahnJob,
	diI_SperrenQuellBahnNrVonPortal			:= 0,
	diI_SperrenZielBahnNrVonPortal			:= 0,
	tI_BisScannerDatenDa					:= t#0s,
	tI_Systemzeit							:= P_SystemzeitAuswerten.tDatumZeit_PC,
	strIO_GHdshk							:= strGHdshk_Bahn030101,
	strIO_GHdshk_Vorg						:= strGHdshk_BahnExternW1,
	strIO_GHdshk_Nachf						:= strGHdshk_Bahn030201_Roll1,
	strIO_TrE								:= GDat.TrE_Daten[TrEId_030101],
	strIO_TrE_Vorg							:= GDat.TrE_Daten[TrEId_ExternW1],
	strIO_TrE_Nachf							:= GDat.TrE_Daten[TrEId_030201_Roll1],
	strIO_ArbTab_Job						:= GJobDat.ArbTab_Job[TrEId_030101],
	strIO_GLmHand							:= strGLmHand,
	fbIO_Scanner							:= fbScanner_Leer,
	bQ_GrundOK								=> ,
	bQ_ResetAktiv							=> ,
	bQ_ScannerHatNichtGelesen				=> ,
	bQ_ScannerFalscherBarcode				=> ,
	bQ_ScannerMaxAnzahlNoRead				=> );

(* Freigabe Ablegen *)
	
strGSignalaustauschExternW1.bQ_Vorgeschaltet_FreigabeAblegen:=
	GDat.TrE_Daten[TrEId_030101].iJobStatus = iDatenAktiv
	AND fbJobBahn030101.strBahnjob_Aktiv.diQuellId = strGHdshk_BahnExternW1.di_PlatzId
	AND fbJobBahn030101.strBahnjob_Aktiv.diZielId = strGHdshk_Bahn030101.di_PlatzId
	AND	GDat.TrE_Daten[TrEId_030101].iSperren = 0
	AND	GDat.TrE_Daten[TrEId_ExternW1].iSperren = 0
	AND	strGHdshk_Bahn030101.i_BahnV2_AufBahn_BereitFuerJob = 0
	AND	strGHdshk_Bahn030101.i_BahnV2_VonBahn_BereitFuerJob = 0
	AND	strGHdshk_Bahn030101.str_DoJob_AufBahn = eRolljobKeinJob
	AND	strGHdshk_Bahn030101.str_DoJob_VonBahn = eRolljobKeinJob
	AND	strGHdshk_Bahn030101.str_JobAktiv_AufBahn = eRolljobKeinJob
	AND	strGHdshk_Bahn030101.str_JobAktiv_VonBahn = eRolljobKeinJob
	AND	strGHdshk_Bahn030101.str_BahnStatus = iAutomatikBereitJob
	AND strGHdshk_Bahn030101.b_BahnSteht
	AND NOT strGHdshk_Bahn030101.b_BahnBelegt
	AND NOT strGHdshk_Bahn030101.b_LiAnfang
	AND NOT strGHdshk_Bahn030101.b_LiEnde
	AND	GDat.TrE_Daten[TrEId_030101].iAnzahlPlatten = 0
	AND	bFreigabeFuerJob_C1_1;

(* Jobhandling und Quittierung *)
		
IF GDat.TrE_Daten[TrEId_030101].iJobStatus = iDatenAktiv 
	AND strGSignalaustauschExternW1.bI_Vorgeschaltet_QuittWerkstueckAbgelegt
	AND NOT strGSignalaustauschExternW1.bQ_Vorgeschaltet_QuittWerkstueckAbgelegt
THEN

	F_ProtoText4( P_BahnJob, 'Bahn 03.01.01:Schelling - Platte abgelegt, Job an IPC beendet.', '', '', '' );
	strGSignalaustauschExternW1.bQ_Vorgeschaltet_QuittWerkstueckAbgelegt:= TRUE;

	(* BahnjobDaten in Ziel-TrE eintragen                                            *)
	(* iMode_Copy=2 (alle Platten an freier Stelle), iMode_Daten=0, Barcodeprüfung aus, Quelle, Ziel   *)
	fbJobDaten_In_ZielTrE(
		iMode_Copy:= 2,
		iMode_Daten:= 0,
		iBarcodePruefen:= 0,
		Jobzeile:= fbJobBahn030101.strBahnjob_Aktiv,
		TrE_Daten:= GDat.TrE_Daten[TrEId_030101] );

	(* Plattendaten verschieben Quell-TrE, dabei wird [1] gelöscht, wenn letztes Teil = TrE löschen *)
	fbDatenVerschieben_In_TrEDaten(
		iMode:= 0,
		iZeile:= 0,
		iAnzahl_Soll:= fbJobBahn030101.strBahnjob_Aktiv.iAnzahlPlatten,
		TrE_Daten:=  GDat.TrE_Daten[TrEId_ExternW1] );
		
	F_ProtoText4( P_BahnJob, 'Bahn 03.01.01: Schelling - Platte(n) abgelegt', ' - Barcode: ', GDat.TrE_Daten[TrEId_030101].asBarcode[1], '' );

	GDat.TrE_Daten[TrEId_030101].iJobStatus:= iQuittieren;

ELSIF NOT strGSignalaustauschExternW1.bI_Vorgeschaltet_QuittWerkstueckAbgelegt
	AND	strGSignalaustauschExternW1.bQ_Vorgeschaltet_QuittWerkstueckAbgelegt
	AND strGSignalaustauschExternW1.bI_Vorgeschaltet_LastaufnahmeAusStoerbereichAblegen 	// Portal muss erst rausfahren
THEN

	F_ProtoText4( P_BahnJob, 'Bahn 03.01.01: Quittierung durch Schelling - Platte abgelegt', '', '', '' );
	strGHdshk_Bahn030101.b_BahnBelegt:= TRUE;
	strGSignalaustauschExternW1.bQ_Vorgeschaltet_QuittWerkstueckAbgelegt:= FALSE;

END_IF

(* TrE-Status *)

IF NOT strGSignalaustauschExternW1.bI_Vorgeschaltet_MaschineFrei
	OR 	gxTestbetriebOhneMaschineAktiv
THEN
	GDat.TrE_Daten[TrEId_ExternW1].iBelegtStatus:= F_SetClearBelegtStatus ( TrEId_ExternW1, iSektionBelegt, TRUE );

	IF	strGSignalaustauschExternW2.bI_Vorgeschaltet_JobForward
		OR 	gxTestbetriebOhneMaschineAktiv
	THEN
		GDat.TrE_Daten[TrEId_ExternW1].iBelegtStatus:= F_SetClearBelegtStatus ( TrEId_ExternW1, iBereitFuerLader, TRUE );
	END_IF
ELSE
	GDat.TrE_Daten[TrEId_ExternW1].iBelegtStatus:= F_SetClearBelegtStatus ( TrEId_ExternW1, iSektionBelegt, FALSE );
	GDat.TrE_Daten[TrEId_ExternW1].iBelegtStatus:= F_SetClearBelegtStatus ( TrEId_ExternW1, iBereitFuerLader, FALSE );
END_IF;

IF ( NOT strGSignalaustauschExternW1.bI_Vorgeschaltet_SchutzOk
	OR NOT strGSignalaustauschExternW1.bI_Vorgeschaltet_SchutzVerzOk
	OR 	strGSignalaustauschExternW1.bI_Vorgeschaltet_Stoerung )
	AND NOT gxTestbetriebOhneMaschineAktiv
THEN
	GDat.TrE_Daten[TrEId_ExternW1].iAktivStatus:= iStoerung;

ELSIF strGSignalaustauschExternW1.bI_Vorgeschaltet_TippenAktiv
THEN
	GDat.TrE_Daten[TrEId_ExternW1].iAktivStatus:= iHand;

ELSIF strGSignalaustauschExternW1.bI_Vorgeschaltet_SchutzOk
	AND	strGSignalaustauschExternW1.bI_Vorgeschaltet_SchutzVerzOk
	//AND	strGSignalaustauschExternW1.bI_Vorgeschaltet_StartVorschub
	OR	gxTestbetriebOhneMaschineAktiv
THEN
	IF NOT strGSignalaustauschExternW1.bI_Vorgeschaltet_MaschineFrei
		//AND	strGSignalaustauschExternW1.bQ_Vorgeschaltet_VorschubAktiv
	THEN
		GDat.TrE_Daten[TrEId_ExternW1].iAktivStatus:= iAutomatikAktivJob;
	ELSE
		GDat.TrE_Daten[TrEId_ExternW1].iAktivStatus:= iAutomatikBereitJob;
		strGHdshk_BahnExternW1.str_BahnStatus:= iAutomatikBereitJob;
	END_IF;
ELSE
	GDat.TrE_Daten[TrEId_ExternW1].iAktivStatus:= 0;
END_IF;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Up_90_Ausgaben" Id="{9d6e3780-1a68-4e99-af59-a37faac82060}">
      <Implementation>
        <ST><![CDATA[(*----------------------------------------------*)
(*----------------------------------------------*)
(*          Bahnen oder Job's aktiv ?		*)
(*----------------------------------------------*)
(*----------------------------------------------*)


bQ_BereichJobAktiv_C1_1:=
	strGHdshk_Bahn030101.str_BahnStatus = iAutomatikAktivJob;

bQ_BereichJobAktiv_C2_1:=
	strGHdshk_Bahn030201_Roll1.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030202_Roll2.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030205_Riem.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030301.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030401.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030501.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030601.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030701_Roll.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030702_Riem1.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn030703_Riem2.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn031401.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn031501.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn032401.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Bahn032501.str_BahnStatus = iAutomatikAktivJob
	OR	strGHdshk_Anschlag030201.str_ZylinderStatus = iAutomatikAktivJob
	OR	fbPosi_Wippe_030301.OwJobStatus = iAutomatikAktivJob
		AND NOT GKoAnWippe_030301.xAchse_Inaktiv
	OR	fbPosi_Wippe_030601.OwJobStatus = iAutomatikAktivJob
		AND NOT GKoAnWippe_030601.xAchse_Inaktiv;

bQ_BereichJobAktiv_C2_2:=
	strGHdshk_Bahn030801.str_BahnStatus = iAutomatikAktivJob;


(*----------------------------------------------*)
(*----------------------------------------------*)
(*       Bahnen und Job's beendet für		*)
(*                 Zyklusende ?			*)
(*----------------------------------------------*)
(*----------------------------------------------*)

bQ_BereichZyklusBeendet_C1_1:=
 	strGHdshk_Bahn030101.str_BahnStatus = iAutomatikBereitJob;

bQ_BereichZyklusBeendet_C2_1:=
 	strGHdshk_Bahn030201_Roll1.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030202_Roll2.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030205_Riem.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030301.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030401.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030501.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030601.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030701_Roll.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030702_Riem1.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn030703_Riem2.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn031401.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn031501.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn032401.str_BahnStatus = iAutomatikBereitJob
 	AND strGHdshk_Bahn032501.str_BahnStatus = iAutomatikBereitJob
	AND	strGHdshk_Anschlag030201.str_ZylinderStatus = iAutomatikBereitJob
	AND ( fbPosi_Wippe_030301.OwJobStatus = iAutomatikBereitJob
		AND	fbPosi_Wippe_030301.OsGrundstellungAchse
		AND	fbPosi_Wippe_030301.OsZyklusBeendet
		OR	bFreigabeTuerOeffnen_Wippe_030301
		OR	GKoAnWippe_030301.xAchse_Inaktiv )
	AND ( fbPosi_Wippe_030601.OwJobStatus = iAutomatikBereitJob
		AND	fbPosi_Wippe_030601.OsGrundstellungAchse
		AND	fbPosi_Wippe_030601.OsZyklusBeendet
		OR	bFreigabeTuerOeffnen_Wippe_030601
		OR	GKoAnWippe_030601.xAchse_Inaktiv );

bQ_BereichZyklusBeendet_C2_2:=
 	strGHdshk_Bahn030801.str_BahnStatus = iAutomatikBereitJob;


(*----------------------------------------------*)
(*----------------------------------------------*)
(*       Bahnen stehen					*)
(*----------------------------------------------*)
(*----------------------------------------------*)
bQ_BereichGestoppt_C1_1:=
	strGHdshk_Bahn030101.b_BahnSteht;
		
		
bQ_BereichGestoppt_C2_1:=
	strGHdshk_Bahn030201_Roll1.b_BahnSteht
	AND strGHdshk_Bahn030201_Roll1.b_BahnSteht
	AND strGHdshk_Bahn030202_Roll2.b_BahnSteht
	AND strGHdshk_Bahn030205_Riem.b_BahnSteht
	AND strGHdshk_Bahn030301.b_BahnSteht
	AND	strGHdshk_Bahn030401.b_BahnSteht
	AND	strGHdshk_Bahn030501.b_BahnSteht
	AND	strGHdshk_Bahn030601.b_BahnSteht
	AND	strGHdshk_Bahn030701_Roll.b_BahnSteht
	AND	strGHdshk_Bahn030702_Riem1.b_BahnSteht
	AND	strGHdshk_Bahn030703_Riem2.b_BahnSteht
	AND	strGHdshk_Bahn031401.b_BahnSteht
	AND	strGHdshk_Bahn031501.b_BahnSteht
	AND	strGHdshk_Bahn032401.b_BahnSteht
	AND	strGHdshk_Bahn032501.b_BahnSteht
	AND	strGHdshk_Anschlag030201.str_ZylinderStatus = iAutomatikBereitJob
	AND ( fbAchse_Wippe_030301.OwOut.xAchseBereit
		OR	fbAchse_Wippe_030301.OwOut.xAchseEnabled
		OR	fbAchse_Wippe_030301.OwOut.xAchseDisabled
		OR	GKoAnWippe_030301.xAchse_Inaktiv )
	AND ( fbAchse_Wippe_030601.OwOut.xAchseBereit
		OR	fbAchse_Wippe_030601.OwOut.xAchseEnabled
		OR	fbAchse_Wippe_030601.OwOut.xAchseDisabled
		OR	GKoAnWippe_030601.xAchse_Inaktiv );

bQ_BereichGestoppt_C2_2:=
	strGHdshk_Bahn030801.b_BahnSteht;


(*----------------------------------------------*)
(*----------------------------------------------*)
(*         Erkennung Stillstand			*)
(*----------------------------------------------*)
(*----------------------------------------------*)

bEineBahnBelegt:=
	strGHdshk_Bahn030101.b_BahnBelegt
	OR strGHdshk_Bahn030201_Roll1.b_BahnBelegt
	OR strGHdshk_Bahn030201_Roll1.b_BahnBelegt
	OR strGHdshk_Bahn030202_Roll2.b_BahnBelegt
	OR strGHdshk_Bahn030205_Riem.b_BahnBelegt
	OR strGHdshk_Bahn030301.b_BahnBelegt
	OR strGHdshk_Bahn030401.b_BahnSteht
	OR strGHdshk_Bahn030501.b_BahnBelegt
	OR strGHdshk_Bahn030601.b_BahnBelegt
	OR strGHdshk_Bahn030701_Roll.b_BahnBelegt
	OR strGHdshk_Bahn030702_Riem1.b_BahnSteht
	OR strGHdshk_Bahn030703_Riem2.b_BahnBelegt
	OR strGHdshk_Bahn031401.b_BahnBelegt
	OR strGHdshk_Bahn031501.b_BahnBelegt
	OR strGHdshk_Bahn032401.b_BahnBelegt
	OR strGHdshk_Bahn032501.b_BahnBelegt;

TBisErkennungStillstand.IN:=
	bQ_BereichZyklusBeendet_C1_1
	AND	bQ_BereichZyklusBeendet_C2_1
	AND	bQ_BereichZyklusBeendet_C2_2
	AND	bQ_BereichGestoppt_C1_1
	AND	bQ_BereichGestoppt_C2_1
	AND	bQ_BereichGestoppt_C2_2
	AND	bEineBahnBelegt
	AND	fbEins[iEins_Id].OsAutomatikStart
	AND	bFreigabeFuerJob_C1_1
	AND	bFreigabeFuerJob_C2_1
	AND	bFreigabeFuerJob_C2_2
	AND NOT strGStoerungen[iEins_Id].bStoerungDruckluft
	AND NOT strGStoerungen[iEins_Id].bAbsoluterStop
	AND NOT strGStoerungen[iEins_Id].bFehlerMitQuittung
	AND NOT strGStoerungen[iEins_Id].bBedingterStop
	AND NOT strGStoerungen[iEins_Id].bStoerungAntriebe
	AND NOT strGStoerungen[iEins_Id].bStoerungAblauf;

TBisErkennungStillstand( PT:= GKoAll.tBisErkennung_Stillstand );
bQ_MStillstand_TrotzBelegung:= TBisErkennungStillstand.Q;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308">
      <LineId Id="2437" Count="17" />
      <LineId Id="2456" Count="20" />
      <LineId Id="292" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_01_Meldungen">
      <LineId Id="0" Count="8" />
      <LineId Id="96" Count="0" />
      <LineId Id="9" Count="85" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_02_Reset_Grund_Freigabe">
      <LineId Id="0" Count="9" />
      <LineId Id="213" Count="0" />
      <LineId Id="10" Count="9" />
      <LineId Id="36" Count="13" />
      <LineId Id="215" Count="11" />
      <LineId Id="77" Count="18" />
      <LineId Id="253" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="254" Count="2" />
      <LineId Id="290" Count="3" />
      <LineId Id="260" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="261" Count="5" />
      <LineId Id="268" Count="6" />
      <LineId Id="96" Count="0" />
      <LineId Id="275" Count="6" />
      <LineId Id="283" Count="6" />
      <LineId Id="145" Count="9" />
      <LineId Id="173" Count="2" />
      <LineId Id="198" Count="1" />
      <LineId Id="311" Count="1" />
      <LineId Id="314" Count="6" />
      <LineId Id="322" Count="2" />
      <LineId Id="202" Count="1" />
      <LineId Id="325" Count="1" />
      <LineId Id="206" Count="1" />
      <LineId Id="211" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_10_AbsAchse_Wippe_030301">
      <LineId Id="0" Count="207" />
      <LineId Id="720" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="209" Count="509" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_11_AbsAchse_Posi_Wippe_030301">
      <LineId Id="0" Count="87" />
      <LineId Id="316" Count="3" />
      <LineId Id="315" Count="0" />
      <LineId Id="89" Count="224" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_12_AbsAchse_Wippe_030601">
      <LineId Id="0" Count="207" />
      <LineId Id="718" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="209" Count="72" />
      <LineId Id="721" Count="0" />
      <LineId Id="283" Count="433" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_13_AbsAchse_Posi_Wippe_030601">
      <LineId Id="0" Count="85" />
      <LineId Id="332" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="89" Count="237" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_14_EilSchl_Buerste_030801">
      <LineId Id="0" Count="75" />
      <LineId Id="380" Count="0" />
      <LineId Id="76" Count="302" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_15_EilSchl_PosiBuerste_030801">
      <LineId Id="0" Count="77" />
      <LineId Id="168" Count="0" />
      <LineId Id="78" Count="65" />
      <LineId Id="170" Count="0" />
      <LineId Id="144" Count="22" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_16_Anschlag_030201">
      <LineId Id="202" Count="4" />
      <LineId Id="329" Count="0" />
      <LineId Id="207" Count="4" />
      <LineId Id="331" Count="0" />
      <LineId Id="212" Count="48" />
      <LineId Id="327" Count="0" />
      <LineId Id="261" Count="2" />
      <LineId Id="325" Count="1" />
      <LineId Id="264" Count="7" />
      <LineId Id="324" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="272" Count="13" />
      <LineId Id="321" Count="1" />
      <LineId Id="286" Count="7" />
      <LineId Id="339" Count="5" />
      <LineId Id="372" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="412" Count="4" />
      <LineId Id="348" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="420" Count="0" />
      <LineId Id="349" Count="9" />
      <LineId Id="392" Count="1" />
      <LineId Id="361" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="398" Count="1" />
      <LineId Id="362" Count="3" />
      <LineId Id="129" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_19_Bahn_040101_Extern">
      <LineId Id="0" Count="99" />
      <LineId Id="101" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_21_Bahn_030801">
      <LineId Id="502" Count="15" />
      <LineId Id="677" Count="0" />
      <LineId Id="518" Count="2" />
      <LineId Id="522" Count="60" />
      <LineId Id="623" Count="0" />
      <LineId Id="625" Count="41" />
      <LineId Id="583" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="584" Count="6" />
      <LineId Id="668" Count="7" />
      <LineId Id="591" Count="2" />
      <LineId Id="667" Count="0" />
      <LineId Id="594" Count="2" />
      <LineId Id="598" Count="24" />
      <LineId Id="493" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_22_Bahn_030701">
      <LineId Id="354" Count="34" />
      <LineId Id="654" Count="0" />
      <LineId Id="389" Count="3" />
      <LineId Id="653" Count="0" />
      <LineId Id="393" Count="259" />
      <LineId Id="353" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_23_Bahn_030601">
      <LineId Id="285" Count="84" />
      <LineId Id="578" Count="0" />
      <LineId Id="370" Count="1" />
      <LineId Id="577" Count="0" />
      <LineId Id="372" Count="1" />
      <LineId Id="579" Count="0" />
      <LineId Id="374" Count="1" />
      <LineId Id="580" Count="0" />
      <LineId Id="376" Count="3" />
      <LineId Id="581" Count="0" />
      <LineId Id="380" Count="58" />
      <LineId Id="474" Count="17" />
      <LineId Id="497" Count="10" />
      <LineId Id="512" Count="47" />
      <LineId Id="284" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_24_Bahn_032501">
      <LineId Id="282" Count="80" />
      <LineId Id="398" Count="0" />
      <LineId Id="364" Count="33" />
      <LineId Id="281" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_25_Bahn_032401">
      <LineId Id="298" Count="120" />
      <LineId Id="297" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_26_Bahn_031501">
      <LineId Id="356" Count="80" />
      <LineId Id="472" Count="0" />
      <LineId Id="438" Count="33" />
      <LineId Id="187" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_27_Bahn_031401">
      <LineId Id="307" Count="121" />
      <LineId Id="305" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_28_Bahn_030501">
      <LineId Id="285" Count="87" />
      <LineId Id="374" Count="32" />
      <LineId Id="120" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_29_Bahn_030401">
      <LineId Id="302" Count="14" />
      <LineId Id="320" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="321" Count="1" />
      <LineId Id="448" Count="0" />
      <LineId Id="323" Count="58" />
      <LineId Id="393" Count="8" />
      <LineId Id="407" Count="2" />
      <LineId Id="413" Count="0" />
      <LineId Id="415" Count="29" />
      <LineId Id="117" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_30_Bahn_030301">
      <LineId Id="684" Count="21" />
      <LineId Id="947" Count="0" />
      <LineId Id="950" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="951" Count="1" />
      <LineId Id="949" Count="0" />
      <LineId Id="706" Count="8" />
      <LineId Id="941" Count="0" />
      <LineId Id="715" Count="17" />
      <LineId Id="934" Count="0" />
      <LineId Id="764" Count="16" />
      <LineId Id="935" Count="0" />
      <LineId Id="781" Count="1" />
      <LineId Id="936" Count="0" />
      <LineId Id="783" Count="17" />
      <LineId Id="831" Count="42" />
      <LineId Id="989" Count="0" />
      <LineId Id="981" Count="0" />
      <LineId Id="977" Count="0" />
      <LineId Id="982" Count="0" />
      <LineId Id="984" Count="0" />
      <LineId Id="983" Count="0" />
      <LineId Id="988" Count="0" />
      <LineId Id="875" Count="6" />
      <LineId Id="953" Count="1" />
      <LineId Id="882" Count="0" />
      <LineId Id="980" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="884" Count="3" />
      <LineId Id="942" Count="4" />
      <LineId Id="888" Count="25" />
      <LineId Id="969" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="915" Count="18" />
      <LineId Id="187" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_31_Bahn_030201">
      <LineId Id="497" Count="30" />
      <LineId Id="1686" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="819" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="821" Count="0" />
      <LineId Id="1693" Count="1" />
      <LineId Id="530" Count="1" />
      <LineId Id="1685" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="820" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="822" Count="0" />
      <LineId Id="1692" Count="0" />
      <LineId Id="534" Count="2" />
      <LineId Id="538" Count="6" />
      <LineId Id="546" Count="0" />
      <LineId Id="554" Count="23" />
      <LineId Id="579" Count="12" />
      <LineId Id="1691" Count="0" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1687" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="1688" Count="1" />
      <LineId Id="593" Count="42" />
      <LineId Id="823" Count="40" />
      <LineId Id="677" Count="1" />
      <LineId Id="1507" Count="84" />
      <LineId Id="1679" Count="1" />
      <LineId Id="867" Count="0" />
      <LineId Id="679" Count="52" />
      <LineId Id="733" Count="0" />
      <LineId Id="1681" Count="1" />
      <LineId Id="734" Count="0" />
      <LineId Id="736" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="1683" Count="1" />
      <LineId Id="739" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="1703" Count="1" />
      <LineId Id="753" Count="26" />
      <LineId Id="781" Count="8" />
      <LineId Id="791" Count="9" />
      <LineId Id="1705" Count="0" />
      <LineId Id="1708" Count="0" />
      <LineId Id="1706" Count="0" />
      <LineId Id="809" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_32_Bahn_030101">
      <LineId Id="0" Count="18" />
      <LineId Id="537" Count="0" />
      <LineId Id="19" Count="100" />
      <LineId Id="447" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="534" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="411" Count="11" />
      <LineId Id="424" Count="1" />
      <LineId Id="523" Count="0" />
      <LineId Id="426" Count="1" />
      <LineId Id="531" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="430" Count="2" />
      <LineId Id="435" Count="0" />
      <LineId Id="455" Count="15" />
      <LineId Id="528" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="436" Count="2" />
      <LineId Id="532" Count="0" />
      <LineId Id="439" Count="6" />
      <LineId Id="478" Count="43" />
      <LineId Id="477" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="123" Count="0" />
    </LineIds>
    <LineIds Name="Aufruf_Eins_1_Bahnen_0301_Bis_0308.Up_90_Ausgaben">
      <LineId Id="0" Count="4" />
      <LineId Id="198" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="10" Count="4" />
      <LineId Id="226" Count="1" />
      <LineId Id="16" Count="2" />
      <LineId Id="25" Count="8" />
      <LineId Id="44" Count="9" />
      <LineId Id="83" Count="1" />
      <LineId Id="230" Count="1" />
      <LineId Id="242" Count="1" />
      <LineId Id="252" Count="4" />
      <LineId Id="259" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="262" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="232" Count="9" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="2" />
      <LineId Id="93" Count="6" />
      <LineId Id="264" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="292" Count="1" />
      <LineId Id="101" Count="1" />
      <LineId Id="294" Count="2" />
      <LineId Id="103" Count="4" />
      <LineId Id="297" Count="1" />
      <LineId Id="108" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="121" Count="10" />
      <LineId Id="299" Count="0" />
      <LineId Id="140" Count="9" />
      <LineId Id="300" Count="13" />
      <LineId Id="171" Count="5" />
      <LineId Id="178" Count="2" />
      <LineId Id="182" Count="4" />
      <LineId Id="188" Count="8" />
    </LineIds>
  </POU>
</TcPlcObject>